
// 算数运算符
	+  -  *  /  %
	+= -= *= /= %=
	++ -- 

// 位运算符
	
	~ 按位取反，01001 => 10110
	& 按位与 01001 & 10110 => 00000
	| 按位或 01001 | 10000 => 11001
	^ 按位异或  
		·如果只有一个操作数为1 结果为1
		01011 | 10010 => 11001
	
	>>左移
		·指定值中的所有位向左移动， 高阶位移出 丢失， 右边补0
		int 超过31位丢失 ， long 63
		byte short 操作时提升 int ，并且移动的位不会丢失
		
	>>右移
		
		·指定值中的所有位向右移动， 低阶位移出 丢失，
		最左边用 符号扩展填充（使用右移前顶部位的值填充）
		
	>>> 无符号右移
		·指定值中的所有位向右移动， 低阶位移出 丢失，
		最左边用 补0
		只对于int long 有用
		·byte short 为负数是 需要提前 提升到int
		
	&=
	
	|=
	
	^=
	
	>>= // a = a>>4
	
	>>>=
	
	<<=

// 布尔逻辑运算符
	& 
	|	逻辑或
	^
	||	短路或
	
	&&	短路与
	!
	&=
	
	
	|=
	^=
	==
	!=
	?:
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	