
#super 的用法
	super(); 是初始化近超类的构造函数，参数和超类的构造函数一致
	super(); 必须在子类的构造函数第一执行；
	如果超类的构造函数没有参数可以不执行 super();
	默认调用 超类的 无参数的构造函数。 如果超类的构造函数中有参数， 那么必须显示的调用 super(agrs);
	在子类非static 成员中， 都可以使用super。 
	最常用的是子类中 定义了和父类相同的属性（隐藏了父类的属性），即可通过super.pro 访问父类的属性
	
	超类的应用变量可以是其子类的 type
	
# 方法的重写
	如果子类中的成员名称 和超类相同， 如果是方法成员参数类型签名也需要一致，否则他们只是重载关系
	
	// 重载关系 m 方法的参数 签名不一致
	class A(){
		void m(){}
	}
	
	class B extends A{
		void m(int a){}
	}