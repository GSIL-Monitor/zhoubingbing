
# 多线程编程
	多线程编程包含同时运行的俩个或 更多个 部分， 这种程序的每一个部分被称为一个线程，并且每个线程定义了单独的执行路径。
	
	基于进程的多任务处理就是计算机同事运行俩个或多个程序的特性，
		程序是调度程序能够调度的最小单元代码
		例如，计算机基于进程的多任务处理可以运行Java 编译器的同时使用文本编辑器或浏览网站， 或其它程序
		
	基于线程的多任务环境中，最小的可调度代码单元是线程， 这意味这单个程序可以同时执行俩个或更多的任务。
		例如，文本编辑器可以在打印的同时格式化文本，只要这俩个动作是通过俩个独立的线程执行即可。
		
	多任务线程需要的开销比多任务进程小。
	进程是重量级的任务，他们需要自己的地址空间。进程通信开销很大并且有很多限制。 从一个进程上下文切换到另一个进程上下文的开销也很大
	线程是轻量级的任务，他们共享共同的空间地址，并且合作共享同一个重量级的进程，线程间的开销不大，从一个线程切换到另一个线程的开销更小
	
	虽然 Java 程序使用基于多进程的多任务环境，但是基于多进程的多任务处理不是由 Java 控制的，
	基于多线程的多任务是有Java 控制的
	
# Java 线程模式
	通过与单线程的环境进行比较， 可以更好地理解多线程环境的价值。
		单线程系统使用一种称为事件循环的方法， 在这种模型中单个线程在一个无线循环中控制运行，轮询一个事件队列以决定下一步做什么，
		一旦轮询返回一个信号，比如准备读取网络文件的信号，事件循环将控制调度至适当的时间处理程序。在这个时间处理程序之前，程序不能执行任何其它工作。这浪费了CPU时间，并且会导致程序的一部分支配着系统二阻止对其他部分进行处理。
		
# 线程优先级
	.线程资源地放弃控制
		在这种情况下，检查其它线程，并且准备运行的线程中优先级最好的那个线程会获得资源
		
	.线程被优先级更高的线程取代
		对于这种情况，没有放弃控制权的低优先级线程不管正在做什么，都会被优先级搞得线程取代。 这称为抢占式多任务处理
	
# 同步
	多线程为程序引入了异步行为， 所以必须提供一种需要时强制同步的方法。
		例如在一个线程读取 表的时候，就必须阻止另外一个线程向该数据机构写入数据。
	





















































































