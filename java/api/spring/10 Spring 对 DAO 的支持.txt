
# 配置一个数据源
	Spring 在第三方依赖包中包含了两个数据源的实现类包： 
	其一是 Apache 的DBCP，其二是 C3P0, 可以在Spring 配置文件中利用二者中的任何一个配置数据库
	
	c3p0是一个jdbc连接池，和dbcp一样为了解决效率问题而存在，但有一些自己的特性和dbcp最大的不同在于c3p0可以自动回收连接，dbcp需要自己手动释放资源返回。不过dbcp效率比较高。
	
. DBCP 数据源
	DBCP 是一个依赖 Jakarta commons-pool 对象池机制的数据库连接池，所以在类路径下还必须包括 commons-pool 的类包
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="com.mysql.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3309/sampledb"
		p:username="root"
		p:password="1234" />
		
		BasicDataSource 提供了close() 方法关闭数据源，所以必须设定 destroy-method="close" 属性，以便Spring 容器关闭时，数据源能够正常关闭
	
	DBCP 其他参数说明：
		事务属性
		defaultAutoCommit		true		连接池创建的默认auto-commit 状态
		defaultReadOnly			默认驱动	连接池创建的连接的默认 read-only 状态。如果没有设置，则 setReadOnly() 方法将不会被调用
		defaultReadOnly			默认驱动	连接池创建的连接的默认 read-only 状态。可选值包括： NONE、READ_COMMITTED、READ_UNCOMMITTED、
											REPEATABLE_READ、SERIALIZABLE
		
		数据源连接数量
		initialSize				0			连接池启动时创建的初始化连接数量
		maxActive				8			最大活动连接：连接池中允许保持空闲状态的最大连接数量，
												超过的空闲连接将被释放。如果是负值，表示不限制
		minIdle					0			最小空闲连接： 连接池中允许保持空闲状态的最小连接数量，低于这个数量将创建新的连接。如果设置0， 则不创建
		maxWait					无限		最大等待时间(ms)： 没有可用连接时，连接池等待连接被归还的最大时间，超时抛出异常， 如果设置-1， 则无限等待
		
		链接情况 维护和检查
		validationQuery			无默认值	SQL 查询语句。在链接返回给调用者之前，用此 SQL 验证从连接池取出的链接是否可用。
												在 MySQL 中可以设置为 "select 1", 在Oracle 中可以设置为 "select 1 from dual"
		testOnBorrow 			true		指明是否需要进行 validationQuery 验证， validationQuery 参数必须设置正确
		testWhileIdle			false		指明连接是否被空闲链接回收器进行检验，如果检测失败，则链接将被从链接中去除， validationQuery 参数必须设置正确
		timeBetweenEvictionRunsMills -1		空闲链接回收器线程运行的周期，以毫秒为单位，如果是 负数则不运行连接回收器线程
		numTestsPerEvictionRuns	3			在每次空闲连接回收器运行时检查的连接数量
		minEvictableIdleTimeMills 1000*60*30  连接在可被空闲连接回收器钱已经在连接池中的空闲时间
	
		缓存语句
		poolPreparedStatements	false		开启连接池的 prepared statement 池功能。当设置为true 时， 
												所有 CallableStatement 和 PreparedStatement 都会被缓存起来
		
		maxOpenPreparedStatements 无限制 	PreparedStatement 池能够同时分配的打开 statements 的最大数量。 0 为不限制
		
		连接泄漏回收
		removeAbandoned			false		标记是否删除泄漏的链接
		removeAbandonedTimeout	300			泄漏的连接可以被回收的超时值，单位为秒
		logAbandoned			false		标记当 Statement 或链接被泄漏时是否打印程序的 stack traces 日志
	
	
2 C3P0
	可以自动回收连接
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooleDataSource" destroy-method="close" 
		p:driverClass="oracle.jdbc.driver.OracleDriver"
		p:dabcUrl="jdbc:oracle:thin:@localhost:1521:ora9i"
		p:use="admin"
		p:password="1234"
		/>
	
	C3P0 其他参数说明：
	
	initialPoolSize		3		初始化时创建的连接数， 应当在 minPoolSize 与 maxPoolSize 之间
	maxPoolSize			15		连接池中最大连接数
	maxStatements		0		JDBC 的标准参数，用以控制数据源内加载的 PreparedStatement 数量。
								如果 maxStatements 与 maxStatementPerConnection 均为0 则缓存关闭
	
	maxIdleTime			0		最大空闲时间，超过空闲时间的连接将被丢弃，0 或负数 则永远不丢去
	
	acquireIncrement			当连接池中的连接用完时，C3P0 一次性创建连接的数目
	acquireAttempts		30		定义在从数据库获取新连接失败后重复尝试获取的次数
	acquireRetryDelay	1000	尝试获取连接的间隔时间，单位毫秒
	autoCommitOnClose	false	连接关闭时默认将所有未提交的操作回滚。
	
	breakAfterAcquireFailure	获取连接失败将会引起所有等待获取连接的线程都跑出异常。但是数据源认保留有效，如果设置 ture,
								那么在尝试获取连接失败后，该数据源将申明一断开并永久关闭。
	
	maxStatementPerConnection 0	连接池内单个连接所拥有的最大缓存 Statement 数
	
	propertyCycle		300		用户修改系统配置参数执行前最多等待的描述
	checkoutTimeout		0		当连接池用完时，等在获取新连接的时间，超时后跑出SQLException ，0 为无限等待
	
	
	connectionTesterClassName	通过实现 ConnectionTester 或 QueryConnectionTester 的类来测试连接，类名需要设置为全限定名，
								默认为 com.mchange.v2.c3p0.impl.DefualtConnectionTester
								
	idleConnectionTestPeriod 0	间隔多少秒检查所有连接池中的空闲连接。 默认0 ，表示不检查
	preferredTestQuery	null	定义所有连接测试都执行的测试语句。提高测试速度。测试的表必须在初始数据源的时候就存在	
	automaticTestTable			C3P0将创建一张名为Test的空表，并使用自带的查询语句进行测试， 属性 preferredTestQuery 将被或略
	testConnectionOnCheckout false	因性能消耗大，请只在需要的时候使用它。如果设为 true ，那么在每个 connection 提交的时候都将校验其有效性
									建议 使用 idleConnectionTestPeriod 或 automaticTestTable 等方法来提升连接测试的性能
	testConnectionOnCheckin	 false  如果设为 true，那么在取得连接的同时将校验连接的有效性
	
	
	
# 获取 JNDI 数据源
	如果应用配置在高性能的应用服务器（如 WebLogic 或 WebSphere等）上，则可能更希望使用应用服务器本身提供的数据源。
	应用服务器的数据源使用 JNDI 开放给调用者使用，Spring 为此专门提供了引用 JNDI 数据源的 JndiObjectFactoryBean 类；
	
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"
		p:jndiName="java:comp/env/jdbc/bbt" />
	
	/*
		简化配置：
		xmlns:jee="http://www.springframework.org/schema/jee"
		
		xsi:schemaLocation="
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-4.0.xsd"
		
		<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/bbt" />
	*/
	
# Spring 的数据源实现
	它没有提供池化连接的机制；每次调用 getConnection() 方法获取新连接时，只是简单创建一个新的连接，
	因此这个数据源只适合在单元测试 或简单的独立引用中使用
	
	DriverManagerDateSoruce ds = new DriverManagerDateSoruce();
	ds.setDriverClassName("com.mysql.jdbc.Driver");
	ds.setUrl("jdbc:mysql://localhost:3309/sampledb")
	ds.setUsername("root");
	ds.setPassword("1234");
	Connection actualCon = ds.getConnection();
	
	
	
	
	
	
	
	
	