
# ANSI/ISO SQL 92 定义的标准事务隔离级别
	
	隔离级别			脏读	不可充读	幻想读 		第一类丢失更新		第二类丢失更新
	
	READ_UNCOMMITED		允许	允许		允许		不允许				允许
	READ_COMMITED		不允许	允许		允许		不允许				允许
	REPEATABLE_READ 	不允许	不允许		允许		不允许				不允许
	SERIALIZABLE		不允许	不允许		不允许		不允许				不允许
	
	

	
# JDBC 对事务的支持
	并不是所有的数据库都支持事务，即使支持事务的数据库也并非支持所有的事务隔离级别。
	用户可以通过 Connection#getMetaData() 方法获取 DatabaseMetaData 对象，并通过该对象的 supportsTransactions()、supportsTransactionIsolationLevel(int level) 方法查看底层数据库的事务支持情况
	

	Connection
		DatabaseMetaData getMetaData()	获取 DatabaseMetaData 对象
		void setAutoCommit(false)			默认情况下是自动提交的，每条执行的 SQL 语句都对应一个事务。
										为了将多条 SQL 语句当成一个事务执行，阻止 Connection 自动提交
										
		void setTransactionIsolation() 		设置事务的隔离级别
		void commit()						提交事务
		void rollback()						回滚事务
	
	DatabaseMetaData
		supportsTransactions()							返回数据库对事务的支持
		supportsTransactionIsolationLevel(int level)	返回事务隔离级别
	
	/*
		Connection conn;
		try{
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/spring","root","123456");
			conn.setAutoCommit(false);
			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
			Statement stmt = conn.createStatement();
			
			int rows = stmt.executeUpdate(..);
			rows = stmt.executeUpdate(..);
			
			conn.commit();
		}catch(Exception e){
		
			conn.rollback();
		}
	*/
	
	JDBC 3.0 中 引入了全新的保存点特性， Savepoint 接口允许用户将事务分割为多个阶段，用户可以指定回滚到事务的特定保存点，而并非 像JDBC 2.0 一样只能回到回滚事务到开始事务的点
	/*
		Statement stmt = conn.createStatement();
			
		int rows = stmt.executeUpdate(..);
		
		Savepoint point1 = rows.setSavepoint('savePoint1');
		rows = stmt.executeUpdate(..);
		
		conn.rollback(point1);
		conn.commit();
	*/
	
	
# ThreadLocal
	ThreadLocal 不是一个线程，而是保存线程本地化对象的容器。当运行多线程的某个对象使用 ThreadLocal 维护变量时，ThreadLocal 为每个使用该变量的线程分配一个独立的变量副本。
	所以每个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。
	
	* 在 ThreadLocal 类中有一个 Map, 用于储存每个线程的变量副本， key 为当前线程对象， 值为对应线程的变量副本。
	
	InheritableThreadLocal 继承与 ThreadLocal， 它自动为子线程复制一份从父线程那里继承而来的本地变量：在创建子线程时，子线程会接受所有可继承的线程变量自动传送给所有穿件的子线程时，应尽可能使用 InheritableThreadLocal
	
	泛型类： ThreadLocal<T>
	
	
	方法：
		void set(Object value)			设置当前线程的 线程局部变量的值
		public Object get()				返回当前线程所对应的线程局部变量
		public void remove()			将当前线程局部变量的值删除，目的时为了减少内存的占用。 
										当线程结束后，对应的线程的局部变量将被自动被回收， 所以显示调用该方法不是必须的
		
		protected Object initialValue()	返回该线程局部变量的初始值，该方法是一个 protected 的方法， 为让子类覆盖而设计的
	
	
	示例：
		public class SequenceNumber{
			private static ThreadLocal<Integer> seqNum = new ThreadLocal<Integer>(){
				public Integer initialValue(){
					return 0;
				}
			};
			public int getNextNum(){
				seqNum.set(seqNum.get()+1);
				return seqNum.get();
			}
			public static void main(String[] args){
				TestDome sn1 = new TestDome();
				TestDome sn2 = new TestDome();
				
				// sn1 sn2 运行互不干扰
				System.out.println(sn1.getNextNum());
				System.out.println(sn2.getNextNum());
				System.out.println(sn1.getNextNum());
				System.out.println(sn2.getNextNum());
				System.out.println(sn1.getNextNum());
				System.out.println(sn2.getNextNum());
			}
		}
	
	
. 将非线程安全成员变量保存在 ThreadLocal 中,
	public class TopicDao{
		// 使用 ThreadLocal 保存 Connection 变量
		private static ThreadLocal<Connection> connThreadLocal = new ThreadLocal<Connection>();
		
		public static Connection getConnection(){
			if(connThreadLocal.get() == null){
				Connection conn = ConnectionManager.getConnection();
				connThreadLocal.set(conn);
				return conn;
			}else{
				return connThreadLocal.get();
			}
		}
		
		public void addTopic() throws SQLException{
			// 从 ThreadLocal 中获取线程对应的 Connection
			Statement stat = getConnection().createStatement();
		}
		
	}
	
	
	
# 对事务管理的支持--------------------------------------------

# 事务管理关键抽象
	在 Spring 事务管理 SPI(Service Provider Interface)的抽象层主要包括3个接口，分别是  PlatformTransactionManager  TransactionDefinition   TransactionStatus. 他们位于 org.springframework.transaction包中
	
.  TransactionDefinition 接口
	该接口定义了Spring 兼容的事务属性，这些属性对事务管理控制的若干方面进行配置
	
	接口定义的方法：
		int getPropagetionBehavior()		事务的传播行为
		int getIsolationLevel()				事务的隔离级别
		int getTimeout()					事务的过期时间
		boolean isReadOnly()				事务的读/写特性
	
	事务传播行为：
		该接口中规定了 7 中类型的事务传播行为，它规定了事务方法和事务方法发生嵌套调用时事务如何进行传播
		
		PROPAGATION_REQUIRED		如果当前没有事务，则新建一个事务； 如果已经存在一个事务，则加入到这个事务中。
		PROPAGATION_SUPPORTS		支持当前事务。如果当前没有事务，则以非事务方式执行
		PROPAGATION_MANDATORY		使用当前的事务。如果当前没有事务，则抛出异常
		PROPAGATION_REQUIRES_NEW	新建事务。如果当前存在事务，则把当前事务挂起
		PROPAGATION_NOT_SUPPORTED	以非事务方式执行。如果当前存在事务，则把当前事务挂起
		PROPAGATION_NEVER			以非事务方式执行。如果当前存在事务，则抛出异常
		PROPAGATION_NESTED			如果当前存在事务，则在嵌套事务内执行；如果当前没有事务 与 PROPAGATION_REQUIRED 类似
									使用 PROPAGATION_NESTED 选项时，必须基于 JDBC 3.0, 并且实现者需要支持保存点事务机制
	
	隔离事务： 当前事务和其他事务的隔离程度， 4个 隔离级别是： 
		ISOLATION_READ_UNCOMMITTED、
		ISOLATION_READ_COMMITTED、
		ISOLATION_REPEATABLE_READ、
		ISOLATION_SERIALIZABLE
		
		此外还定义一个默认的隔离级别 ISOLATION_DEFAULT 它表示使用底层数据库的默认隔离级别
	
	. 事务超时：
		timeout
	. 只读状态：
		readOnly
	
. TransactionStatus 接口 扩展了 SavepointManager 接口 
		
	SavepointManager
		Object createSavepoint() 					创建一个保存点
		void releaseSavepoint(Object savepoint)		释放一个保存点。如果事务提交，则所有的保持点将自动释放，无需手工清除
		void rollbackToSavepoint(Object savepoint)	将事务回滚到特定的保存点上，被回滚的保存点将自动释放
		
	
	TransactionStatus 定义的方法
		boolean hasSavepoint()			判断当前事务是否在内部穿件了一个保存点
		boolean isNewTransaction()		判断当前事务是否是一个新的事务，如果返回 false，则表示当前事务是一个已经存在的事务
										或者当前操作未运行在事务环境中
		boolean isCompleted()			判断当前事务是否已经结束（已经提交或回滚）
		boolean isRollbackOnly()		判断当前事务是否已经被标识为 rollback-only
		void setRollbackOnly()			当前事务设置为 rollback-only



. PlatformTransactionManager 接口
	commit()
	rollback()
	TransactionStatus getTransaction(TransactionDefinition definition)
	
	
# Spring 的事务管理器实现类
	Spring 将事务管理委托给底层的持久化实现框架来完成。 因此 Spring 为不同的持久化框架提供了 PlatformTransactionManager 接口的实现类
	
	/*
		<artifactId>spring-jdbc</artifactId>
	*/
	
	org.springframework.orm.jpa.JpaTransactionManager				
		使用JPA 进行持久化时，使用该事务管理器
	
	org.springframework.orm.hibernateX.HibernateTransactionManager	
		X表示版本， 可为 3、4、5
	
	org.springframework.orm.jdo.JdoTransactionManager
		使用 JDO 进行持久化
	
	org.springframework.jdbc.datasource.DataSourceTransactionManager	
		使用 Spirng JDBC 或 MyBatis 等基于 DataSource数据源的持久化技术时，使用该事务管理器
	
	org.springframework.transaction.jta.JtaTransactionManager
		具有多个数据源的全局事务使用该事务管理器
	
	
. Spirng JDBC 或 MyBatis	
	
	// 配置一个数据源
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="com.mysql.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3309/sampledb"
		p:username="root"
		p:password="1234" />
	
	// 基于数据源的事务管理器
		<bean id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
			p:dataSource-ref="dataSource" />
		在幕后， DataSourceTransactionManager 使用 DataSource 的 Connection 的commit()、 rollback() 等方法管理事务
		
	
. JPA事务管理器配置	
	在底层，JPA 依然通过 JDBC 的 Connection 的事务方法完成最终的控制。 因此，要配置一个 JPA 事务管理器，必须先提供一个DataSource，最后才配置 JpaTransactionManager

	<bean id="entityManagerFactor"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		p:dataSource-ref="dataSource" />	// 指定一个数据源
	
	<bean id="transactionManager" 
		class="org.springframework.orm.jpa.JpaTransactionManager"
		p:ntityManagerFactory-ref="entityManagerFactor"/>
	
	
. Hibernate 3.6+
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:mappingResource="classpath:bbtForum.hbm.xml"
	>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernateX.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>
	
. JTA
	JtaTransactionManager 不需要知道 DataSource 和其他特定的资源，因为它引用容器提供的全局事务管理器
	
	<jee:jndi-lookup id="accountDs" jndi-name="java:comp/env/jdbc/account" />
	<jee:jndi-lookup id="orderDs" jndi-name="java:comp/env/jdbc/order" />
	
	/*
		<bean id="simple"
			class="org.springframework.jndi.JndiObjectFactoryBean" 
			p:jndi-name="java:comp/env/jdbc/account"/>
	*/
	
	<bean id="transactionManager" 
		class="org.springframework.transaction.jta.JtaTransactionManager" />
	
	
# 事务同步管理器
	数据访问技术框架			线程绑定资源获取工具
	Spirng JDBC 或 MyBatis		org.springframework.jdbc.datasource.DataSourceUtils
	HibernateX					org.springframework.orm.hibernateX.SesstionFactoryUtils
	JPA							org.springframework.orm.jpa.EntityManagerFactoryUtils
	JDO							org.springframework.orm.jdo.PersistenceManagerFactoryUtils
	
	/*
		DataSourceUtils.getConnection(DataSource dataSource) 可以从指定的数据源中获取和当前线程绑定的 Connection
		SesstionFactoryUtils.getSession(SessionFactory sessionFactory, boolean allowCreate)
		
		当要脱离模板类，手工操作底层持久化的原生 API 时，就需要通过这些工具类获取线程绑定的资源，
		而不应该直接动 DataSource 或 SessionFactory 中获取。因为不能获得与本线程相关的资源，无法让数据操作参与到本线程相关的事务环境中
	*/
	
	DataSourceUtils 抽象类 定义的方法
		static Connection doGetConnection(DataSource dataSource)	
			首先动事务上下文中获取链接，失败后尝试在从数据源获取链接
		static Connection getConnection(DataSource dataSource)		
			和 doGetConnection 功能一样，实际上，其内部就是通过调用 doGetConnection() 方法获取链接的
			
		static void doReleaseConnection(Connection con, DataSource dataSource)
			释放链接，放回到链接池中
		static void releaseConnection(Connection con, DataSource dataSource)
			同上
	
	
	
	
# 编程式的事务管理
	@Service
	public class ForumService{
		public ForumDao forumDao;
		public TransactionTemplate template;
		
		@Autowired
		public void setTemplate(TransactionTemplate template){
			this.template = template;
		}
		
		public void addForum(final Forum forum){
			template.execute(
				new TransactionCallbackWithoutResult(TransactionStatus status){
					forumDao.addForum(forum);
				}
			)
		}
		
	}
	
	
# 使用 XML 配置声明式事务

. 使用原始的 TransactionProxyFactoryBean, 
	在 spring 2.0 后由于可以通过 aop/tx 命名空间声明事务，因此通过该代理类实施声明式事务的方法以及不被推荐
	
	<!-- 引入 DAOBean 和 DataSource 的配置文件 -->
	<import resuorce="classpath:applicationContext-dao.xml">
	
	<!-- 声明事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	
	
	<!-- 需要实施事务增强的目标业务Bean -->
	<bean id="bbtForumTarget"
		class="package com.smart.service.BbtFroum"
		p:forumDao-ref="forumDao"
		p:topicDao-ref="topicDao"
		p:postDao-ref="postDao" />
	
	// 使用代理工厂为目标 Bean 提供 事务增强
	<bean id="bbtForum"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		p:transactionManager-ref="txManager"
		p:target-ref="bbtForumTarget">
		
		<property name="transactionAttributes">  
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>  
				<prop key="*">PROPAGATION_REQUIRED</prop>  
				/*
					prop 内的值为事务属性信息，其配置格式如下
					传播行为,隔离级别（可选）,是否为只读事务（可选）, 发生异常时回滚事务（可选）,发生异常时照样提交事务（可选）
					
					
					是否为只读事务： readOnly
					发生异常时回滚事务: -Exception 或指定异常类型  -XxxException
					发生异常时照样提交事务: +Exception 	或指定异常类型  -XxxException
				*/
			</props>
		</property>
	</bean>
	
	
# 基于 aop/tx 命名空间的配置

	<import resuorce="classpath:applicationContext-dao.xml">
	
	<!-- 声明事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	
	<!-- 使用强大的切点表达式语言轻松定义目标方法 -->
	<aop:config>
		<aop:pointcut id="serviceMethod"
			expression="execution(* com.smart.service.*Forum.*(..))" />
		
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 事务增强 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="false" />
			<tx:method name="add*" rollback-for="Exception" />
			<tx:method name="update*" />
		</tx:attributes>
	</tx:advice>
	
. <tx:method> 元素属性表
	属性				是否必须	默认值						描述
	
	name				是			与事务关联的方法名，可用统配符号
																如 get*、handle*、on*Event
																
	propagetion			否			REQUIRED					事务传播行为 REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER、NESTED
	isolation			否			DEFAULT						事务隔离级别, 可选值 READ_UNCOMMITED、READ_COMMITED、REPEATABLE_READ、SERIALIZABLE、DEFAULT
	timeout				否			-1							事务超时的时间（ms）， 如果设置为 -1，则事务超时的时间由底层事务系统决定
	read-only			否			false						事务是否只读
	rollback-for		否			所有运行期异常回滚			发生异常时回滚事务，可以指定异常类型 多个异常用逗号 "," 分开
	no-rollback-for		否			所有检查型异常不会滚		发生异常时照样提交事务， 可以指定异常类型 多个异常用逗号 "," 分开
	
	
	
# 使用注解配置申明式事务
	@Service
	@Transaction
	public class BtnForum{
		@Autowired
		private TopicDao topicDao;
		
		@Autowired
		private PostDao postDao;
		
		public void addTopic(Topic topic)throws Exception{
			topicDao.addTopic(topic);
			postDao.addPost(topic.getPost());
		}
		
		// ...
	}
	
	
	<import resuorce="classpath:applicationContext-dao.xml">
	
	<!-- 声明事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<tx:annotation-driven transaction-manager="txManager" />

	transaction-manager 属性的默认值为 transactionManager， 如果事务管理器的 id 属性为 "transactionManager"， 则可以忽略该属性。
		
	简化：<tx:annotation-driven />
	
	其他属性：
		proxy-target-driven		如果为 true， 则Spring 将通过创建子类来代理业务类；如果为false, 则使用基于接口的代理。
								如果使用子类来代理，则需要在类路径中添加CGLib.jar 类库
		order					如果业务类除事务切面外，还需要织入其他的切面，则通过该属性可以控制事务切面在目标连接点的织入顺序
	
. @Transaction 注解属性说明
	属性名					说明
	propagation				事务传播行为，@Transaction(propagation="Propagation.REQUIRES_NEW")
	isolation				事务隔离级别
	readOnly			
	timeout
	rollbackFor				rollbackFor={SQLException.class}  多个异常用逗号隔开
	rollbackForClassName	rollbackForClassName={"Exception"}
	
	noRollbackFor		
	noRollbackForClassName  
	
	
	建议在业务实现类上使用 @Transaction 注解。当然也可以在业务接口上使用 @Transaction 注解，
	由于注解不能被继承，所以在业务接口中标注的 @Transaction 注解不会被业务实现类继承，如 <tx:annotation-driven proxy-target-class="true" />
	
	
. 在方法处使用注解
	如果有些方法需要使用特殊的事务属性，则可以在类注解的基础上提供方法注解
	
	@Transaction
	public class BtnForum{
		@Transaction(readOnly=true) // 覆盖类的 @Transaction 注解
		public void addTopic(Topic topic)throws Exception{
		
		}
	}
	
	
. 使用不同的事务管理器
	@Service
	public class MultiForumService{
		@Transaction("forum")
		public void addTopic(Topic topic)throws Exception{
		
		}
	}
	
	// forumDataSource 配置指定的 DataSource
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="forumDataSource">
		<qualifier value="forum" />
	</bean>
	<tx:annotation-driven />
	
	

	/*
		
		@Transaction("froum")
		public @interface ForumTransaction{
			
		}
		
		
		public class MultiForumService{
			@ForumTransaction
			public void addTopic(Topic topic)throws Exception{
			
			}
		}
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	