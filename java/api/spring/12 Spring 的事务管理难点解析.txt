




# JDBC 访问数据库
	// beans.xml
	<context:component-scan base-package="com.smart" />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="com.mysql.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3306/spring"
		p:username="root"
		p:password="123456" />
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" 
		p:dataSource-ref="dataSource"/>
		
	/*
		这里没有配置 事务管理器，但是数据可以持久化到数据库中
	*/
	
	@Service("userService")
	public class UserJdbcWithoutTransManagerService {
		@Autowired
		private JdbcTemplate jdbcTemplate;

		public void addScore(String userName,int toAdd){
			String sql = "UPDATE t_user u SET u.score = u.score + ? WHERE user_name =?";
			jdbcTemplate.update(sql,toAdd,userName);
		}

		public static void main(String[] args) {
			ApplicationContext ctx = new ClassPathXmlApplicationContext("com/smart/beanfactory/beans.xml");
			UserJdbcWithoutTransManagerService service = (UserJdbcWithoutTransManagerService)ctx.getBean("userService");
			JdbcTemplate jdbcTemplate = (JdbcTemplate)ctx.getBean("jdbcTemplate");
			BasicDataSource basicDataSource = (BasicDataSource)jdbcTemplate.getDataSource();
			
			//检查数据源autoCommit的设置
			System.out.println("autoCommit:"+ basicDataSource.getDefaultAutoCommit());
		   
		   //插入一条记录，初始分数为10
			jdbcTemplate.execute("INSERT INTO t_user(user_name,password,score) VALUES('tom','123456',10)");
			//调用工作在无事务环境下的服务类方法,将分数添加20分
			service.addScore("tom",20);
			
			//查看此时用户的分数
			int score = jdbcTemplate.queryForObject("SELECT score FROM t_user WHERE user_name ='tom'", Integer.class);
			System.out.println("score:"+score);
			// jdbcTemplate.execute("DELETE FROM t_user WHERE user_name='tom'");
		}
	}
	
	/*
		autoCommit:true
		score:30
	*/
	
	
# Hibernate 访问数据库
	如果使用 Hibernate 访问数据库，需要配置事务管理器， 否则Spring 就会采用默认的事务管理策略搜索(PROPAGATION_REQUERED,readOnly)
	如有修改操作是不允许的，会抛出异常
	
	
	// User.class
	@Entity
	@Table(name="T_USER")
	public class User implements Serializable{
		@Id
		@Column(name = "USER_NAME")
		private String userName;

		private String password;

		private int score;


		public String getUserName() {
			return userName;
		}

		public void setUserName(String userName) {
			this.userName = userName;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public int getScore() {
			return score;
		}

		public void setScore(int score) {
			this.score = score;
		}

		public String toString() {
			return (new ReflectionToStringBuilder(this) {
				protected boolean accept(Field f) {
					if(f.getType().isPrimitive() || f.getType() == String.class ){
						return true;
					}else{
						return false;
					}
				}
			}).toString();
		}
	}
	
	// beans.xml
	<context:component-scan base-package="com.smart.hiber" />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="com.mysql.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3306/spring"
		p:username="root"
		p:password="123456" />
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" 
		p:dataSource-ref="dataSource"/>
		
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource"
	>
		<property name="annotatedClasses">
			<list>
				<value>com.smart.User</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateTemplate" 
		class="org.springframework.orm.hibernate4.HibernateTemplate"
		p:sessionFactory-ref="sessionFactory"/>
	
	
	
	@Service("hiberService")
	public class UserHibernateWithoutTransManagerService {
		private HibernateTemplate hibernateTemplate;

		@Autowired
		public void setHibernateTemplate(HibernateTemplate hibernateTemplate) {
			this.hibernateTemplate = hibernateTemplate;
		}
		
		// 这里使用 hibernateTemplate, 但是xml中没有配置 事务管理
		
		public void addScore(String userName, int toAdd) {
			User user = hibernateTemplate.get(User.class, userName);
			// 以下语句取消注释后，由于默认事务管理器不支持数据更改将报异常
			/*
			 * user.setScore(user.getScore() + toAdd);
			 * hibernateTemplate.update(user);
			 */
		}

		public static void main(String[] args) {
			// 同上 UserJdbcWithoutTransManagerService.main()
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	