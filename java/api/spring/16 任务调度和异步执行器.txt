 
	<dependency>
		<groupId>org.quartz-scheduler</groupId>
		<artifactId>quartz</artifactId>
		<version>1.8.6</version>
	</dependency>

# Quartz 基础结构

. Job 接口
	只有一个方法 void execute(JobExecutionContext context), 开发者通过实现该接口来定义需要执行的任务。
	JobExecutionContext 类提供了调度上下文的各种信息。
	Job 运行时的信息保存在 JobDataMap 实例中。

. JobDetail
	Quartz 在每次执行 Job 时，都重新创建一个 Job 实例，所有调度者不是直接接受一个Job 实例，而是接受一个Job 实现类，一边运行时通过 实现Job接口的类的 SimpleJob.class#newInstance() 的反射机制实例化 Job.
	class SimpleJob emplements Job{
		public void execute(){}
	}
	
	JobDetail 类描述 Job 实现类及其他相关的静态信息，如 Job 名称、表述、关联监听器等信息
	JobDetail(String name, String group, java.lang.Class jobClass)
	
	
. Trigger
	是一个类，描述 触发 Job 执行的时间触发规则。
	主要有 SimpleTrigger 和 CronTrigger 这俩个子类。当需要触发一次或者以固定间隔周期执行是 SimpleTrigger 是最合适的。CronTrigger 则可以通过 Cron 表达式定义出各种复杂的调度方案，如每天的具体时间， 每周几 特定的时间
	
	
. Calendar: org.quartz.Calendar
	和org.util.Calendar 不同，它是一些日历特定时间的集合。
	一个 Trigger 可以和多个Calendar 关联，一边排除或包含时间点。 如每天的特定时间，但是排除节假日
	
	Calendar 的实现类
		AnnualCalendar
		MonthlyCalendar
		WeeklyCalendar

. Scheduler
	代表一个 Quartz 的独立运行容器， Trigger和JobDetail 可以注册到 Scheduler 中，二者在Scheduler 中拥有各自的组及名称。
	组及名称是 Scheduler 查找定位容器中某一对象的依据， Trigger和JobDetail各自 组及名称的组合必须唯一，他们由于处在不同集合中 他们的组及名称 没有冲突
	
	一个Job 可以对应多个 Trigger，但一个Tigger 只能对应一个 Job
	
	可以通过 SchedulerFactory 创建一个 Scheduler 实例。
	Scheduler#getContext() 放回 SchedulerContext 保存着 Scheduler 上下文信息
	
	Job和 Trigger 都可以访问 SchedulerContext
	
	SchedulerContext 提供了多个put() 和getXxx()方法

. ThreadPool
	Scheduler 使用一个线程池作为任务运行的基础设施，任务通过共享线程是种的线程来提高运行效率

	
	
# 使用 SimpleTrigger
	SimpleTrigger 拥有多个重载的构造函数
	
	SimpleTrigger(String name, String group)	
		通过该构造函数指定 Trigger 名称和所属组
	
	SimpleTrigger(String name, String group, Date startTime)	
		startTime 指定触发的开始时间 
		
	SimpleTrigger(String name, String group,Date startTime Date endTime, int repeatCount, long repeatInterval)	
		除指定以上信息外，还可以指定结束时间、重复执行次数、时间间隔等参数。
	
	SimpleTrigger(String name, String group, String jobName, String jobGroup, Date startTime Date endTime, int repeatCount, long repeatInterval )	
		这是一个最复杂的一个构造函数，在指定触发参数的同时，通过 jobName、jobGroup， 是该 Trigger 和 Scheduler 中的某个人物关联起来
	
	
	public class SimpleJob implements Job {
		@Override
		public void execute(JobExecutionContext arg0) throws JobExecutionException {
			// TODO Auto-generated method stub
			System.out.println("job");
			
		}
	}
	
	
	public class SimpleTriggerRunner {
		public static void main(String agrs[]) {
			try {
				// 创建一个 JobDetail 实例，指定  SimpleJob.class
				JobDetail jobDetail = new JobDetail("job1_1","jgroup1", SimpleJob.class);
				
				SimpleTrigger simpleTrigger = new SimpleTrigger("trigger1_1","tgroup1");
				simpleTrigger.setStartTime(new Date(System.currentTimeMillis()+600L));
				simpleTrigger.setRepeatInterval(2000);
				// 继续重复 10次， 公运行 11 次
				simpleTrigger.setRepeatCount(10);
				
				// 通过 SchedulerFactory 获取一个调度器实例
				SchedulerFactory schedulerFactory = new StdSchedulerFactory();
				Scheduler scheduler = schedulerFactory.getScheduler();
				scheduler.scheduleJob(jobDetail, simpleTrigger);
				scheduler.start();
				
			}catch(Exception e) {}
		}
	}
	
	
# 使用 CronTrigger

	Cron 表达式	有6或7个(空格分隔)时间字段组成， 对大小写不敏感
	
	位置	时间域名	允许值			允许的特殊字符
	1		秒			0-59			,-*/
	2		分钟		0-59			,-*/
	3		小时		0-23			,-*/
	4		日期		1-31			,-*?/LWC
	5		月份		1-12			,-*/
	6		星期		1-7				,-*?/LC#
	7		年（可选）	空值 1970-2099	,-*/
	
	* 	表示对应字段每一个时刻，每时 每分钟 等待
	？	只在日期和星期字段中使用， 它通常指定为 “无意义的值”， 相等于占位符
	
	_	表达一个范围， 如 10-12 表示 10,11,12
	,	表示一个列表值。 如在星期字段中使用 "MON,WED,FRI" 表示 星期一 三 五
	/	x/y表示一个等步长序列， x为起始值，y 为增量步长值， 5/15 在秒字段中表示 5 20 35 50
	
	L	是Last 的意思， 只在日期和星期 字段中使用， 
		星期字段最后一天是 星期六， 如在星期字段里面 L 前面有一个 1-7 的数字表示，这个当月的最后一个星期几
		6L 表示当月最后一个星期五
	
	W 	只能出现在日期字段里，表示离改日期最近的工作日。 例如，15W 匹配 当月15号 最近的一个工作日
		如果当天是工作日就匹配当天，如果当天是周六 就匹配 14 周五，如果当天是周日就匹配 16 周六
		需要注意的是匹配日期不能跨月， 
		W 只能指定单一日期，而不能指定日期范围
		
		LW 组合表示当月的最后一个工作日
	
	#	只能出现在星期字段里，表示当月的某个工作日， 6#3 表示当月 第3周的周5。
		4#5 如果当月没有第五周的周三 则不触发
	
	C	只在日期 和星期字段中使用， 5C 在日期中相当于 5号之后的那一天， 1C 在星期字段中表示星期日后的第一天
	
	
	CronTrigger cronTrigger = new CronTrigger("trigger1_2","tgroup1");
	CronExpression cexp = new CronExpression("0/5 * * * * ?")
	
# 任务调度信息存储
	
	// 如保存在数据库中需要添加 依赖
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.5.8</version>
	</dependency>
	
	/*
		需要在 mysql安装目录下 运行 mysql -uroot -p123456 -Dspring < C:\Users\指定目录\tables_mysql.sql
		以创建相应的调度任务表
	*/
	
	// quartz.properties
	# 集群的配置，这里不适用 集群
	org.quartz.scheduler.instanceName = DefaultQuartzScheduler
	org.quartz.scheduler.rmi.export = false
	org.quartz.scheduler.rmi.proxy = false
	org.quartz.scheduler.wrapJobExecutionInUserTransaction= false
	
	# 配置调度器的线程池
	org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
	org.quartz.threadPool.threadCount = 10
	org.quartz.threadPool.threadPriority = 5
	org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

	# Using RAMJobStore
	## if using RAMJobStore, please be sure that you comment out the following
	## - org.quartz.jobStore.tablePrefix, 
	## - org.quartz.jobStore.driverDelegateClass, 
	## - org.quartz.jobStore.dataSource
	
	# 配置任务调度现场数据保存机制
	#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore	
	
	# Using JobStoreTX
	## Be sure to run the appropriate script(under docs/dbTables) first to create tables
	org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX

	# Configuring JDBCJobStore with the Table Prefix
	org.quartz.jobStore.tablePrefix = QRTZ_

	# Using DriverDelegate
	#org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
	#org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.OracleDelegate
	#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.HSQLDBDelegate
	
	# Using datasource
	org.quartz.jobStore.dataSource = qzDS

	# Define the datasource to use
	##Mysql
	org.quartz.dataSource.qzDS.driver = com.mysql.jdbc.Driver
	org.quartz.dataSource.qzDS.URL = jdbc:mysql://localhost:3306/spring
	org.quartz.dataSource.qzDS.user = root
	org.quartz.dataSource.qzDS.password = 123456
	org.quartz.dataSource.qzDS.maxConnections = 10

	#Oracle
	#org.quartz.dataSource.qzDS.driver = oracle.jdbc.driver.OracleDriver
	#org.quartz.dataSource.qzDS.URL = jdbc:oracle:thin:@localhost:1521:ora9i
	#org.quartz.dataSource.qzDS.user = stamen
	#org.quartz.dataSource.qzDS.password = abc
	#org.quartz.dataSource.qzDS.maxConnections = 30  
	
	
	// 恢复调度任务的执行
	public class JDBCJobStoreRunner {
		public static void main(String agrs[]) {
			try {
				SchedulerFactory schedulerFactory = new StdSchedulerFactory();
				Scheduler scheduler = schedulerFactory.getScheduler();
				String[] triggerGroups = scheduler.getTriggerGroupNames();
				
				for(int i=0; i < triggerGroups.length; i++) {
					String[] triggers = scheduler.getTriggerNames(triggerGroups[i]);
					for(int j = 0; j< triggers.length; j++) {
						Trigger tg = scheduler.getTrigger(triggers[j], triggerGroups[i]);
						
						if(tg instanceof SimpleTrigger && tg.getFullName().equals("tgroup1.grigger1_1")) {
							scheduler.rescheduleJob(triggers[j], triggerGroups[i], tg);
						}
					}
				}
				scheduler.start();
			}catch(Exception e) {}
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	