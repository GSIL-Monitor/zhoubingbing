

# pom.xml
. 使用 maven-compiler-plugin 插件, 使用 cmd:mvn tomcat7:run 启动 项目。 http://localhost:8089 为项目根路径。
	/*
		为了解决 ajax 请求url 使用根路径后修改项目名称带来的问题( 例如 项目名称为 test, 那么ajax url 必须为 /test/url  ),
		使用tomcat7-maven-plugin 插件，配置path为 /, ajax 请求url 根路径为 /url。
	*/
	<plugins>
		...
		<plugin>
			<groupId>org.apache.tomcat.maven</groupId>
			<artifactId>tomcat7-maven-plugin</artifactId>
			<version>2.2</version>
			<configuration>
				<path>/</path>
				<port>8089</port>
				<uriEncoding>UTF-8</uriEncoding>
			</configuration>
		</plugin>
	</plugins>

# web.xml -------------------------------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8"?>
	<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="http://java.sun.com/xml/ns/javaee"
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		id="WebApp_ID" version="3.0">
		...
	</web-app>

. 默认路径	
	<welcome-file-list>
		<welcome-file>index</welcome-file>
	</welcome-file-list>
		
		
. 配置监听器
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	
. 业务层和持久层的Spring 配置文件，这些配置文件被父Spring 容器所使用
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:application-context.xml</param-value>
	</context-param>
		
. 中央控制器
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 默认是 /WEB-INF 文件夹下 springmvc-servlet.xml (<servlet-Name>-servlet.xml) -->
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		
		/*
		<!-- 布尔类型的属性。 决定是否将 WebApplicationContext 发布到 ServletContext 中，
			如果容器中没有任何时间监听器，可以设置为false，一边提高运行性能
			默认为true
			-->
		<init-param>
			<param-name>publishContext</param-name>
			<param-value>true</param-value>
		</init-param>
		
		<!-- 布尔类型的属性。当 DispatcherServlet 处理完一个请求后，是否需要向容器发布一个 ServletRequestHandledEvent事件
			默认为true
			-->
		<init-param>
			<param-name>publishEvents</param-name>
			<param-value>true</param-value>
		</init-param>
		
		*/
		
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	
	
. servlet 映射
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
. 静态资源过滤
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping> 
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	
		
. 配置Spring提供的字符编码过滤器
	<filter>
		<filter-name>SpringCharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SpringCharacterEncodingFilter</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
	
	
# spring-mvc.xml -------------------------------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8" ?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		   http://www.springframework.org/schema/mvc
		   http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		   http://www.springframework.org/schema/context
		   http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		...
	</beans>
	
. 组件扫描器
	<context:component-scan base-package="com.smart.controller" />
	
. 视图解析器
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/"></property>
		<property name="suffix" value=".html"></property>
	</bean>
	
	
	
# application-context.xml -------------------------------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8" ?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:cache="http://www.springframework.org/schema/cache"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		   http://www.springframework.org/schema/context
		   http://www.springframework.org/schema/context/spring-context-4.0.xsd
		   http://www.springframework.org/schema/cache
		   http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		   http://www.springframework.org/schema/tx
		   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		   http://www.springframework.org/schema/aop
		   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
		...
	</beans>
	
	
# UserController.class -------------------------------------------------------------------------------------------
	package com.smart.controller;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.ResponseBody;

	@Controller
	public class UserController {
		@RequestMapping(value = {"/index", ""})
		public String index() {
			return "index";
		}
	}
	
	
# 注解驱动的控制器
	
. 使用 @RequestMapping 映射请求
	在 POJO 类定义处标注 @Controller，在通过 <context:component-scan /> 扫描相应的类包，即可使 POJO 成为能够处理 HTTP 请求的控制器。
	
	
	@RequestMapping 不但支持标准的 URL, 还支持 ？、*、** 和 {xxx} 的占位符
		
		* 		匹配 0 或多个字符，但不包含 / 字符	/user/*/create 匹配	/user/create、/user/a/create
		**		匹配多个字符，包含 / 字符	/user/**/create 匹配 /user/create、/user/a/b/create
		?		表示一个字符的占位符		/user/create??	匹配 /user/createaa 、/user/createbb
		{xxx}	表示占位符 variable					company/{companyId}/user/{userId}/detail

	
	@RequestMapping 属性
		value
		method	请求方法	GET POST DELETE HEAD OPTIONS PUT TRACE
		headers	报文头		
			Accept: */*
			Referer: http://localhost:8888/test/index
			Accept-Language: en,zh;q=0.9,zh-CN;q=0.8
			User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
			Content-Type: application/x-www-form-urlencoded; charset=UTF-8
			Host: localhost:8888
			Content-Length: 112
			Connection: keep-alive
			Cache-Control: no-cache
			Cookie: 获取浏览器的 Cookie
		/*
			Cache-Control 在 html 文件头部设置
			<meta http-equiv="Cache-Control" content="max-age=7200" />
		*/
		
		params	报文体		
			params="param1"		表示请求必须包含名为 param1 的请求参数
			params="!param1"	表示请求不能包含名为 param1 的请求参数
			params={"param1=value1", "param2"}	表示请求必须包含名为 param1 param2 俩个请求参数，且 param1 的值必须为 value1
	

	
# 请求处理方法签名
	Spring 会将请求方法的参数 进行自动转换
	例如  HttpServletRequest request, HttpServletResponse response
	
	如果参数是注解签名 Spring 会将在上下文获取注解的值， 如下：
	
. @PathVariable
	URL 中的{xxx} 占位符可以通过  @PathVariable("xxx") 绑定到操作方法的入参中。
	如果在类定位出使用 @PathVariable，则也可以绑定到处理方法的入参中
	
	@RequestMapping{"/{userId}"}
	public class UserController{
		@RequestMapping{"/{userName}"}
		public String showDetail(@PathVariable("userId") String userId, @PathVariable("userName") String userName){
			...
		}
	}
	
. @RequestParam
	@RequestParam 属性
		value			参数名
		required		是否必须， 默认为true
		defaultValue	默认参数值，不推荐使用

	@RequestParam 用来获取 url?searchName=value search字段
	
	@RequestMapping(path="/handle1")
	public String handle1(@RequestParam("userName") String userName){
		return "path";
	}

. @RequestHeader
	属性同上
	
	用于获取报文头的参数值
	@RequestHeader("Cookie") String cookie
	@RequestHeader("User-Agent") String cookie
	
. @CookieValue
	属性同上
	required	默认为false


	用于获取浏览器 cookies 信息指定的值
	@CookieValue(value = "cacheName", required = true, defaultValue = "value")
	
	
# 使用矩阵变量（@MatrixVariable）绑定参数
	需要在 apring-mvc.xml 文件中添加配置，允许使用矩阵变量
	<mvc:annotation-driven enable-matrix-variables="true"/>
	
	矩阵变量 需要url中使用占位符( {userId} ), /book/{id};name=javaBook
	多个变量用 分号";" 分隔符分开
	一个变量可以有多个值 kind=kind1,kind2,kind3
	
	// 请求的url /book/111;author=libai
	@RequestMapping(path="/book/{id}")
	public void handle1(@MatrixVariable String author){
		
	}
	
	
	@MatrixVariable 属性
		value			指定 url 中的变量，定义该变量的别名 @MatrixVariable(value="author") String sliasName 
		pathVar			当url 中有多个占位符(variable)时，通过 该属性指定所属占位符
		
		required		是否必须
		defaultValue	指定默认值

	@MatrixVariable(value="author", defaultValue)
	
	// 获取属性多个值  @MatrixVariable List<String> kind
	// 把绑定的占位符 的属性 合并到 Map 结果中
		//GET /owners/42;q=11;r=12/pets/petId;q=22;s=23
		 
		// 不指定占位符 
		@MatrixVariable Map<String,String> matrixVars
			matrixVars = ["q" : [11,22], "r" : 12, "s" : 23]
		
		// 指定占位符
		 @MatrixVariable(pathVar = "petId") Map<String,String> petMatrixVars)		
			petMatrixVars = ["q" : 11,"s" : 23]
	
	
. 使用 Servlet API 对象作为入参
	
	m(HttpServletRequest request, HttpServletResponse response){
		WibUtils.findParameterValue(request,"userName")
	}
	
	
. 使用 I/O 对象作为入参，
	m(OutputStream os) throw IOException{
		Resource res = new ClassPathResoruce("/image.jpg");
		FileCopyUtils.copy(res.getInputStream(), os)
	}
	
. 其它类型的参数
	Locale
	Principal
	
	
	
# 使用 HttpMessageConverter<T>
	它负责将请求信息转换为一个对象(类型为T)，将对象(类型为T) 输出为响应信息
	
	DispatcherServlet 已经默认安装了 RequestMappingHandlerAdapter 作为 HandlerAdapter 的组件实现类
	
. @RequestBody
	将请求的 实体部分转换成字符串，将 POST 请求中的 data 部分转换成字符串
	public String register(@RequestBody String requestBody) {
	
	}
	
. @ResponseBody
	将返回结果以字符串的方式返回, 以下 ajax 返回的结果为 success 字符串, 或者返回图片流
	@ResponseBody
	public String register() {
		return "success";
	}
	
	/*
		public @ResponseBody String register() {
			return "success";
		}
	*/
	
. HttpEntity<T>
	与 @RequestBody 类似，
	HttpEntity 不但可以访问请求和响应报文体的数据， 还可以访问请求和访问报文头的数据
	
	m(HttpEntity<String> httpEntity){
		long contentLen = httpEntity.getHeaders().getContentLength();
		httpEntity.getBody()
		...
	}
	
. ResponseEntity<T>
	ResponseEntity<byte[]> responseEntity = new ResponseEntity<byte[]>(fileData, HttpStatus.OK);
	return responseEntity;
	
	
# 使用 @RestController 和 AsyncTestTemplate
	
. @RestController  
	改注解已经标注了@ResponseBody 和 @Controller
	
	如果在控制器类上标注 @RestController， 就不需要再 每个方法是添加 @ResponseBody
	
	@RestController
	public class UserController{}
	
# 处理数据模型
. ModelAndView 类
	控制器处理的返回值如果为 ModelAndView, 则其即包含视图信息，又包含模型数据信息
	
	一般用于 jsp 页面，给 jsp 提供 ${value}
	
	@RequestMapping{value="/user", method=RequestMethod.POST}
	public ModelAndView createUser(User user){
		ModelAndView mav = new ModelAndView();
		mav.setViewName("url");
		mav.addObject("user",user);
	}
	// .jsp
	<p>恭喜 ${user.userName} 您创建成功！</p>
	
	ModelAndView 方法
		ModelAndView addObject(String attributeName, Object attributeValue)
		ModelAndView addAllObject(Map<String,?> modelMap)
	
		void setView(View view)
		void setViewName(String viewName)
	
. @ModelAttribute 模型属型
	将方法入参对象添加到模型中, 在 jsp 页面中可以直接使用 模型对象 ${user.name}
	
	public String handle(@ModelAttribute("user") User user){
		return "url"
	}
	
. Map 及 ModelMap
	如果方法入参为 Map 或 ModelMap 类型，则Spring MVC 会将隐含模型的引用传递给这些入参
	可以通过入参对象访问到模型中的所有数据， 也可以像模型添加新的属性数据
	
	
	public String handle(ModelMap modelMap){
		modelMap.addAttribute("key","value");
		User user = (User)modelMap.get("user");
		return "url"
	}
	
. @SessionAttrbutes
	实现多个请求公用某个数据属性数据，
	@SessionAttrbutes(value={"user1","user2"})			将名为 user1 及 user2  的模型属性添加到 会话中，
	@SessionAttrbutes(types={User.class, Dept.class})	将模型中所有类型为 User 及 Dept 的属性添加到 会话中
	@SessionAttrbutes(value={"user1","user2"}, types={User.class, Dept.class})
	
	
	
	@SessionAttrbutes("user")
	public class UserController{
		
		// 自动将此处的 user 模型属性保存到 HttpSession 中
		@RequestMapping
		handle(@ModelAttribute("user") User user){
		
		}
		
		handle2(ModelMap modelMap,SessionStatus sessionStatus){
			// 读取数据模型中的数据
			User user = (User)modelMap.get("user");
			if(user != null){
				sessionStatus.setComplete();
			}
			return "url"
		}
	}
	
	
# 数据转换
. ConversionService 接口
	boolean canConvert(Class<?> sourceType, Class<?> targetType)
		判断是否可以将一个类转换为另一个类
	<T> T convert(Object source, Class<T> targetType)
		将原类型队形转换为目标类型对象
	
	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)
		需要转换的类将以成员变量的方式出现在宿主类中。
		TypeDescriptor 不但描述了需转换类的信息，还描述了从宿主类的上下文信息，如成员变量上的注解，成员变量是否已数组 集合 Map 的方式呈现
		
	Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)
		将对象从元类型对象转换为目标类型对象，此时往往会用到所在宿主类的上下文信息
	
	
	/*
		可以利用 org.springframework.context.support.ConversionServiceFactoryBean 在 Spring 的上下文中定义一个 ConversionService
	*/
	
	<mvc:annotation-driven conversion-service="conversionService"/>
	<bean id="conversionService">
		class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property>
			<list>
				// 注册转换器
				<bean class="com.smart.StringToUserConverter"
			</list>
		</property>
	</bean>
	
	注册到 ConversionServiceFactoryBean 的类必须实现  Spring 支持的转换器接口
	
	Converter<S, T>
		public interface Converter<S, T>{
			T convert(S source)
		}
		
	ConverterFactory
		public interface ConverterFactory<S, R>{
			<T extends R> Converter<S, T> getConverter(Class<T> targetType)
		}
		
	GenericConverter
		public interface GenericConverter{
			public Set<ConvertiblePair> getConvertibleTypes();
			Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);
		}
	
	示例：
	
	public class StringToUserConverter implements Converter<String, User>{
		public User convert(String source){
			User user = new User();
			if(source!=null){
				String[] items = source.split(":");
				user.setName=items[0];
			}
			return user;
		}
	}
	
	// GET: /book?user=nameV,passwordV,ageV
	@RequsetParam("user") User user
	
# 使用 @InitBinder 和 WebBindingInitializer 装配自定义编辑器
	
	@RequestMapping()
	public class UserController{
		@InitBinder
		public void initBinder(WebDataBinder binder){
			binder.registerCustomEditor(User.class, new UserEditor();
		}
	}
	
	
# 数据格式化
	Spring 的 org.springframework.format.datatime 包中提供了用于时间格式化的 DateFromatter 实现类
	
	org.springframework.format.number 包中提供了 3个用于数字对象格式化的实现类
		NumberFromatter			用于数字
		CurrencyFromatter		用于货币
		PercentFromatter		用于百分比
	
	在开发中可以手工调用这些 Formatter 接口实现类进行对象数据格式化工作， 但是不推荐使用。
	Spring 提供了注解驱动模型数据输出时自动通过注解应用格式化功能
	
. 注解驱动
	org.springframework.format.annotation 包
	@NumberFromat
	@DateTimeFromat
	
	
	
	<mvc:annotation-driven conversion-service="conversionService"/>
	<bean id="conversionService">
		class="org.springframework.context.support.FromattingConversionServiceFactoryBean">
		<property>
			<list>
				// 注册转换器
				<bean class="com.smart.StringToUserConverter"
			</list>
		</property>
	</bean>
	
	/*
		FromattingConversionService 的工厂类不仅支持自定义的转换器，还可以组侧自定义注解驱动逻辑
	*/
	
	
	public class User{
		@DateTimeFromat(pattern="yyyy-MM-dd")
		private Date birthday;
		
		@NumberFromat(pattern="#,###.##")
		private long salary
	}
	
. @DateTimeFromat
	该注解可对java.util.Date、java.util.Calendar、java.long.Long 及 Joda 时间类型的属性进行注解。
	
	它支持以下几个互斥的属性：
	iso 类型为 DateTimeFromat.ISO
		DateTimeFromat.ISO.DATE: 格式为 yyyy-MM-dd
		DateTimeFromat.ISO.DATE_TIME: 格式为 yyyy-MM-dd hh:mm:ss.SSSZ
		DateTimeFromat.ISO.TIME: 格式为 hh:mm:ss.SSSZ
		DateTimeFromat.ISO.NONE: 表示不应该使用ISO 格式的时间
		
	pattern		类型为 String, 使用自定义的时间格式化 如 yyyy-MM-dd hh:mm:ss
	
	style		类型为String，通过样式指定日期/时间的格式，有俩位字符组成，第一位表示日期的样式，第二位表示时间的样式
		S 	短日期/时间的样式
		M	中日期/时间的样式
		L	长日期/时间的样式
		F	完整日期/时间的样式
		-	忽略日期或时间的样式
	
. @NumberFromat
	该注解拥有俩个互斥的属性
	pattern		类型为String ,使用自定义的数字格式化串，如 "##,###.##"
	style 		类型为NumberFormat.Style
		NumberFormat.Style.CURRENCY 货币类型
		NumberFormat.Style.NUMBER	正常数字类型
		NumberFormat.Style.PERCENT	百分数类型
	
	
# 数据校验
. JSR-303 Bean 数据合法校验的标准框架
	@Null 			被注释的元素必须为 null
	@NotNull		必须不为 null
	
	@AssertTrue		必须为 true
	@AssertFalse	必须为 false
	
	@Min(value)		被注释的元素必须为是一个数字， 必须 >= 指定的值
	@Max(value)		必须 <= 指定的值
	
	@DecimalMin(value)	同@Min
	@DecimalMax(value)	同@Max
	
	@Size(max,min)		被注释的元素的大小必须指定的范围内
	@Digits(integer,fraction)	被注释的元素必须为是一个数字，其值必须在可接受的范围内
	
	@Past			被注释的元素必须是一个过去的日期
	@Future			被注释的元素必须是一个将来的日期
	
	@Pattern(regexp, flag)
	
	
	
. Hibernate Validator 扩展注解
	@Email
	@URL(protocol, host, port, regexp, flags)
	
	@Length(min, max)	被注释的字符串的大小必须在指定的范围内
	
	@NotEmpty			被注释的字符串必须为非。空功能强于@NotNull
	@NotBlank			不为null，不为空值，不为全空格。功能强大于@NotEmpty
	
	@Range(min, max)	被注释的元素必须在合适的范围内,判断数值的范围，不仅支持数值类型，还支持字符串、字节等等类型
	
	
. Spring 校验框架
	
	<dependency>
		<groupId>javax.validation</groupId>
		<artifactId>validation-api</artifactId>
		<version>2.0.0.Final</version>
	</dependency>
	<dependency>
		<groupId>org.hibernate.validator</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>6.0.7.Final</version>
	</dependency>
	<dependency>
		<groupId>javax.el</groupId>
		<artifactId>javax.el-api</artifactId>
		<version>3.0.0</version>
	</dependency>
		
		

	// 如果没有指定 validator 属性，annotation-driven会自动装配一个 LocalValidatorFactoryBean
	<mvc:annotation-driven />
	
	<!-- 
		<bean id="validator"
			class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
			<property name="validationMessageSource" ref="messageSource"/>
		</bean>
	-->
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
			<value>classpath:i18n/messages</value>
        </property>
    </bean>
	
	使用：
	
	@Pattern(regexp="w{4,30}")
	@Length(min=2,max=4)
	
	
	// 获取校验结果
	BindingResult 类定义的方法
		FieldError getFieldError(String field)		根据属性名获取对应的校验错误
		List<FieldError> getFieldErrors()
		Object getFildValue(String field)			获取属性值
		int getErrorCount							获取错误数量
	
	FieldError 对象实现了 org.springframework.content.MessageSourceResolvale 接口
		Object getArguments() 返回一组参数对象
		String[] getCodes()		返回一组消息代码，每个代码对应一个资源属性
		String getDefaultMessage() 默认的消息， 如果指定了相应的国际化资源，将会返回 messages.properties 中对应的值

	. 错误代码生成规则
		Pattern.user.password
		Pattern.password
		Pattern.java.lang.String
		Pattern
	
	
	
	
	
	public String handle(@Valid @ModelAttribute("user") User user, BindingResult bindingResult){
		
	}
	
	
	// 在jsp 中显示 错误值
	<%@ page language="java" content="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp.jstl/core" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/from" %>
	
	...
		<from:errors path="password" />
		<from:password path="password" />
	...
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
. Hibernate validator 校验框架
	<mvc:annotation-driven validator="validator"/>
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:i18n/messages</value>
                <value>classpath: **/*.properties</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	