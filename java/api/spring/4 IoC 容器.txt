
# 相关 java 基础知识 ------------------------------------------------------------

. ClassLoder抽象类 和 反射机制
	该类在 java.lang.txt 中有介绍
	
 示例：
	public class Car {
		private String brand;
		private String color;
		private int maxSpeed;
		
		public Car() {
			System.out.println("init car!!");
		}
		
		public Car(String brand, String color, int maxSpeed) {
			this.brand = brand;
			this.color = color;
			this.maxSpeed = maxSpeed;
		}
		
		public void introduce() {
			System.out.println("brand:" + brand + ";color:" + color + ";maxSpeed:" + maxSpeed);
		}
		
		// ... 变量的 getter setter 方法
		public void setBrand(String brand){
			this.brand = brand;
		}
	}
	
	
	public class Test {
		public static void main(String[] agrs) throws Throwable {
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			Class clazz = loader.loadClass("start.reflect.Car");

			Constructor cons = clazz.getDeclaredConstructor((Class[]) null);
			Car car = (Car)cons.newInstance();
			
			
			// 通过反射方法设置属性
			Method setBrand = clazz.getMethod("setBrand", String.class);
			setBrand.invoke(car, "黑色");
		}
	}
	
 如果类中成员 访问修饰符 是 private 或者 protected, 需要取消 Java 语言检查, 否则将抛出 IllegalAccessException.
 如果 JVM 的安全管理器设置了相应的安全机制，那么调用该方法将抛出 SecurityException 。
	
	public class Car{
		private String color;
		
		protected void drive(){}
		
	}
	
	public class Test {
		public static void main(String[] agrs) throws Throwable {
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			Class clazz = loader.loadClass("start.reflect.Car");
			Car car = (Car)cons.newInstance();
			
			Field colorFld = clazz.getDeclaredField("color");
			colorFld.setAccessible(true);	// 取消 Java 语言检查 
			color.set(car, "黑色");
			
			Method driveMth = clazz.getDeclaredMethod("drive",(Class[] null)
			driveMth.setAccessible(true);	// 取消 Java 语言检查 
			driveMth.invoke(car, (Object[] null));
			
		}
	}
	
	
# 资源抽象接口 ------------------------------------------------------------
	
. Resource 接口
	boolean exists()		判断资源是否存在
	boolean isOpen()		判断资源是否打开
	URL getURL() throws IOException
		如果底层资源可以表示成  URL，则该方法返回对应的URL 对象
		
	File getFile() throws IOException
		如果底层资源对应一个文件，则该方法返回对应的 Field 对象
	
	InputStream getInputStream() throws IOException
		返回资源对应的输入流
	
	
. Resource 接口 的实现类
	Resource
		WritableResource 	可写资源接口
			FileSystemResource		文件系统资源，资源以文件系统路径的方式表示， 如 D:/conf/bean.xml
			PathResource			该类封装了 java.net.URL、java.nio.fiel.Path、文件系统资源，它使用户能够访问任何可以通过 URL
									Path、系统文件表示的资源。 如文件系统的资源 HTTP资源 FTP 资源
	
	AbstractResource
		PathResource
		UrlResource 				URL 封装了 java.net.URL, 它使用户能够访问任何可以通过 URL表示的资源。如文件系统的资源 HTTP资源 FTP 资源
		
		ByteArrayResource			二进制数组表示的资源，二进制数组资源可以在内存中通过程序构造
		ClassPathResource			类路径下的资源， 资源以相对于路径的方式表示
		
		InputStreamResource			以输入流返回表示的资源
		ServletContextResource		为访问 Web 容器上下文的资源而设计的类，负责以相对于 Web 应用根目录的路径加载资源，
									它支持以流和url 的方式访问，在 WAR 解包的情况下，也也可通过 File 方式访问
		
		
# 资源加载
	Spring 提供了一个强大的加载资源机制，不但能够通过“classpath:”、“file:” 等资源地址前缀识别不同的资源类型，
	还支持 Ant 风格带通配符的资源地址。
	
	地址前缀：			示例：
	classpath:			classpath:com/smart/beans.xml
		从类路径(resources)中加载资源， classpath: 和 classpath:/ 是等价的，都是相对于类的根路径。 资源文件可以在标准的文件系统中
		也可以在 JAR ZIP 的类包中
	classpath*:
		使用通配符
	
	file:				file:C:/com/smart/beans.xml 或  file:/com/smart/beans.xml
		使用 UrlResource 从文件系统目录中装载资源，可以采用绝对火相对路径
	
	http://
		使用 URLResource 从 Web 服务器中装载资源
		
	ftp://
		使用 URLResource 从 FTP 服务器中装载资源
	
	没有前缀			com/smart/beans.xml
		根据 ApplicationContext 的具体实现类采用对应类型的 Resource
	
	
. 通配符
	?: 匹配文件名中的一个字符
	*：匹配文件名中的任意字符, 不包含 / 。
	**： 匹配多层路径
	

. 资源加载器
	Spring 定义了一套资源加载的接口，并提供了实现类，
	通过根据 不同的资源地址 选用对应的类加载文件资源
	
	
	ResourceLoader 接口仅有一个 getResource() 方法
		方法：Resource getResource(String location) 
	
		ResourcePatternResolver 接口 
			方法： Resource[] getResources(String locationPattern) 
	
			PathMatchingResourcePatternResolver 类
				该类是 Spring 提供的标准实现类
	
	/*
		ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
		Resource resource = resolver.getResource(path);
	*/
	
	DefaultResourceLoader 类 实现了 ResourceLoader 接口
		
	/*
		实战经验:
		用 Resource 操作文件时，如果资源配置文件在项目发布时会被打包到 JAR 中，那么不能使用 Resource 的getFile() 方法，
		否则会抛出 FileNotFoundException
		但是可以使用 Resource 的 getInputStream() 方式读取
		
		(new DefaultResourceLoader()).getResource(path).getInputStream()
		
	*/
	
	
# BeanFactory 的类体系结构 ------------------------------------------------------------

	Spring 为BeanFactory 提供了多种实现，最常用的是XmlBeanFactory, 但是在 Sptring 3.2 中已经被废弃，
	建议使用 XmlBeanDefinitionReader、DefaultListableBeanFactory 替代
	
	
. 接口
	BeanFactory					该接口位于类结构树的顶端，它最主要的方法就是 getBean(String beanName), 该方法返回特定名称的Bean,
								BeanFactory 的功能通过其他接口得到不断的扩展
						
		ListableBeanFactory			该接口定义访问容器中 Bean 基本信息的若干方法，如查看 Bean 的个数，获取某一类型 Bean的配置名，
									查看是否包含某一 Bean 等
			ConfigurableListableBeanFactory
			
		HierarchicalBeanFactory	   	父子级联IoC 容器的接口，子容器可以通过接口方法访问父容器
			ConfigurableBeanFactory		这是一个重要的接口，增强了 IoC 容器的可定制性。
										它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法	
				
				ConfigurableListableBeanFactory
											该接口扩展了 ListableBeanFactory 、ConfigurableBeanFactory 接口
	
		
	SingletonBeanRegistry		定义了允许在运行期向容器注册单实例 Bean 的方法
	AutowireCapableBeanFactory	定义了将容器中的 Bean 按某种规则 进行自动装配的方法
	
	BeanDefinitionRegistry		Spring 配置文件中每一个 <bean> 节点元素在 Spring 容器里都通过一个BeanDefinition 对象表示，
								它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法
	
	
. 类
	DefaultSingletonBeanRegistry 	该类实现了 SingletonBeanRegistry 接口
		AbstractBeanFactory				并实现了 ConfigurableBeanFactory 接口 		
			AbstractAutowireCapableBeanFactory
											实现了 ConfigurableListableBeanFactory 、 AutowireCapableBeanFactory 接口
	
				DefaultListableBeanFactory 		该类扩展了实现了 ConfigurableListableBeanFactory 、BeanDefinitionRegistry 接口，

				

	
	
. 示例
	// 创建资源加载器
	ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
	Resource res= resolver.getResource("classpath:com/smart/beanfactory/beans.xml");
	
	// 初始化 BeanFactory
	DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
	XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory);
	
	// 装配 Bean 
	reader.loadBeanDefinitions(res);
	
	// 获取 Bean
	Car car = factory.getBean("carId", Car.class);
	
	
	
# ApplicationContext 介绍 ------------------------------------------------------------
	ApplicationContext 由 BeanFactory 派生而来，提供饿了更多面向实际应用的功能。 在 BeanFactory ,很多功能需要编程的方式实现，
	而在 ApplicationContext 中则可以通过配置的方式实现。
	
. ApplicationContext 类体系结构
	ApplicationContext 接口主要的实现类是 ClassPathXmlApplicationContext 和 FileSystemXmlApplicationContext
	分别从类路径加载配置文件 和从文件系统中装配文件
	路径参数前缀 classpath:  file: 都可以省略
	

. 接口
	ApplicationEventPublisher		让容器拥有发布应用上下文事件的功能，包括容器启动、关闭事件
	
	MessageSource					为应用提供 i18n国际化消息访问功能
	ResourceLoader
		ResourcePatternResolver		实现了类似于 PathMatchingResourcePatternResolver 的功能， 可以通过带前缀的Ant 风格的资源文件路径
									装载 Spring 的配置文件
	
	LifeCycle						该接口提供了 start() 和 stop() 两个方法， 主要用于控制异步处理过程。 达到管理和控制 JMX、 任务调度等母的
	
	BeanFactory 
		HierarchicalBeanFactory
		ListableBeanFactory
			ApplicationContext		还实现了 HierarchicalBeanFactory  ApplicationEventPublisher MessageSource 
									ResourceLoaderPatternResolver 接口
				
				ConfigurableApplicationContext		还实现了 LifeCycle 接口
					
					
. 类
	AbstractApplicationContext		该类实现了 ConfigurableApplicationContext 接口
		AbstractRefreshableApplicationContext
			AbstractRefreshableConfigApplicationContext
				AbstractXmlApplicationContext
					ClassPathXmlApplicationContext
					FileSystemXmlApplicationContext
					
		GenericApplicationContext
			AnnotationConfigApplicationContext		基于类注解的配置方式 
			GenericGroovyApplicationContext			基于 Groovy 的配置方式 
	
	. 示例
		ClassPathXmlApplicationContext 类构造函数
			ApplicationContext ClassPathXmlApplicationContext(path)
			ApplicationContext ClassPathXmlApplicationContext(path, ApplicationContext parent)			parent 为父容器
		
		ApplicationContext ctx = new ClassPathXmlApplicationContext("com/smart/beanfactory/beans.xml");
		Car car = ctx.getBean("carId", Car.class);
		
		/*
			路径参数也可以为： new String[]{"1.xml","2.xml"}
			将多个配置文件 整合一个配置文件
			
			Car car = (Car)ctx.getBean("carId");
			
		*/
		
		/*
			相比 自己创建资源加载器, 在初始化 BeanFactory 方便很多
			
			ApplicationContext 和 BeanFactory 俩个方式有一个重大的区别：
			BeanFactory 在初始化容器时，并未实例化 Bean,（ 通过 getBean() 方法获取Bean时） 直到第一次访问某个 Bean 时才实例化目标 Bean;
			ApplicationContext 在初始化引用上下文时就实例化所有单实例的 Bean。
			ApplicationContext 初始化的时间要长一些
		*/
	
# Spring 基于类注解的配置方式 
	主要功能来自Spring 的一个名为 javaConfig 的子项目。 
	一个标注@Configuration 注解的 POJO 即可提供Spring 所需的Bean 配置信息
	
	
. 示例
	@Configuration
	public class CarBeans {
		@Bean(name = "carId")
		public Car buildCar() {
			Car car = new Car();
			car.setBrand("红旗H7");
			return car;
		}
	}
	
	
	public class BeanFactory {
		@Test
		public void getBean(){
			ApplicationContext ctx = new AnnotationConfigApplicationContext(CarBeans.class);
			Car car = ctx.getBean("carId", Car.class);
		}
	}
	
	/*
		AnnotationConfigApplicationContext 将加载 Beans.class 中的 Bean 定义并调用 CarBeans.class 中的方法实例化 Bean
		启动并装配 Bean
	*/
	
	
# 基于 Groovy 的配置方式	
		
groovy-beans.groovy 文件, 需要放在 java 文件夹下
	
	package com.smart
	import com.smart.Car

	beans{
		car(Car){
			brand = "红旗 CA72"
			maxSpeed = "200"
			color = "red"
		}
	}
	
public class BeanFactory {
	@Test
	public void getBean(){
		ApplicationContext ctx = new GenericGroovyApplicationContext("classpath:com/smart/groovy-beans.groovy");
		Car car = ctx.getBean("carId", Car.class);
	}	
}
	
	
# WebApplicationContext 类体系结构 -------------------------------------------------
	WebApplicationContext 是专门为 Web 应用准备的，它允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作
	从WebApplicationContext 获得 ServletContext 的引用，整个Web 应用上下文对象将作为属性放置到 ServletContext中。
	以便 Web 应用环境可以访问 Spring 应用上下文。
	
	在非 Web 应用的环境下，Bean 只有 singleton 和 prototype 两种作用域。
	WebApplicationContext 为 Bean 添加了三个新的作用域： request、 session、 global session
	
. 接口
	ApplicationContext
		WebApplicationContext
			ConfigurableWebApplicationContext 	它允许通过配置的方式实例化 WebApplicationContext
				/*
					方法：
					setServletContext(ServletContext servletContext) 		为Spring 设置Web 应用上下文
					setConfigLocations(String[] configLocations)
						设置 Spring 配置文件地址, 一般情况下配置文件地址是相对于 Web(webapp/*) 根目录的地址
						如 /WEB-INF/**.xml.
						但用户也可以带资源类型前缀的地址，如： classpath:com/smart?**.xml
				*/
			

. 类
	AbstractRefreshableWebApplicationContext  该类现实了 ConfigurableWebApplicationContext AbstractRefreshableConfigApplicationContext 接口
		XmlWebApplicationContext
		AnnotationApplicationContext
		GroovyApplicationContext
	
	
. WebApplicationContext 和 ServletContext 之间的相互访问，
	WebApplicationContext 定义了一个常量 ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, 
	在上下文启动时，WebApplicationContext 实例即以此为键放置在 ServletContext 的属性列表中
	
	WebApplicationContext wac = (WebApplicationContext)servletContext.getAttribute(ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
	
	
	WebApplicationContext 的getServletContext()方法 返回对 ServletContext 的引用
		ServletContext getServletContext()
	
	
	可以使用Spring提供的工具类取出上下文对象： WebApplicationContext context =  WebApplicationContextUtils.getWebApplicationContext(ServletContext);
	
	
	/*
		获取 ServletContext
		ServletContext servletContext = request.getServletContext();
		ServletContext servletContext = ContextLoader.getCurrentWebApplicationContext().getServletContext();
		
		@Autowired
		private ServletContext servletContext;
	*/
	
# WebApplicationContext 初始化 -----------------------------------------------------------------
	WebApplicationContext 的初始化和 BeanFactory、ApplicationContext 有所区别，
	因为 WebApplicationContext 需要 servletContext 实例，必须在拥有Web容器的前提下才能完成启动工作，
	可以在 web.xml 中配置自启动的 Servlet 或定义 Web 容器监听器（ServletContextListener） 都可以完成启动 Spring Web 应用上下文的工作
	
	/*
		所有版本的Web 容器都可以定义自启动的servlet， 
		Web容器监听器启动方式 需要2.3以上的 Web 容器，才支持
	*/
	
. Spring 分别提供了用于启动 WebApplicationContext 的 Servlet 和 Web容器监听器, 它们都实现了启动 WebApplicationContext 实例的逻辑，
	自启动的 Servlet：	org.springframework.web.context.ContextLoaderServlet
	Web容器监听器:		org.springframework.web.context.ContextLoaderListener
	
	
. 通过Web容器监听器引导

	<!-- 指定配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			<!-- 逗号 和 空格 都可以作为多个文件的分隔符， 默认路径是 Web 的根路径，classpath:指定类文件路径， 前面的 / 可以省略-->
			classpath:com/smart/beanfactory/beans.xml /WEB-INF/*.xml
		</param-value>
	</context-param>
	<!-- 申明Web容器监听器 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>


. 通过自启动的Servlet引导， 在spring 3.0 之后版本 删除了  ContextLoaderServlet， 不推荐使用此方法启动 引导
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			WEB-INF/*.xml
		</param-value>
	</context-param>
	
	<servlet>
		<servlet-name>springContextLoaderServlet</servlet-name>
		<servlet-class>
			org.springframework.web.context.ContextLoaderServlet
		</servlet-class>
	</servlet>
	
	
	
. 使用标注 @Configuration 的Java 类提供配置信息的配置
	<!-- 指定contex参数，让Spring 使用 AnnotationConfigWebApplicationContext 而非 XmlWebApplicationContext -->
	context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>
	
	<!-- 指定标注了@Configuration 的配置类， 多个可以使用逗号或空格分隔 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>com.smart.CarBeans</param-value>
	</context-param>
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
. 使用 Groovy DSL配置Bean 信息
	
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.GroovyWebApplicationContext</param-value>
	</context-param>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:com/smart/groovy-beans.groovy</param-value>
	</context-param>
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	
	
# 父子容器
	通过 HierarchiclaBeanFactory 接口，Spring 的IoC 容器可以建立父子层级关联的容器体系， 子级可以访问父级，父级不能访问子级
	子容器可以拥有一个和父容器相同的 id Bean
	比如在 Spring MVC 中，展现层 Bean 位于一个子容器， 而业务层和持久层Bean 位于父容器，这样展现层就可以引用 而业务层和持久层。
	
	
	
	
# Bean 的生命周期 
	Bean 的自身方法：如调用 Bean 构造函数实例化 Bean、 调用 Setter 设置 Bean 的属性值及通过 <bean> 的 init-method 和 destroy-method
		/*
			init-method="myInit"	 		初始调用 Bean 类的 myInit 方法
			destroy-method="myDestory"		被销毁时 的钩子方法
		*/
	Bean 生命周期接口方法： BeanNameAware BeanFactory InitializingBean DisposableBean 
		/*
			
			Bean 类可以实现的接口
					
				BeanNameAware
					void setBeanName(String beanName)
					
				BeanFactoryAware
					void setBeanFactory(BeanFactory beanFactory) throws BeansException
					
				InitializingBean
					 void afterPropertiesSet() throws Exception
				
				DisposableBean
					void destroy() throws Exception
		*/		
	
	
	
	容器级生命级周期接口方法：由 InitialiationAwareBeanPostProcessor 和 BeanPostProcessor 两个接口实现的
		InitialiationAwareBeanPostProcessor 接口定义的方法
		该接口通过类 InitialiationAwareBeanPostProcessorAdapter 的扩展来实现的
	
		public class Test extends InitialiationAwareBeanPostProcessorAdapter{
			// 接口方法： 在实例化Bean 前调用
			public Object postProcessorBeforeInstantiation(Class beanClass, String beanName){
				// ...
				return null;
			}
		
			// 接口方法： 在实例化Bean 后调用
			public boolean postProcessorAfterInstantiation(Object bean, String beanName) throws BeansException{
				// 仅对容器中的 bean 进行处理
				
				if(beanName.equals("car")){
					Car car = (Car)bean;
					car.serColor("黑色");
				}
				
				return true;
			}
		
			// 接口方法： 在设置某个属性时调用
			public PropertyValues postProcessorPropertyValues(PropertyValues pvs,PropertyDescriptor[] pds, Object bean, String beanName)
			throws BeansException{
				// ...
				return PropertyValues;
			}
		}
		public class Test implements BeanPostProcessor{
			// ...
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	