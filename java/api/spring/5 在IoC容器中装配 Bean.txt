# 基于 XML 的配置
	<?xml version="1.0" encoding="UTF-8" ?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

		<bean id="carId" class="com.smart.Car" p:brand="红旗CA72" p:maxSpeed="200" p:color="黑色" /> 
		
	</beans>
	
	
	xmlns="http://www.springframework.org/schema/beans"			默认命名空间
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"		
		:xsi 标准命名空间，用于指定自定义命名空间的Schema 文件
	
	xmlns:aop="http://www.springframework.org/schema/aop"
		:aop 是自定义命名空间的简称
		http://www.springframework.org/schema/aop	命名空间的全称，必须在xsi 命名空间为其指定空间对应的 Schema 文件
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	">
		为每个命名空间指定具体的Schema 文件
		
. Spring 4.0 的Schema 文件
	
	spring-beans-4.0.xsd		用于配置Bean
	spring-aop-4.0.xsd			AOP 的配置定于 Schema
	spring-tx-4.0.xsd			申明式事务配置定义的 Schema
	spring-mvc-4.0.xsd			MVC 配置的 Schema
	spring-util-4.0.xsd			为简化某些复杂的标准配置提供的 Schema
	spring-jee-4.0.xsd			为简化 Java EE 中 EJB JNDI 等功能的配置而提供的 Schema
	spring-jdbc-4.0.xsd			配置内嵌数据库
	spring-jms-4.0.xsd			JMS配置的 Schema
	spring-lang-4.0.xsd	
	spring-oxm-4.0.xsd			配置对象 XML 映射的Schema
	spring-task-4.0.xsd			任务调度的 Schema
	spring-tool-4.0.xsd

	
# 属性注入配置
	属性注入要求 Bean 提供一个默认的构造函数， 并为属性提供对应的Setter 方法。
	public class Car{
		private int maxSpeed;
		public void setMaxSpeed(int maxSpeed){
			this.maxSpeed = maxSpeed;
		}
	}
	<bean id="carid" class="com.smart.Car">
		<property name="maxSpeed"> <value>200</value>
	</bean>
	
	
. 构造函数注入
	
	public class Car{
		...
		public Car(String brand, double price){
			
		}
	}
	<bean id="carid" class="com.smart.Car">
		<constructor-arg type="java.lang.String"> <value>红旗H7</value> </constructor-arg>
		<constructor-arg type="double"> <value>20000</value> </constructor-arg>
		<!-- 如果构造函数参数 类型相同，需要添加索引值 -->
		/*
			<constructor-arg index="0" type="java.lang.String" value="红旗H7"/>
			<constructor-arg index="1" type="double" value="20000"/>
		*/
	</bean>
	
	
. 通过自身类型反射匹配入参
	public Boss(String name, Car car, Office office){
		this.name = name;
		this.car = car;
		this.office = office;
	}
	
	
	
	<bean id="boss" class="com.smart.Boss">
		<constructor-arg> <value>John</value> </constructor-arg>
		<constructor-arg> <ref bean="carid"></constructor-arg>
		<constructor-arg> <ref bean="officeid"></constructor-arg>
	</bean>
	<bean id="carid" class="com.smart.Car"/>
	<bean id="officeid" class="com.smart.Office"/>
	
	/*
		当启动 Spring IoC 容器时， 因为存在循环依赖的问题，Spring 将无法启动
	*/
	
. 工厂方法注入

	非静态工厂方法
		 public class CarFactory{
			public Car createHongQicar(){
				Car car = new Car();
				car.setBrand("奇瑞");
				return car
			}
		 }
		<bean id="carFactoryid" class="com.smart.CarFactory"/>
		<bean id="carid" factory-bean="carFactoryid" factory-method="createHongQicar" />
	
	
	静态工厂方法
		public class CarFactory{
			public static Car createHongQicar(){
				Car car = new Car();
				car.setBrand("奇瑞");
				return car
			}
		}
		<bean id="carid" class="carFactoryid" factory-method="createHongQicar" />
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	