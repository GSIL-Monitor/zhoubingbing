
# @AspectJ
. 通过编程方式使用 @Aspect
	@Aspect
	public class PreGreetingAspect {
		@Before("execution(* greetTo(..))")
		public void beforeGreeting(){
			System.out.println("bbb");
		}
	}
	
	
	public class TestDome {
		@Test
		public void befor(){
			Waiter target = new NaiveWaiter();
			AspectJProxyFactory factory = new AspectJProxyFactory();
			// 设置目标对象
			factory.setTarget(target);
			
			// 添加到切面类
			factory.addAspect(PreGreetingAspect.class);
			
			// 生成织入前面的代理对象
			Waiter proxy = factory.getProxy();
			proxy.greetTo();
		}
	}
	
. 通过配置使用 @AspectJ 切面	
	<!-- 这里可以使用 <import resource="classpath: " /> -->
	<bean id="waiter" class="com.smart.NaiveWaiter" />
	<bean class="com.smart.PreGreetingAspect" />
	<bean
		class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
	
	
	@Test
	public void befor(){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("com/smart/beanfactory/beans.xml");
		Waiter waiter = (Waiter)ctx.getBean("waiter");
		waiter.greetTo();
	}
	
	
. 使用基于Schema 的aop 命名空间进行配置

	xmlns:aop="http://www.springframework.org/schema/aop"
	
	xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	
	
	<aop:aspectj-autoproxy />
	<bean id="waiter" class="com.smart.NaiveWaiter" />
	<bean class="com.smart.PreGreetingAspect" />
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	