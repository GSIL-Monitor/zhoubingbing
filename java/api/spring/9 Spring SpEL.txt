
# 脚本实现动态函数
	public class TestDome {
		public static void main(String[] agrs) throws Exception{
			// 创建脚本引擎管理器
			ScriptEngineManager manager = new ScriptEngineManager();
			ScriptEngine engine = manager.getEngineByName("JavaScript");
			
			// 创建 JavaScript 函数
			String scriptText = "function sum(a,b){ return a+b}; function sums(a,b){return a-b} ";
			engine.eval(scriptText);
			
			Invocable invocable = (Invocable) engine;
			Object sum = invocable.invokeFunction("sum", 100, 88);
			Object sum2 = invocable.invokeFunction("sums", 100, 88);
			System.out.println(sum);
			System.out.println(sum2);
			
		}
	}
	
# SpEL 表达式概述
	SpEL 作为Spring 家族中表达式求值得基础，它不直接依赖于Spring 框架，可独立使用。
	String 框架已经提供了许多直接使用 SpEL 表达式的方法，并且在框架层面屏蔽了表达式的运行设施创建过程，直接使用即可
	例如在 Bean 的配置中可以直接通过 "#{}" 编写 SpEL 表达式，
		
	需要在pom.xml 文件中添加依赖
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-expression</artifactId>
		<version>${spring.version}</version>
		<scope>test</scope>
	</dependency>
	
# SpEL 核心接口
	SpEL 的所有类与接口都定义在 org.springframework.expression 包及其子包，以及spel.support 中
	
	ExpressionParser 接口用来解析表达式字符串，表达式字符串是一个用单引号标注或用转义的双引号标注的字符串
	Expression 接口用来计算表达式字符串的值
	
	调用 ExpressionParser#parseExpression()、Expression#getValue()  方法 可能抛出解析异常ParseException 和求值异常 EvaluationException 
	
	
. 添加求值上下文
	public class User {
		public String username;
		public void setUsername(String username){
			this.username = username;
		}
	}

	
	@Test
	public void script(){
		User user = new User();
		user.setUsername("zhoubb");
		
		ExpressionParser parser = new SpelExpressionParser();
		Expression exp = parser.parseExpression("username");
		
		// 创建求值上下文
		EvaluationContext context = new StandardEvaluationContext(user);
		String message = (String)exp.getValue(context);
	}
	
	
# EvaluationContext 接口
	该接口提供了属性、方法、字段解析器及类型转换器。
	默认实现类 StandardEvaluationContext 的内部使用反射机制类操作对象。 为了提高性能，在其内部会对以获取的Method、Field 和 Constructor 实例进行缓存
	
	StandardEvaluationContext 类可以通过构造函数传递 求值根对象 或通过 setRootObject() 方法设置根对象
		setVariable() 方法设置相关变量
		registerFunction() 方法注册自定义函数
	
	// 自动将 "false" 转换为布尔类型
	parser.parseExpression("booleanList[0]").setvalue(context, "false");
	
	
# SpEL 编译器
	
	在默认情况下，SpEL 表达式在每次求值时才进行表达式的计算，每次取值都需要动态解析表达式，

	SpelCompiler 编译器就是为了解决这个问题而诞生的，   它可以将表达式直接编译成字节码，从而避免每次调用时进行语法解析所产生的时间消耗， 有效提高执行效率。
	由于已经将表达式编译成字节码，如果后续运行时表达式发生变化，则必须重新编译。
	因此 SpelCompiler 适用于表达式不经常发生变动且重复调用频繁较高的场景
	
	
. 示例：
	public class TestDome {
		@Test
		public void script(){
			// 创建解析配置
			SpelParserConfiguration configuration = new SpelParserConfiguration(
				SpelCompilerMode.IMMEDIATE,
				TestDome.class.getClassLoader());
				
			// 创建解析器
			ExpressionParser parser = new SpelExpressionParser(configuration);
			
			// 创建取值上下文
			User user = new User();
			user.setUsername("zhoubb");
			EvaluationContext context = new StandardEvaluationContext(user);	

			// 表达式
			String expression ="isVip('tom') && isVip('jony')";
			
			// 解析表达式
			SpelExpression spelExpression = parser.parseRaw(expression);
			
			// 通过表达式求值
			System.out.println(spelExpression.getValue(context));
			
		}
		
	}
	
	SpelCompilerMode 该枚举公有 3 个值，分别是 SpelCompilerMode.OFF SpelCompilerMode.MIXED SpelCompilerMode.IMMEDIATE
	
	编译器默认采用 SpelCompilerMode.OFF，表示不启用编译， 想要全局开启，则可以通过配置类路径下的 spring.properties 配置文件配置
	SpelParserConfiguration 在类加载时读取 spring.expression.compiler.mode 属性进行配置
	
	
	SpelCompilerMode.MIXED	前面几次执行表达式取值采用解释型处理， 
							直到达到 SpEL 的一个阈值（100）之后才启用编译处理，也就是对表达式进行编译
	
	SpelCompilerMode.IMMEDIATE 表示立即启用编译， 实际上只是在第二次执行表达式取值时才会启用
	
	
	
# SpEL 基础表达式
	
. 文本字符解析
	文本表达式支持 字符串、 日期、 数字（正数 实数 十六进制数）、布尔类型及 null
	
	字符串需要使用 单引号 ‘ 或者 反斜杠+双引号 \" 包裹起来， 
	特殊字符 ' 需要转义插入， \'
	
	ExpressionParser parser = new SpelExpressionParser();
	String str = (String)parser.parseExpression("hello world").getValue();
	
	
. 对象属性解析
	
	// 创建解析器
	ExpressionParser parser = new SpelExpressionParser();
	
	// 创建取值上下文
	User user = new User();
	user.setUsername("zhangsan");
	EvaluationContext context = new StandardEvaluationContext(user);	
	
	String message = (String)parser.parseExpression("username").getValue(context);
	
. 数组、集合类型解析
	目前不支持多维数组初始化, "new int[][]" 是可以得
	
	// 初始化
	int[] array = (int[])parser.parseExpression("new int[]{1,2,3}").getValue();
	
	// 不能初始化
	int[][] array = (int[][])parser.parseExpression("new int[2][3]").getValue();
	
	Map map = (Map)parser.parseExpression("{name:'zhou',age:23}").getValue();
	
	//从数组 List Map 中取值
		String str = (String)parser.parseExpression("pronameArray[0]").getValue(context);
		String str = (String)parser.parseExpression("pronameMap['keyname']").getValue(context);
	
. 方法解析
	// 不能调用对象的私有方法
	String substring = parser.parseExpression("'spring SpEL'.substring(7)").getValue(String.class);
	
	Integer index = parser.parseExpression("'spring SpEL'.indexOf('SpEL')").getValue(Integer.class);
	
	// 调用对象方法
	Boolean b = parser.parseExpression("methodname('agr1', 'agr2')").getValue(context, Boolean.class);
	
	
. 操作符解析
	// 关系操作符
	parser.parseExpression("2 == 2").getValue(Boolean.class)
	
	// 字符串关系比较
	parser.parseExpression("'a' > 'b'").getValue(Boolean.class)
	
	
	// instanceof 运算符
	parser.parseExpression("'xyz' instanceof T(String)").getValue(Boolean.class)
		T(String) T(int) T(Integer)
	
	
	// 正则匹配运算，前面为字符串， 后面为正则表达式
	parser.parseExpression("'5.00' matches '-?\\d(\\.\\d{2})?$'").getValue(Boolean.class)
	
	
	// 逻辑操作符支持 && || ！
	
	
. 安全导航操作符
	parser.parseExpression("PlaceOfBirth?.city").getValue(context,String.class)

. 三元操作符
	parser.parseExpression("userName == 'tom'? Credits+20: Credits").getValue(context,Integer.class)
	
	如果用户名时 是 tom, 添加用户10积分，否则返回当前积分Credits
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	