
# I/O 的基础知识
	输入：外部数据向 CPU 输入
	输出：CPU 将数据输出到我们可见的地方，例如文件屏幕等。（读取数据）
	
	Java 程序通过执行 I/O。 流是一种抽象，要么产生信息，要么使用信息。流通过 Java 的I/O 系统链接到物理设备，
	所有流的行为方式都是相同的，不论他们链接的物理设备是否相同。 （磁盘文件、键盘或网络socket 都可抽象为输入流）
	
# 字节流和 字符流
	当读取和写入二进制数据时，使用的就是字节流。
	字符流为处理字符的输入和输出提供了方便的方法。（不过在底层实现中都是 面向字节的， 基于字符的流只是为处理字符提供
	了一种方便和高校的方法）
	
#字节流类
	字节流是通过俩个类层次定义的， 在顶级是两个抽象类： InputStream 和 OutputStream
	为了使用类流，必须导入 java.io
	
	InputStream 和 OutputStream 抽象类定义了其它流类的一些关键方法， 其中最重要的两个方法是 read() 和 write(),
	分别读取和写入字节数据
	
	InputStream					描述输入流的抽象类
	OutputStream				描述输出流的抽象类
	
	BufferedInputStream			缓冲的输入流
	BufferedOutputStream		缓冲的输出流
	
	ByteArrayInputStream		读取字节数组内容的输入流
	ByteArrayOutputStream		向字节数组写入内容的输入流
	
	DataInputStream				包含读取 Java 标准数据类型的方法的输入流
	DataOutputStream			包含写入 ...
	
	FileInputStream				读取文件内容的输入流
	FileOutputStream			向文件中写入内容的输出流
	
	FilterInputStream			实现 InputStream
	FilterOutputStream			实现 OutputStream

	ObjectInputStream			用于对象的输入流
	ObjectOutputStream			用于对象的输出流

	PipedInputStream			输入管道
	PipedOutputStream			输出管道
	
	PrintStream					包含 print() 和 println() 输出流
	
	PushbackInputStream			支持1 字节“取消获取” 输入流， 这种流向输入流返回 1 个字节
	SequenceInputStream			由俩个多个顺序依次读取的输入流组合而成的输入流


# 字符流类
	字符流类是通过两个类层次定义的。在顶层是两个抽象类：Reader 和Writer。 这俩个类处理 Unicode 字符流。
	使用类流，必须导入 java.io
	Reader 和Writer 抽象类定义了一些关键方法， 其中最重要的两个方法是 read() 和 write(),
	
	/*
		Reader: 从外部设备读取数据，写入到 CPU
		Writer: 从CPU 输出到 外部设备
	*/
	
	Reader						描述字符流输入的抽象类
	Writer						描述字符流输出的抽象类
	
	BufferedReader				缓冲的输入字符流
	BufferedWriter				缓冲的输出字符流

	CharArrayReader				从字符数组读取内容的输入流
	CharArrayWriter				从字符数组读取内容的输出流

	FileReader					从文件读取内容的输入流
	FileWriter					向文件中写入内容的输出流

	InputStreamReader			将字节转换成字符的输入流
	OutputStreamReader			将字节转换成字符的输出流
	
	LineNumberReader			计算行数的输入流
	
	PipedReader					输入管道
	PipedWriter					输出管道
	
	PrintWriter					包含 print() 和 println() 输出流
	PushbackReader				允许字符返回到输入流的输入流
	
	StringReader				从字符串读取内容的输入流
	StringWriter				向字符串读取内容的输出流


# 读取控制台输入
	在控制台输入信息
	在Java 中，控制台输入是通过从 System.in 读取完成的。
	为了获得与控制台关联的基于字符的流， 可以在 BufferedReader 对象中封装 System.in。  BufferedReader 支持 缓冲的输入流。
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
		
	BufferedReader 的构造函数：
	BufferedReader(Reader inputReader)

	把自己流转换成字符流 需要用到 InputStreamReader 的转换，InputStreamReader的构造函数
	InputStreamReader(InputStream inputStream)

# 读取字符 
	int read() throws IOException
	
	public class Test {
		public static void main(String[] args) throws IOException {
			// System.out.println();
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			char c;
			do{
				c = (char) br.read();
				System.out.println(c);
			}while(c != 'q');
			
		}
	}

	/*
		缓冲类在循环语句中等待执行, br.read(); 每次 Enter 后执行一次
		
		当在控制台输入 信息，回车之后 就会在控制台打印信息
		如果没有 q, 则程序不会退出运行 可以继续在控制台输入信息;
		
		在这个输出中， 看起来可能和你所期望的不同，因为默认情况下System.in 是按行缓冲的， 这意味着在按下 Enter 键之前，实际上没有输入被传递到程序。 这使得 read() 方法对于交互性的控制台输入不是很有价值
	*/

	123abq
	1
	2
	3
	a
	b
	q

# 读取字符串 
	String readLine() throws IOException
	
	public class Test {
		public static void main(String[] args) throws IOException {
			// System.out.println();
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			String str;
			do {
				str = br.readLine();
				// System.out.println(str);
			} while (!str.equals("stop"));
		}
	}
	
	/*
		readLine() 方法显示文本行
		缓冲类在循环语句中等待执行, br.readLine(); 每次 Enter 后执行一次
		
		在该示例中直到输入 stop， 退出运行
		
	*/


	示例2

	public class Test {
		public static void main(String[] args) throws IOException {
			// System.out.println();
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			String str[] = new String[100];
			for (int i = 0; i < 100; i++) {
				str[i] = br.readLine();
				if (str[i].equals("stop"))
					break;
			}
			for (int i = 0; i < 100; i++) {
				if (str[i].equals("stop"))
					break;
				System.out.println(str[i]);
			}
		}
	}

	/*
		多行输入， 最多100行 或 stop 退出运行
		缓冲类在循环语句中等待执行, br.readLine(); 每次 Enter 后执行一次
	*/
	
# 向控制台写输出
	void write(int byteval)
	
	public class Test {
		public static void main(String[] args) {
			int b;
			b = 'A';
			System.out.write(b);
			System.out.write('\n');
		}
	}
	
	/*
		除了 print()  println()方法， System.out 还实现了 OutputStream 抽象类的 write() 方法
		只能输入单个字符
	*/

# PrintWriter 类
	尽管使用 System.out 向控制台输出是可以接受的， 但是最好将其用于调试或用于示例程序。
	对于实际的程序，推荐使用 PrintWriter 流，它是基于字符的类之一。为控制台输出使用基于字符的流，可以使程序国际化更容易
	
	PrintWriter 类定义了几个构造函数， 
	PrintWriter(OutputStream outputStream, boolean flushingOn)
	flushingOn  是否在调用println() 方法时自动刷新输出流

	public static void main(String[] args) {
		PrintWriter pw = new PrintWriter(System.out, true);
		pw.println("1");
		pw.println("2");
	}
	/*
		如果参数 flushingOn 为false
		则需要手动调用 pw.close() 才会打印
	*/

# 读写文件
	对于读/写文件， 俩个最常用的流类是 FileInputStream 和 FileOutputStream , 这俩个类创建于文件链接的字节流
	这俩个类 支持多个构造函数， 一般形式如下：
	
	FileInputStream(String fileName) throws FileNotFoundException
	FileOutputStream(String fileName) throws FileNotFoundException
	
	/*
		fileName  文件名
		FileNotFoundException 为 IOException 的子类
		如果打开文件存在安全违规 则会抛出 SecurityException 异常
		
		文件使用完毕后必须关闭。 关闭文件是通过 close() 方法完成的。
		关闭文件失败会导致“内存泄漏”， 因为未使用的资源没有被释放
		
		void close() throws IOException
	*/
	
	示例：
	public static void main(String[] args) throws IOException {
		int i;
		FileInputStream fin = null;
		FileOutputStream fout = null；
		
		if(agrs.length !=2){
			return;
		}
		
		try{
			fin = new FileInputStream(args[0]);
			fout = new FileOutputStream(args[1]);
			
			do{
				i = fin.read();
				if(i != -1) fout.write(i);
			}while(i != -1)
			
		}catch(IOException e){
			try{
				if(fin != null) fin.close();
			}catch(IOException e2){}
			
			try{
				if(fout != null) fout.close();
			}catch(IOException e3){}
			
		}
		
	}

# 自动关闭文件
	只有对于那些实现了 AutoCloseable 接口的资源，才能使用带资源的try 语句。
	AutoCloseable 接口由 java.lang 包定义，该接口定义了 close() 方法。
	java.io 包中的Closeable 接口继承自  AutoCloseable 接口


	public static void main(String[] args){
		int i;
		if(agrs.length != 1){
			return;
		}
		
		try(FileInputStream fin = new FileInputStream(args[0])){
			do{
				i = fin.read();
			}while(i != -1)
		}
		catch(FileNotFoundException e){}
		catch(IOException e3){}
		
	}
	/*
		如果需要在try 创建多个资源变量时，只需要 用分号隔开
		资源变量被隐式的申明为 final
		
	*/





























