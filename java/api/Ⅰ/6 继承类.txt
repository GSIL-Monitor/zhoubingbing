
#super 的用法
	super(); 是初始化近超类的构造函数，参数和超类的构造函数一致
	super(); 必须在子类的构造函数第一执行；
	如果超类的构造函数没有参数可以不执行 super();
	默认调用 超类的 无参数的构造函数。 如果超类的构造函数中有参数， 那么必须显示的调用 super(agrs);
	在子类非static 成员中， 都可以使用super。 
	最常用的是子类中 定义了和父类相同的属性（隐藏了父类的属性），即可通过super.pro 访问父类的属性
	
	超类的应用变量可以是其子类的 type
	
# 方法的重写
	如果子类中的成员名称 和超类相同， 如果是方法成员参数类型签名也需要一致，否则他们只是重载关系
	
	// 重载关系 m 方法的参数 签名不一致
	class A(){
		void m(){}
	}
	
	class B extends A{
		void m(int a){}
	}
	
# 在继承中使用final 关键字
	不允许被子类重写
	class A{
		final void m(){}
	}
	
# 使用 final 关键字阻止继承, 即该类不能被继承
	
	final class A{
	}
	
# 抽象类
	普通类是一个完善的功能类，可以直接产生实例化对象，并且在普通类中可以包含有构造方法、普通方法、static方法、常量和变量等内容。
	而抽象类是指在普通类的结构里面增加抽象方法的组成部分。


	在class 关键字的前面使用 关键字 abstract。 抽象类不存在对象，不能使用 new 运算符直接实例化抽象类。
	抽象方法必须为public或者protected,  不能申明抽象的 static 静态方法。
	
	抽象类的所有子类， 要么实现超类中的所有抽象方法， 要么自己也申明为抽象的。
	申明以知抽象内容的结构，而不提供每个方法的完整实现。
	
	抽象类中的 final 方法必须被初始化， 且不能被子类重写
	
	public abstract class A {
		
		// 可以申明构造函数
		A(){}
		
		// m 方法必须被子类重写
		public abstract void m();
		protected abstract return-type m(type agr);
		
		// final 方法
		public final void a(){
			
		}
	}
	
	

	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	