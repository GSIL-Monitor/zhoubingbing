
# 包
	package pkg1;
	第一处申明
	用于保持类的命名空间相互隔离。不同包中的同名类不用冲突
	
	引入包
		import pkg1[.pkg2].classname|*;

		import java.util.Date;
		import java.io.*;
	
# 接口
	public interface Name{ }
	使用关键字 interface
	顶级接口 要么使用public ，要么使用默认访问级别
	
	接口不能有实例变量
	接口与类之间决定性的区别是类可以维护状态信息，而接口不可以
	接口不能创建本身的实例。接口必须被类实现。
	
	jdk 1.8
	可以通过关键字 default 定义默认方法体， 
	default void m(){ 
		// do something...
	}
	
# 定义接口
	public static final type pro = type-value;
	public abstract return-type method-name();
	
	属性的 变量申明 可以为 public | static & final,  必须初始化值，  默认为 public static & final。 其值不可被修改 
	抽象方法的 变量申明 可以为 public & abstract,  默认为 public abstract
	
	interface Classname{
		public static final int a = 100;
		public abstract void m();
	}
	/*
		访问控制 可以被省略
		interface Classname{
			int a = 100;
			void m();
		}
	*/
	
# 实现接口
	时间接口的成员必须 用public 声明
	interface A{
		void m();
	}
	
	class B implements A{
		// 必须 用public 声明
		public void m(){}
	}
	
	
# 通过接口引用访问
	因为与Java中的常规方法调用相比较，在运行时动态查询方法会造成严重的负担，所以在性能要求苛刻的代码中，应当谨慎小心，而不要随意使用接口
	interface A{
		void m();
	}
	
	class B implements A{
		public void m(){}
		public void om(){}
	}
	
	class C{
		public static void main(String[] args) {
			// 变量申明类型为接口 A， 而没有不是类的对象引用。 此时 a 只能访问 接口中 定义的 m 方法。
			A a = new b();
			a.m();
		}
	}
	
	如果实现了一个接口， 但是没有实现接口定义的全部方法，那么必须将类申明为 abstract.
	
	interface A{
		void m();
	}
	abstract class B implements A{
		int a,b;
		void show(){}
	}
	
	
# 嵌套接口
		嵌套接口可以被申明为 public private protected
	class A{
		// 嵌套接口
		public interface It{
			public boolean m(int x);
		}
	}
	
	class B implements A.It{
		public boolean m(int x){
			return x>10;
		}
	}
		
	public class C {
		public static void main(String[] args) {
			B.AA a = new A();
			System.out.println(a.isnot(10));
		}
	}
	
# 接口的默认方法
	默认方法的申明前面带有关键字 default, 默认方法不需要被要被重写
	可以声明 static， 可以独立通过接口名条用静态方法
	public interface A {
		void m();
		default void c(){
			// do something...
		};
	}
	
# 接口扩展
	接口可以通过关键字 extends 继承另一个接口， 语法和继承相同
	如果方法完全相同，被继承的接口方法 被隐藏
	不同接口相同方法 可以重载方法，包括 default 方法。 实现类也必须实现这些重载方法
	
	public interface A {
		void m();
		void c();
	}
	public interface B extends A {
		// 重载方法 参数要有所区别
		int m(int x);
	}
	public class C implements A {
		public void m() {
		};
		public void c() {
		};
		public int m(int x){
			return (int)10;
		};
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	