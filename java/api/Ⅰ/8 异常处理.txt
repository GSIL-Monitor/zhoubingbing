
# 异常处理
	Java 异常处理可以由5个关键字进行管理： tyr catch throw throws finally
	tyr catch	在try 代码块中封装发生异常的程序语句，对这些语句进行监视
	throw		手动抛出异常
	throws		从方法抛出的任何异常都必须通过一条 throws 字句进行指定
	finally		不管try 代码块中是否抛出异常， 都会执行 finally 语句
	
	try{
		// do s...
	}catch(ExceptionType1 e){
	
	}catch(ExceptionType2 e){
	
	}finally{}

# 异常类型
	Throwable 是所有异常类的顶级超类，
	Throwable 紧随的俩个子类是 Exception 和 Error, Exception 有一个重要的子类 RuntimeException
	Throwable > Exception > RuntimeException	这种类型的异常时自动定义的， 包括零和无效整数索引这类情况
	Throwable >	Error
	
	
# 多条 catch 子句
	try{
		// do s...
	}catch(ExceptionType1 e){
	
	}catch(ExceptionType2 e){
	
	}
	
# 嵌套 try

# throw 
	手动抛出异常
	ThrowableInstnce 必须是 Throwable 或其子类类型的对象。 
	基本类型（如 int 或 char）以及非 Throwable 类（如 String 和Object）都不能用作异常。

	try{
		try throw new NullPointerException("demo");
	}catch(NullPointerException e){}


# throws 
	class ThrowsDemo{
		static void throwOne() throws IllegalAccessException{
			System.out.println("Inside throwOne");
			throw new IllegalAccessException("demo");
		}
		public static void main(String[] args) {
			try{
				throwOne();
			}catch(IllegalAccessException e){
				System.out.println(e);
			}
		}
	}

	
# Java的内置异常
	ArithmeticException					0被除 			
	ArrayIndexOutOfBoundsException		数组索引越界
	ArrayStoreException					使用不兼容的类型为数组元素赋值
	ClassCastException					无效转换
	EnumConstantNotPresentException		视图使用未定义的枚举值
	IllegalArgumentException			使用非法参数调用方法
	IllegalMonitorStateException		非法的监视操作，例如等待未锁定的线程
	IllegalStateException				环境或应用程序处于不正确的状态
	IllegalThreadStateException			请求的操作与当前线程状态不兼容
	IndexOutOfBoundsException			某些类型的索引越界
	NegativeArraySizeException			使用负数长度创建数组
	NullPointerException				非法使用空引用
	NumberFormatException				字符串到数值格式的无效转换
	SecurityException					试图违反安全性
	StringIndexOutOfBounds				试图在字符串边界之外进行索引
	TypeNotPresentException				类型未找到
	UnsupportedOperationException		遇到不支持的操作
	ClassNotFoundException				类未找到
	CloneNotSupportedException			试图复制没有实现 Cloneable 接口的对象
	
	IllegalAccessException				对类的访问被拒绝
	InstantiationException				试图为接口或抽象类创建对象
	interruptedException				一个线程被另一个线程中断
	NoSuchFieldExcetion					请求的域变量不存在
	NoSuchMethodException				请求的方法不存在
	ReflectiveOperationException		与反射相关的异常的超类

# Throwable 的方法
	Throwable initCause(Throwable causeExc)			将 causeExc 与调用异常关联到一起， 作为调用异常的原因。返回对异常的引用
	Throwable getCause()							放回引起当前异常的异常。如果不存在 就返回null
	
# 链式异常
	Throwable(Throwable causeExc)
	Throwable(String msg,Throwable causeExc)

	class A{
		static void demoproc(){
			NullPointerException e = new NullPointerException("TOP LAYER");
			
			// add a cause
			e.initCause(new ArithmeticException("cause"))
			
			throw e;
		}
	}
	
	
	try{
		demoproc
	}catch(NullPointerException e){
		System.out.println(e);
		System.out.println(e.getCause);
	}
	



















































































