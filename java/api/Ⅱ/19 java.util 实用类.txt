
# StringTokenizer 类
	该类实现了 Eunmeration 接口，
	将字符串风格成一系列独立的部分， 与 js split 的效果相似
	
	默认的定界符组成空白字符构成： 空格、制表符号、换页符、换行符、回车符
	
	构造函数：
	StringTokenizer(String str)
	StringTokenizer(String str, String delimiters)
	StringTokenizer(String str, String delimiters, boolean delimAsToken)
	
	delimiters 为指定定界符
	delimAsToken 是否将定界符作为标记返回， 默认 false
	
	方法：
		int countTokens()	该方法使用当前的一组分隔符，确定还有多少标记需要解析并返回结果
		boolean hasMoreElements()
		boolean hasMoreTokens()
		Object nextElement()
		String nextToken()
		String nextToken(String delimiters)	作为 String 对象返回下一个标记，并将定界符字符串设置为由 delimiters 指定的字符串


# BitSet 类
	默认情况下，BitSet 所有空位的位置都是 false， 填充位的位置 true。
	该类 创建特殊类型的数组，这类数组的元素是布尔值形式的位置。这类数组可以根据需要再加大小，这使得 BitSet 与位向量类似
	
	/*
		填充位 - 置位
		
		BitSet allBitSet = new BitSet();
		allBitSet.set(0);
		allBitSet.set(3);
	*/
	
	构造函数：
		BitSet()
		BitSet(int size)
		
	方法：
		void and(BitSet b)			对俩个 BitSet 进行AND 操作，结果结果将被放入调用对象中
									取俩个对象的交集填充位；
		
		void andNot(BitSet b)		对于 b 中值为 true 每个位， 将 调用 BitSet 对象中相应的位清除
		void or(BitSet b)			对俩个 BitSet 进行 or 操作； 并集
		void xor(BitSet b)			对俩个 BitSet 进行 xor 操作； 俩个对象中 位同时为 true 的位清楚， 合并其它位
		
		int cardinality()		返回已知 置位的数量
		void clear()			清空所有的置位
		void clear(int index)	清空指定的位
		void clear(int start, int end)	start 至 ( end-1)
		Object clone()			复制调用 BitSet 对象
		
		boolean equals(Object bitSet)		比较俩个对象的位组是否相等
		void flip(int index)				翻转 位的 状态，true <-> false
		void flip(int start, int end)		start 至 ( end-1), 翻转
		
		boolean get(int index)
		
		BitSet get(int index, int end)		end-1
		int hasCode()
		boolean intersects(BitSet b)		判断它们的交集是有交集，
		
		boolean isEmpty()
		int length()
		int nextClearBit(int start)			返回下一个 被清除位, 值为 false 的位
		int nextSetBit(int start)			返回下一个 被置位的值, 值为 true 的位， 没有返回 -1
		
		int previousClearBit(int start)		没有返回 -1
		int previousSetBit(int start)		没有返回 -1
		
		void set(int index)
		void set(int start, int end)		end-1
		void set(int start, int end, boolean v)		如果 v 为true 就置位， 否则就清除位
		
		int size()
		IntStream stream()					返回一个流， 其中由低到高包含已被置位的 位
		
		
		byte[] toByteArray()
		byte[] toLongArray()
		String toString()
		
		static BitSet valueOf(byte[] v)
		static BitSet valueOf(long[] v)
		static BitSet valueOf(ByteBuffer[] v)
		static BitSet valueOf(LongBuffer[] v)
		
# Optional
	Class Optional<T>
	T 指定了存储的值类型。 Optional 实例即可以包含类型为T 的值，也可以为空。
	Optional 没有任何构造函数
	
	可以使用它的方法来确定是否存在值； 如果存在，获取该值，如果没有值，获取一个默认值
		
	方法：
		static <T> Optional<T> empty()				返回一个对象，对该对象调用 isPresent() 会返回 false
		static <T> Optional<T> of(T val)			创建一个包含val 的 Optional 实例，并返回结果。 val 的值不能是 null
		static <T> Optional<T> ofNullable(T val)	创建一个包含 val 的 Optional 实例，并返回结果。如果 val 是null，返回一个空的 Optional 实例
		
		void ifPresent( Consumer<? super T> func ) 	如果调用对象中存在值，调用func; 没有值， 什么都不发生
		boolean isPresent()							判断调用对象是否有值
		
		Optional<T> filter(
			Predicate<? super T> condition
		)									如果调用对象的值满足 condition， 返回一个包含与调用对象相同的值的 Optional 实例；否则，返回一个空对象
		
		boolean equals(Object optional)		判断 optional 是否与调用对象相等
		U Optional<U> flatMap(
			Function<? super T, Optional<U>> mapFunc
		)									如果调用对象包含值， 对调用对象应用 mapFunc指定的映射函数， 并返回结果；否则 返回一个空对象
			/*
				Optional<Integer> n = op1.flatMap( (a) -> {
					System.out.println(a);
					return op2;
				});
			*/
		
		U Optional<U> map(
			Function<? super T, ? extends U> mapFunc
		)									如果调用对象包含值， 对调用对象应用由 mapFunc 指定的映射函数，并返回结果； 否则返回一个空对象
		
		
		T get()					返回调用对象的值。 如果没有值，将抛出NoSuchElementExcetion
		
		T orElse(T defVal)		如果调用对象包含值，返回该值。否则返回 defVal；	
		T orElseGet(
			Supplier<? extends T> getFunc
		)						如果调用对象包含值，返回该值。否则返回 getFunc 获取的值	
		<X extends Throwable> T orElseThrow(
			Supplier<? extends T> excFunc
		) throws X extends Throwable	如果调用对象包含值，返回该值。否则 就抛出 excFunc 生成的异常	
		
		
		int hashCode()
		String toString()
		
		
	OptionalDouble、OptionalInt、OptionalLong 类的工作方式与 Optional 类十分类似，它们是专门为操作 double int long 类型的值而设计的
	
		因此它们分别定义了 getAsDouble()  getAsInt() getAsLong()方法， 而不是 get(); 
		它们不支持 filter()、 ofNullable 、 flatMap() 方法
		
		
# Date 类
	Date 类 实现了 Comparalble
	
	构造函数：
		Date()
		Date(long millisec)

	方法：
		boolean after(Date date)	如果调用 Date 对象中包含的日期比 date 指定的日期晚，返回 true，否则返回 false
		boolean before(Date date)
		Object clone()
		int compareTo(Date date)	比较调用对象中包含的日期 与date 指定的日期。如果两者相同，返回0， 调用对象早于 date 返回-1， 大于返回 1
		
		boolean equals(Object date)
		
		long getTime()				返回 自1970-1-1 午夜的 毫秒数
		int hasCode()
		
		Instant toInstant()			返回与调用Date对象对应的 Instant对象
		String toString()			将调用 Date 对象转换成字符串并返回结果
		
		static Date from(Instant t)	返回与 t 中传递的 Instant 对象对应的 Date 对象
		
# Calendar 类
	该抽象类提供了一套方法，允许将毫秒数形式的时间转换成大量有用的时间组成部分。
	子类的实例是 GregorianCalendar
	该类 没有提供公有的构造函数。
	该类定义了几个受保护的实例变量。
		areFieldsSet 是 boolean 变量，指示了是否设置了时间组成部分。
		fields 是int 型数组， 用来保存时间组成部分。
		isSet 是布尔型数组，指示了是否设置了特定的时间组成部分。
		time 是长整型变量，用来保存这个对象的当前时间。
		isTimeSet 是布尔型变量，指示了是否设置了当前时间
		
	方法：
		static Locale[] getAvailableLocales()	返回一个有Locale 对象组成的数组，其中包含可以使用日历的地区信息
		static Calendar getInstance()			为默认地区和时区返回 Calendar 对象
		static Calendar getInstance(TimeZone tz)	指定时区
		static Calendar getInstance(Locale locale)	指定地区
		static Calendar getInstance(TimeZone tz, Locale locale)	指定时区和地区
		
		
		
		abstract void add(int which, int val)	将val 添加到由 which 指定的时间或日期组成部分中。如果要进行减法操作，可以添加一个负值。
												which 必须是 Calendar 类定义的域变量之一，如 Calendar.HOUR
												
		boolean after(Object canlenderObj)
		boolean before(Object canlenderObj)
		
		final void clear()			将调用对象中包含的所有时间组成部分清零
		final void clear(int which)
		Object clone()				返回调用对象的一个副本
		
		final Date getTime()		返回与调用对象的时间相同的Date 对象
		TimeZone getTimeZone()		返回调用对象的时区
		final boolean isSet(int which)	判断是否指定了时间的组成部分
		
		void set(int which, int val)
		final void set(int year, int mouth, int dayOfMonth)
		final void set(int year, int mouth, int dayOfMonth, int hours, int monutes)
		final void set(int year, int mouth, int dayOfMonth, int hours, int monutes, int secends)
		
		final void setTime(Date d)
		
		void setTimeZone(TimeZone tz)
		final Instant toInstant()	返回与调用 Calendar 实例对应的 Instant 对象
		
		boolean equals(Object calendarObj)		判断俩个日期 是否相同
		int get(int calendarField)				返回调用对象中某个时间组成部分的值，这个组成部分由 calendarField 指定：
												Calendar.YEAR | MONTH | MINUTE
		
# GregorianCalendar 类
	该类 是 Calendar 类的具体实现， Calendar 类的getInstance() 方法通常会返回一个 GregorianCalendar 对象， 使用这个对象 初始化 时间
	
	构造函数：
		GregorianCalendar()
		GregorianCalendar(int year, int mouth, int dayOfMonth)							// mouth 0-11
		GregorianCalendar(int year, int mouth, int dayOfMonth, int hours, int monutes)
		GregorianCalendar(int year, int mouth, int dayOfMonth, int hours, int monutes, int secends)
		
			
		GregorianCalendar(Locale locale)
		GregorianCalendar(TimeZone timeZone)
		GregorianCalendar(TimeZone timeZone, Locale locale)

		方法：
			boolean isLeapYear(int year)	是否为闰年
			fro()
			toZoneDateTime()
			getCalendarType()				它将日历类型作为一个字符串返回，即 gregory


# TimeZone 类
	TimeZone 抽象类可以处理 世界时间之间的时差，另外还能够计算夏令时。 
	
	static TimeZone getDefault()			返回一个表示宿主计算机上默认时区的 TimeZone 对象
	static void setDefault(TimeZone tz)		设置当前主机使用的默认时区，tz 是将要使用的 TimeZone 对象的引用
	
	static String[] getAvailableIDs()		返回一个表示所有时区名称的String 对象数组
	static String[] getAvailableIDs(int timeDelta)	返回一个String 对象数组，表示与 GMT 时差为 timeDelta 的所有时区名称
	static TimeZone getTimeZone(String tzName)	返回 该时区名的 时区对象
	
	Object clone()			返回特定于 TimeZone 的 clone() 版本
	String getID()			返回调用 TimeZone 对象的时区名称
	void setID(String tzName)	将时区的名称（ID） 设置为 tzName 指定的名称
	ZoneId toZoneId()		将调用对象转换为 ZoneId, 并返回结果。 在 java.time 中定义
	
	abstract int getOffset(
		int era, 
		int year, int mouth, int dayOfMonth,
		int dayOfWeek, int millisec
	)						返回计算当地时间需要添加到 GMT 的时差，这个值会针对夏令时进行调整
	abstract void setRawOffset(int millis) 以毫秒为单位设置与 GMT 之间的时差
	
	
	abstract boolean inDaylightTime(Date d) 	如果日期 d 在调用对象的夏令时范围之内，就返回 true； 否则返回 false
	abstract boolean useDaylightTime()			判断调用对象是否使用夏令时

# SimpleTimeZone 类
	该类是 TimeZone 的一个便利子类。 实现了TimeZone 的抽象方法，并且可以操作 Gregorian日历的时区，可以计算夏令时
	

# Locale
	Locale locale = new Locale("zh", "CN")			带有语言和国家/地区信息的本地化对象
	Locale locale = new Locale("zh")				只有语言的本地化对象
	Locale locale = Locale.CHINA					同等于 new Locale("zh", "CN")	
	Locale locale = Locale.CHINESE					同等于new Locale("zh")
	Locale locale = Locale.getDefault()				获取本地系统默认的本地化对象
	
	
	
# Random
	构造函数：
		Random()
		Random(long seed)
	
	方法：
		boolean nextBoolean()
		void nextBytes(byte vals[])		使用随机数填充 vals
		double nextDouble()
		float nextFloat()
		double nextFaussian()
		int nextInt()
		int nextInt(int n)				返回 0 到 n 的下一个 int 随机数
		long nextLong()
		void setSeed(long newSeed)		设置随机数的开始点




# Observable 类
	该类 用于创建可以被程序其它部分观察的子类。 当这种子类的对象发生变化时，观察类就会注意到，
	观察类必须实现 Observer 接口， 当观察者注意到被观察者的某个变化时 回调用update() 方法
	
	规则一： 如果被观察者对象发生变化，就必须调用 setChanged();  
	规则二： 当准备通知观察者这一变化时，必须调用 notifyObservers() 方法，使被观察者对象调用 update() 方法

	方法：
		
		protected void setChanged()		该方法当调用对象发生变化时被调用
		protected boid clearChanged()	调用该方法会将调用对象的状态返回到“未改变”
		
		void notifyObservers(Object obj)
		
		boolean hasChanged()	如果调用对象已经被修改，返回 true
		void addObserver(Observer obj)	将 obj 添加到观察调用对象的列表中
		
		void deleteObserver(Observer obj)
		void deleteObservers()			删除调用对象的所有的观察对象
		
		int countObservers()			返回观察调用对象的对象数量
		

# Observer 接口
	为了观察可观察对象，必须实现 Observer 接口。 这个接口只定义了一个方法。
	
	void update(Observable observOb, object arg)

	示例：
	
	class Watcher implements Observer{
		public void update(Observable observOb, object arg){
			// do something
		}
	}

	class BeingWatched extends Observable{
		void counter(int period){
			setChanged();
			notifyObservers(new Integer(period))
			
			// InterruptedException
			// Thread.sleep(100)
		}
	}

	/*
		BeingWatched observed = new BeingWatched();
		Watcher observing = new Watcher();
		
		observed.add(observing)
		observed.counter(10)
	*/



# timer 和 TimerTask 类
	使用这些类， 可以创建在后台运行、等待特定时刻的线程。当时间到达时。执行链接到线程的任务。
	timer 和 TimerTask 类 比 Thread 类使用方便

	
# TimerTask 类
	该类为抽象类
	
	方法：
		abstract void run()		包含定时任务的代码
		boolean cancel()		终止任务。如果成功阻止任务的执行，就返回 true; 否则返回 false
		long scheduledExecutionTime()	返回所安排任务最后一次执行的时间
	
	
	/*
		class RemindTask extends TimerTask {
			public void run() {
				System.out.println("Time's up!");
				timer.cancel(); //Terminate the timer thread
			}
		}
		
		Timer t = new Timer();
		Timer(TTask,0,10000)
	*/
	
# Timer
	构造函数：
		Timer()
		Timer(boolean DThread)
		
		Timer(String tName)
		Timer(boolean DThread, String tName)

			DThread 为true时， 只要程序的剩余部分仍在继续执行，守护线程就会执行
			tName	指定线程名称

	方法：
		void cancel()		取消定时器线程
		int purge()			从定时器队列中删除已取消的任务
		
		void schedule(TimerTask TTask, long wait)					TTask 是被安排在有延迟 wait 毫秒后执行
		void schedule(TimerTask TTask, long wait, long repeat)		重复 间隔（毫秒）执行任务
		void schedule(TimerTask TTask, Date targetTime)				被安排在指定的 时间执行
		void schedule(TimerTask TTask, Date targetTime, long repeat)
			每次执行的时间是从前一次执行的时间开始的
	
		void scheduleAtFixedRate(TimerTask TTask, long wait, long repeat)			每次重复执行的时间都和第一次执行的时间有关，
																					而不是前一次执行的时间有关
		void scheduleAtFixedRate(TimerTask TTask, Date targetTime, long repeat)
			如果时间是过去的时间 会立刻执行 n 次 知道现在的时间为止， 每次执行的时间是从第一次执行的时间开始的 


# Currency 类
	Currency 类封装了有关货币的信息， 没有定义构造函数

	方法：
		static Currency getInstance(Locale localeObj)	返回由LocaleObj 指定的地区的 Currency 对象
		static Currency getInstance(String code)		返回与 code 传递的货币相关代码关联的Currency 对象
		static Set<Currency> getAvailableCurrencies()	返回一组支持的货币
		
		String getCurrencyCode()			返回描述调用货币的代码（由 ISO 4217 定义）
		int getNumericCode()				返回与 code 传递的货币代码相关的 Currency 对象
		
		int getDefaultFractionDigits()		返回正常情况下调用货币使用的小数后面的位数， 例如美元，正常情况下 是 2
		String getDisplayName()				返回调用货币在默认地区的名称
		String getDisplayName(Locale loc)	返回调用货币在指定地区的名称
		
		String getSymbol()					返回调用对象的货币符号（比如$）
		String getSymbol(Locale loc)
		String toString()



# Formatter 类
	在使用 Formatter 格式化输出之前，必须穿件Formatter 对象。
	通常 将程序使用的数据的二进制形式转换成格式化的文本进行工作。在缓冲区中存储格式化文本 无论何时需要，都可以通过程序获取缓冲区中的内容
	
	部分构造函数：
		Formatter()
		Formatter(Appendable buf)
		Formatter(Appendable buf, Locale loc)
		Formatter(String filename) throws FileNotFoundExcetion
		Formatter(String filename, String charset) throws FileNotFoundExcetion, UnsupportedEncodingException
		Formatter(File outF) throws FileNotFoundExcetion
		Formatter(OutputStream outStrm)

		/*
			buf 指定了用于保存格式化输出的缓冲区。 如果buf 为 null, Formatter 将自动分配 StringBuilder 以保持格式化输出。
			loc 指定了地区，默认为 默认地区
			filename 指定了将用于接收格式化的文件的名称
			charset 指定了字符集
			ouF		指定一个引用，这个引用将用于接收输出的已打开文件
			outStrm 指定一个引用，这个引用将用于接收输出的输出流，如果使用文件，那么输出也可以写入文件中
		*/

	方法：
		void close()	关闭调用 Formatter 对象，这回导致 Formatter 对象使用的所有资源被释放。
						如果使用已关闭的对象，会导致 FormatterClosedException 异常
		void flush()	刷新格式化缓冲区，这会导致将缓冲区中当前的所有输出都写入目标中。该方法主要用于与文件绑定的 Formatter 对象
		
		Formatter format(String fmtString, Object ...args)		根据 fmtString 中包含的格式说明符，格式化 args 化递过来的参数。返回调用对象
		IOException ioException()	如果作为输出目标的底层对象抛出 IOException 异常，就返回该异常；否则返回 null
		Locale locale()				返回调用对象的地区
		Appendable out()			返回指向底层对象的引用，底层对象是输出的目标
		String toString()			返回包含格式化输出的 String 对象

# NumberFormat 类
	
	NumberFormat currFmt = NumberFormat.getCurrencyInstance(locale)
	currFmt.format(123456.89)



	
.格式化的基础知识
	format(String fmtString, Object ...args)
	fmtString 包含俩种类型的条目： 	第一种类型是由将被简单地复制到输出缓冲区中的字符构成的；
									第二种类型包含格式说明符，含格式说明符 定义了显示后续参数的类型
									如果参数不匹配 抛出 IllegalFormatException
	Formatter f = new Formatter();
	f.format("a %s c", "b");
	f.close();
	
	// f.toString() -> "abc"
	
	格式说明符		适用的转换
	
	%b %B			布尔型
	
	%a %A			浮点数十六进制
	%x %X           十六进制整数
	
	%o				八进制整数
	%d				十进制整数
	%f    			十进制浮点数
	
	%h %H           参数的哈希码
	%e %E			科学计算法
	%g %G			基于被格式化的值和精度使用 %e | %f
	
	%c				单个字符
	%s %S 			字符串	%s不分大小写， %S 转换为大写
	
	%n				插入一个换行符
	%%				插入一个 % 号
	
	%t %T           时间和日期	
	
.数字化格式
	f.format("Hex: %x, Octal: %o", 196, 196)
	// "Hex: c4, Octal: 304

.格式化时间和日期
	功能更强大的转换说明符是 %t。 通过它可以格式化日期和时间信息。%t 说明与其他说明符的工作方式有些不同，
	因为需要后缀来描述时间和日期所期望的组成部分和精确格式。
	与 %t 对应的参数类型必须是 Calendar、Date、Long、long

	例如 %tM表示 分钟
	
	后缀：  替换内容：
	
	a		星期名简称
	A 		星期名全称
	
	b 		月份名简称
	h 		月份名简称
	B  		月份名全称
	
	
	c  		标准日期和时间字符串，格式为： 天 月份 日期 小时：分钟：秒数 时区 年
	C 		年份的前俩个数字
	y		年份的后俩位（00-99）
	Y		年份（0001-9999）
	
	D       年/月/日
	F       年-月-日
	
	d  		dayOfMonth 的十进制格式 (01-31)
	e  		dayOfMonth 的十进制格式 (1-31)
	
	j	    dayOfYear 的十进制格式(001-336)
	
	H 		小时（00-23）
	k 		小时（0-23）
	
	I 		小时（01-12）
	l 		小时（1-12）
	
	L 		毫秒(000-999)
	
	m 		月份的十进制格式(01-12)
	M 		分钟的十进制格式(00-59)
	N		纳秒（0000000000-999999999）
	
	p 		以小写形式表示本地时间的 AM 或 PM
	Q		自1970-1-1 来经历的毫秒数
	s		自1970-1-1 （UTC）来经历的毫秒数
	
	r 		小时：分钟：秒数（12小时格式）
	R		小时：分钟（24小时格式）
	T		小时：分钟：秒数（24小时格式）
	
	S 		秒（00-59）
	
	z		相对于 UTC 的时差
	Z 		时区名
	
. %n 和 %% 说明符
	他们只作为转义符使用， 不作参数匹配
	
. 指定最小字段宽度
	%符号和转换码之间 的整数被作为最小字段的宽度，
	%12f 表示%f 的最小宽度为12， 位数不足使用空格在 前面填充
	%012f	用 0 指定填充
	
. 指定精度
	精度说明符号可以用于 %f  %e %g 以及 %s
	默认小数点6位
	%10.4f 表示显示的数字至少有10个字符宽（包括小数点和小数），并且带有4位小数
	%010.4f	也可以指定 填充位
	
	当使用%s 的使用
	
	%4.10f	表示最小4个字符长度 最大10个字符长度 ，多余的会被截断
	
	
. 使用格式标志
	标志：		效果：
	-   		左对齐							// 如果是左对齐的话， 填充位是在结果的后面
	#			可选的转换格式	
					# 用于 %o %x %e %f 格式说明
					对于 %e %f, 确保具有小数点，不论是否有小数位
					%x 十六进制 前面添加0x
					%o	八进制前面添加0
					
	0			使用0 而不是空格填充输出
	空格		在输出的前面加一个空格
	+			在输出的前面加一个+ 符号
	，			在数值中包含组分隔符			%,.2f，1256464.4655464 -> 1,256,464.4655464
	(			将负值放在括号内
	
. 大写选项
	说明符：	效果：
	%A 			使用十六进制数字中的 a~f 显示为大写的 A~F. 另外 0x 前缀显示为 0X， p显示为 P	
	%H			使用十六进制数字中的 a~f 显示为大写的 A~F.
	%X			使用十六进制数字中的 a~f 显示为大写的 A~F. 另外，可选的前缀 0x 将显示为0X（如果存在的话）
	%B			使 true 和 false 变为大写格式
	%E			使用大写显示指数符号e
	// %G			
	
	%S			使相应的字符串变为大写形式
	%T			使用大写显示所有的字母输出

	
. 使用参数索引
	n$ 表示期望的索引参数， 从1开始
	(%1$s,"str")
	
# Scanner 类
	Scanner 类。 Scanner 类读取格式化的输入，并将输入转换成相应的二进制形式。 与 Formatter 类相反
	
	该类 可以用于从控制台、文件、字符串或任何实现了 Readable | ReadableByteChanner 接口的源读取内容
	
	构造函数：
	Scanner(File from) 
		throws FileNotFoundExcetion 	创建的 Scanner 对象使用 from 指定的文件作为输入源
	Scanner(File from, Stringing charset)
		throws FileNotFoundExcetion		创建的 Scanner 对象使用 from 指定的文件作为输入源, 并制定编码格式
	
	Scanner(InputStream from)			创建的 Scanner 对象使用 from 指定的流作为输入源
	Scanner(InputStream from, String charset)
		
	Scanner(Path from)	throws IOException	创建的 Scanner 对象使用 from 指定的文件作为输入源
	Scanner(Path from, String charset)	throws IOException
	
	Scanner(Readable from)				创建的 Scanner 对象使用 from 指定的 Readable 对象作为输入源
	Scanner(ReadableByteChanner from)
	Scanner(ReadableByteChanner from, String charset)
	Scanner(String from)
	
	
.使用 Scanner 需要遵守以下过程：
	1) 调用 Scanner 类的 hasNextX() （X 是期望的数据类型），确定是否可以得到某个特定类型的输入。
	2) 如果能够得到输入，就调用 Scanner 类的 nextX() 方法进行读取。
	3) 重复上述过程，知道输入全部读取完成
	4) 调用 close() 关闭
	
	/*
		Scanner conin = new Scanner(System.in)
		int i;
		while(conin.hasNextInt()){
			i = conin.nextInt();
		}
		
		如果 nextX 方法无法找到正在查找的类型，就会抛出 InputMismatchException
		
	*/
	
	Next 方法：
		boolean hasNext()		如果有可以读取的任意类型的标记，就返回 true; 否则返回 false
		boolean hasNext(Pattern pattern)	如果有可以读取的与 pattern 传递过来的模式向匹配的标记，就返回 true
		boolean hasNext(String pattern)		
		
		boolean hasNextBigDecimal() 	判断是否能够读取 可以存储与 BigDecimal 对象中的值
		boolean hasNextBigInteger()		(默认基数为10)
		boolean hasNextBigInteger(int radix)	使用基数
		
		boolean hasNextBoolean()
		boolean hasNextByte()
		boolean hasNextByte(int radix)
		
		boolean hasNextDouble()
		boolean hasNextFloat()
		boolean hasNextInt()
		boolean hasNextInt(int radix)
		
		boolean hasNextLine()		如果能够读取输入的行，就返回 true
		
		boolean hasNextLong()
		boolean hasNextLong(int radix)
		
		boolean hasNextShort()
		boolean hasNextShort(int radix)
		
		String next()		从输入源返回下一个任意类型的标记
		String next(Pattern pattern)	从输入源返回下一个与 pattern 传递过来的模式相匹配的标记
		String next(String pattern)		从输入源返回下一个与 pattern 传递过来的模式相匹配的标记
		
		BigDecimal nextBigDecimal()		作为 BigDecimal 对象返回下一个标记
		BigDecimal nextBigDecimal(int radix)
		
		byte nextByte()		作为 byte 值返回下一个标记
		byte nextByte(int radix)	
		
		double nextDouble()
		double nextFloat()
		
		double nextInt()
		double nextInt(int radix)
		
		String nextLong()
		String nextLong(int radix)
		
		short nextShort(int radix)
		
		// radix 基数默认为 10
		
		
	/*
		public class Test{
			public static void main(String[] args) {

				Scanner conin = new Scanner(System.in);
				int count = 0;
				double sum = 0.0;
				System.out.println("Enter numbers to average.");
				while (conin.hasNext()) {
					if (conin.hasNextDouble()) {
						sum += conin.nextDouble();
						count++;
					} else {
						String str = conin.next();
						if (str.equals("done"))
							break;
						else {
							System.out.println("Date format error.");
						}
					}

				}
				conin.close();
				System.out.println(sum/count);
			}
		}
		
		计算控制台输入的数字平均值， 当输入 done, 时退出
	*/
		
. 自动关闭
	try(Scanner src = new Scanner(fin)){
	
	}
		
		
. 设置定界符
	Scanner 根据一些列的定界符来确定标记的开始和结束位置， 默认为 空格字符，
		
	方法：
		Scanner useDelimiter(String pattern)
		Scanner useDelimiter(Pattern pattern)	// ", *" | ",*"  表示 ，和任意多的空格
		
		Pattern delimiter()		获取定界符
		
. 其它 Scanner 特性
	
	方法：
		String findInLine(String pattern)		在文本 的下一行索引指定的模式。 如果找到指定的模式，就使用并返回匹配的标记， 
												否则 null
		String findInLine(Pattern pattern)
			/*
				String instr = "Name: Tom Age: 28 id:77";
				Scanner conin = new Scanner(instr);
				String s = conin.findInLine("Age:");
					// s -> "Age:"
				if(conin.hasNext())
					System.out.println(conin.next());
					// 28
				conin.close();
			*/
	
		String findWithinHorizon(Pattern pattern, int start)		用法与 findInLine 类似， 指定开始匹配的起始位置
		String findWithinHorizon(String pattern, int start)
	
		Scanner skip(Pattern pattern)	// pattern 和 字符的 开始除匹配 是否相同， 不匹配 抛出 NoSuchElementException 异常
		Scanner skip(String pattern)
	

# java.util.function 函数式接口

	接口：					抽象方法：					描述：
	
	Function<T, R>			R apply(T val)
	
	BiConsumer<T, U>		void accept(T v, U u) 		
	BiFunction<T, U, R>		R apply(T v, U u)
	BinaryOperator<T>		T apply(T v1, T v2)
	BiPredicate<T, U>		boolean test(T v, U u)
	
	BooleanSupperlier		boolean getAsBoolean()
	
	Consumer<T>				void accept(T val)
	
	DoubleBinaryOperator	double applyAsDouble(double v1, double v2)
	DoubleConsumer			void accept(double val)
	DoubleFunction<R>		R apply(double v)
	DoublePredicate			boolean test(double val)
	DoubleToIntFunction		int applyAsInt(double val)
	DoubleToLongFunction	long applyAsInt(double val)
	DoubleUnaryOperator		double applyAsDouble(double val)

	IntBinaryOpetator		int applyInt(int v1, int v2)
	intConsumer				int accept(int v)
	intFunction<R>			R apply(int val)
	intPredicate			boolean test(int v)
	intSupplier				int getAsInt()
	intToDoubleFunction		double applyAsDouble(int v)
	intToLongFunction		long applyAsDouble(int v)
	intUnaryOperator		int applyAsInt(int v)
	
	LongConsumer			void accept(long v)
	longFunction<R>			R apply(long val)
	longPredicate			boolean test(long v)
	longSupplier			long getAsInt()
	longToDoubleFunction	double applyAsDouble(long v)
	longToIntFunction		int applyAsInt(long v)
	LongUnaryOperator		long applyAsLong(long v)
	
	ObjDoubleConsumer<T>	void accept(T v1, T v2)
	ObjIntConsumer<T>		void accept(T v, int v2)
	ObjLongConsumer<T>		void accept(T v, long v2)
	
	Predicate<T>			boolean test(T val)
	Supplier<T>				T get()
	
	ToDoubleBiFunction<T,U>	double applyAsDouble(T v1, U v2)
	ToDoubleFunction<T>		double applyAsDouble(T v1)
	
	ToIntBiFunction<T,U>	int applyAsDouble(T v1, U v2)
	ToIntFunction<T>		int applyAsDouble(T v1)
	
	ToLongBiFunction<T,U>	long applyAsDouble(T v1, U v2)
	ToLongFunction<T>		long applyAsDouble(T v1)
	
	UnaryOperator<T>		T apply(T val)
	
	
	/*
		函数名称规则:
		Binary Bi 	为俩个参数
		Unary		为一个参数
		Consumer 	为纯粹消费 没有返回 ， void
		Operator	为操纵参数
		Predicate 	为断言， 返回 boolean
		Supplier	空参数
		
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	