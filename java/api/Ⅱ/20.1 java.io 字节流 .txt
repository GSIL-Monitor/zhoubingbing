
# File 类
	java.io 定义的大多数类用于操作流，但 File 类却不是。 File 类直接处理文件和文件系统，
	也就是说，该类没有指定如何从文件检索信息以及如何向文件中存储信息，而是描述了文件本身的属性
	
	现实了 Comparable 接口
	
	构造函数：
		File(String directoryPath)						// 目录对象
		File(String directoryPath, String filename)		// 文件对象
		File(File dirObj, String filename)
		File(URI uriObj)
		
		/*
			File f1 = new File("/");
			File f2 = new File("/", "a.txt");
			File f3 = new File(f1, "a.txt");
		*/
	
	方法：
		String getPath()			返回目录
		String getAbsolutePath
		boolean isAbsolute()
		
		String getName()			返回文件名，如果该对象为目录对象则返回 directoryPath
		String getParent()			返回父目录名
		String exists()				判断该目录或 文件是否存在
		boolean canRead()
		boolean canWrite()
		int length()				返回文件内的字节长度
		
		boolean renameTo(File newName)
		boolean delete()			删除文件或目录, 删除文件后若文件夹为空则删除该文件夹
		
		// 目录对象
		boolean isDirectory()		是否为目录，new File("/")
		String[] list()				返回该目录下的所有文件名的列表，如果该对象为目录对象
		
		mkdir()						创建目录，成功返回true
		mkdirs()					为不存在的路径创建目录，及其所有父目录
		
		// 文件对象
		boolean isFile()			是否为指定文件，new File("/","filename")
		
		// 
		void deleteOnExit()			当java 虚拟机终止时，删除与调用对象关联的文件
		long getFreeSpace()			返回在与掉哟个对象关联的分区中，剩余存储空间的字节数
		long getTotalSpace()		返回在与调用对象关联的分区的存储容量
		long getUsableSpace()		返回在与调用对象关联的分区中，剩余可用存储空间的字节数
		boolean isHidden()			如果调用文件是隐藏的，就返回true; 否则返回 false
		boolean setLastModefied(long millisec)
		boolean setReadOnly()		将调用文件设置为只读的
	
		Path toPath()				转换为 Path对象
		
. 使用 FilenameFilter 接口
	该接口只定义了accept() 方法，过滤文件夹中的指定文件
	boolean accept(File directory, String filename)
	
	/*
		public class OnlyExt implements FilenameFilter{
			String ext;
			public OnlyExt(String ext){
				this.ext = ext;
			}
			public accept(File dir, String name){
				return name.endsWith(ext);
			}
		}
	*/
	
	方法：
		String[] list(FilenameFilter FFObj)
	
	
.listFiles() 方法
	File[] listFiles()						返回该文件夹内的所有文件 File 对象
	File[] listFiles(FilenameFilter FFObj)	返回该文件夹内的过滤后的文件 File 对象
	File[] listFiles(FileFilter FObj)
	
	/*
		FileFilter 接口 只定义了一个 accept() 方法
		boolean accept(File path)
	*/
	
# AutoCloseable Closeable Flushable 接口
	Closeable 扩展了 AutoCloseable 接口
	
	JDK 7新增
	AutoCloseable 接口对带资源的 try 语句提供了支持， 这种 try 语句可以自动执行资源关闭过程， 该接口只定了了 close() 方法；
	
	void close() throws Exception
	
	Flushable 接口的类的对象， 可以强制将缓冲的输出写入对象关联的流中，该接口定义了 flush() 方法
		void flush() throws IOException
		刷新流通常会导致缓冲的输出被物理地写入底层设备中。写入流的所有I/O与对象关联的流中
		
# I/O 异常
	
	IOException
		FileNotFoundException	文件无法打开
	
	SecurityException	安全违规异常， applet会使用浏览器提供的安全管理器， 执行文件的I/O 可能会产生该异常。
	
# 关闭流的俩种方式
	
	1. try{
	
	}catch(I/O-Exception){
	
	}finally{
		file.close()
	}
	
	2. try(resurce-specification){
	
	}



# 字节流--------------------------------------------------------------------------------------------------

# InputStream 类
	该类为抽象类，定义了 Java 的流字节输入模型，并且还实现了 AutoCloseable 和 Closeable 接口
	
	int available()		返回当前可读取的输入字节数
	void close()		关闭输入源，如果视图继续继续读取，会产生 IOException
	
	
	int read()					返回代表下一个可用字节的整数。当到达文件末尾时，返回 -1
	int read(byte buffer[])		尝试读取 buffer.length 个字节到 buffer 中，并返回实际成功读取的字节数。
								当到达文件末尾时，返回 -1
	int read(byte buffer[], int offset, int numBytes)
								尝试读取 numBytes 个字节到 buffer 中，从 buffer[offset] 开始保存读取的字节。
								该方法返回成功读取的字节数； 当到达文件末尾时，返回 -1
	long skip(long numBytes)	忽略（跳过） numBytes 个字节的输入，返回实际忽略的字节数
	
	
	boolean markSupported()		如果调用流支持 mark() 或 reset() 方法就返回true
	void reset()				将输入指针重置为前面设置的标记， 可以重置 read 的起始位置
	
	
	void mark(int numBytes)		在输入流的当前位置放置标记( 执行该方法的位置 )，该标记在读入 numBytes 个字节之前一直都有效
		/*
			如果在mark后读取超过readlimit字节数据，mark标记就会失效，调用reset()方法会有异常。
			但实际的运行情况却和JAVA文档中的描述并不完全相符。 
			有时候在BufferedInputStream类中调用mark(int readlimit)方法后，即使读取超过readlimit字节的数据，mark标记仍有效，仍然能正确调用reset方法重置。 
			
			事实上，mark在JAVA中的实现是和缓冲区相关的。只要缓冲区够大，mark后读取的数据没有超出缓冲区的大小，mark标记就不会失效。
			如果不够大，mark后又读取了大量的数据，导致缓冲区更新，原来标记的位置自然找不到了。
			因此，mark后读取多少字节才失效，并不完全由readlimit参数确定，也和BufferedInputStream类的缓冲区大小有关。 
			如果BufferedInputStream类的缓冲区大小大于readlimit，在mark以后只有读取超过缓冲区大小的数据，mark标记才会失效。
		*/
	
	
	InputStream 的子类实现了 该抽象类的大部分方法， mark() 和 reset() 方法除外
	
# OutputStream 类
	该类 是定义流字节输出的抽象类， 实现了 AutoCloseable Closeable Flushable 接口，
	该类的大部分方法都返回 void, 并且如果发生了 I/O 错误，大部分方法都会抛出 IOException
	
	方法：
		void close()		关闭输出流。如果视图继续向流中写入内容，将产生 IOException 异常
		void flush()		结束输出状态，从而清空所有缓冲区，即刷新输出缓冲区
		
		void write(int b)	向输出流中写入单个字节，注意单数是 int 类型，
							从而允许使用表达式调用 write() 方法，而不用将表达式强制转换回 byte 类型
		void write(byte buffer[])	向输出流中写入一个完整的字节数组
		void write(byte buffer[], int offset, int numBytes)
							将 buffer 数组中从buffer[offset] 开始的 numBytes 个字节写入输出流中

							
							
# FileInputStream 类
	使用该类创建的 InputStream 对象可以用于从文件读取字节。
	该类重写了 InputStream 抽象类的的6个方法，但是没有重写 reset() 和 mark() 方法；
	俩个常用的构造函数如下所示：
		FileInputStream(String filePath)
		FileInputStream(File fileObj)
	
# FileOutputStream 类
	该类创建能够用于向文件中写入字节的 OutputStream 对象，实现了 AutoCloseable Closeable Flushable 接口
	FileOutputStream 对象的创建不依赖与已经存在的文件。当创建对象时， FileOutputStream 会在打开文件之前创建文件。
	如果视图打开只读文件，会抛出异常
	
	构造函数：
		FileOutputStream(String filePath)
		FileOutputStream(File fileObj)
		FileOutputStream(String filePath, boolean append)	// append 为是否以追加方式写入， 否则置空文件内容添加
		FileOutputStream(File fileObj, boolean append)	
	
	
	
# ByteArrayInputStream 类
	该类使用字节组作为源的一个输入流的实现。这个类有俩个构造函数，都需要一个字节组来提供数据；
	该类创建使用字节组作为源的输入流 的 InputStream 类，实现了 mark() 和 reset()  方法
	该类不需要调用 close() 方法
	
	ByteArrayInputStream(byte array[])
	ByteArrayInputStream(byte array[], int start, int numBytes)
	
# ByteArrayOutputStream 类
	该类是使用字节数组作为目标的输出流的一个实现。
	
	构造函数:
		ByteArrayOutputStream()					创建一个32 字节的缓冲区
		ByteArrayOutputStream(int numBytes)		创建一个指定大小字节的缓冲区
		
		/*
			如果有需要的话，缓存区的大小会自动增加，
			colse() 方法对 ByteArrayOutputStream 对象没有效果。
		*/
	
	方法：
	byte[] toByteArray()	将该对象转换成 字节组 
	
	
	
	
	
	
# 缓冲的字节流
	对于面向字节的流， 缓冲流通过将内存缓冲区附加到I/O 系统来扩展过滤流。
	这种流允许 java 一次对多个字节执行多次 I/O 操作，从而提升性能。 所有 skip remark reset 都是可能发生的
	
	缓冲流类是 BufferedInputStream 和 BufferedOutputStream。 PushbackInputStream 也实现了缓冲流
	
. BufferedInputStream 类
	缓冲I/O 是很常见的性能优化手段。 java 的 BufferedInputStream 类允许将任何 InputStream 对象封装到缓冲流中以提高性能
	
	构造函数：
		BufferedInputStream(InputStream inputStream)
		BufferedInputStream(InputStream inputStream, int bufSize)
			
	/*
		第二种形式， 缓冲区大小是有 bufSize 传递的。使缓冲区大小等于内存页面、磁盘块等大小的整数倍，可以明显提高性能。
		为了重复利用缓冲，不需要这么复杂，比较好的缓存大小约是 8192 字节，并且对于 I/O 系统来说即使附加比较小的缓冲区，
		也是一个好主意，这样的话低级系统就可以从磁盘或网络获取多块数据
		
		支持 mark reset skip 方法
	*/
	
. BufferedOutputStream 类
	除了增加 flush() 方法之外， BufferedOutputStream 与所有 OutputStream 类似， flush() 方法用于确保将数据缓冲区写入被缓冲的流中。
	BufferedOutputStream 是通过减少系统实际写数据的次数来提高性能的，因此可能需要调用 flush() 方法，从而要求立即写入缓冲区的所有数据。
	
	构造函数：
		BufferedOutputStream(OutputStream os)
		BufferedOutputStream(OutputStream os, int bufSize)
	
	

	
	
# PushbackInputStream 类
	回退用于输入流，以允许读取字节，然后再将它们添加到流中（添加位置是下一个read）
	
	该对象会使得 InputStream 对象的mark() 或reset() 方法无效。 对于准备使用mark() reset() 方法的任何流来书，都应当使用 markSupported() 方法来检查
	
	构造函数：
		PushbackInputStream(InputStream is)
		PushbackInputStream(InputStream is, int numBytes)	numBytes为缓冲区
		
	方法：
		void unread(int b)
		void unread(byte buffer[])
		void unread(byte buffer[], int offset, int numBytes)
			如果回推的位数大于 构造函数的缓冲区，就会抛出异常
	
	
# SequenceInputStream 类
	该类允许链接多个 InputStream 对象。 该类构造函数使用 n 个 InputStream 对象或 InputStream 对象的一个 Enumeration 对象作为参数：
	
	
	构造函数：
		SequenceInputStream(InputStream is1, InputStream is2)
		SequenceInputStream(Enumeration<? extends InputStream> streamEnum)
	
		/*
			该类从第一个 InputStream 对象进行读取，知道读取完全部内容，然后切换到下一个，当到达每个文件的末尾时 自动关闭该文件
			关闭通过 SequenceInputStream 创建的流， 会导致关闭所有为关闭的流
			
			注意 Enumeration 元素对象中的 nextElement() 方法中，如果不能打开文件就会返回null。这回导致 NullPointerException 异常
			
		*/
	
	
# PrintStream 类
	该类实现了 Appendable、 AutoCloseable、Closeable以及 Flushable接口。
	
	该类可以通过 print() pringln() printf() 等方法输出流。 （输出文件）
	
	构造函数：
		
		PrintStream(OutputStream outputStream)
		PrintStream(OutputStream outputStream, boolean autoFlushingOn)
		PrintStream(OutputStream outputStream, boolean autoFlushingOn, String charSet)
			throws UnsupportedEncodingException
		
		/*
			autoFlushingOn 参数控制每次写入一个换行符(\n) 或字节数组，抑或调用println() printf() format() 方法时，是否会自动刷新输出缓冲区
			
			如果 autoFlushingOn 为 true，就自动刷新，如果为 false 就不自动刷新
		*/
		PrintStream(File outputFile) throws FileNotFoundException
		
		PrintStream(File outputFile, String charSet) 
			throws FileNotFoundException, UnsupportedEncodingException
			
		PrintStream(String outputFileName) throws FileNotFoundException
	
		PrintStream(String outputFileName, String charSet)
			throws FileNotFoundException, UnsupportedEncodingException
	
		/*
			如果存在安全管理器，那么当发生安全性违规时，有些 PrintStream 构造函数会抛出 SecurityException 异常
		*/
	
	PrintStream 为所有类型都支持 print() 和 println() 方法， 并自JDK5 以来添加 printf() 方法使用 Formatter 类
		PrintStream printf(String fmtString, Object ...args)
		PrintStream	printf(Local loc, String fmtString, Object ...args)
		
		PrintStream format(String fmtString, Object ...args)
		PrintStream	format(Local loc, String fmtString, Object ...args)
	
	
	
	
# 过滤的字节流
	过滤的字节流是简单的封装器，用于封装底层的输入流或输出流，并且还透明地提供一些扩展级别的功能；
	这些流一般是通过接受通用流的方式访问的，通用流是过滤流的超类
	典型的扩展是缓冲 字符转换以及原始数据转换
	
	构造函数：
		FilterInputStream(InputStream is)
		FilterOutputStream(OutputStream os)	
	
# DataOutputStream 和 DataInputStream 类
	通过这俩个类可以向流中写入基本类型数据或从流中读取基本类型数据。
	他们分别实现了 DataOutput 和 DataInput 接口，这些接口定义了将基本类型转换成字节序列或将字节序列转换成基本类型值得方法。这些流简化了在文件中存储二进制数据的操作。
	
	DataOutputStream 除了实现了 DataOutput 接口外，还实现了 AutoCloseable、Closeable以及 Flushable接口。
	DataOutputStream 扩展了 FilterOutputStream, 而 FilterOutputStream 扩展了 OutputStream
	
. DataOutputStream 类
	构造函数：
		DataOutputStream(OutputStream outputStream)
		/*
			当关闭 DataOutputStream 对象时（通过调用 close() 方法）， outputStream 指定的底层流也将被自动关闭
		*/
	
	方法：
		final void writeDouble(double value) throws IOException
		final void writeBoolean(boolean value) throws IOException
		final void writeInt(int value) throws IOException

. DataInputStream 类
	DataInputStream 是 DataOutputStream 的互补，
	DataInputStream 除了实现了 DataInput 接口外，还实现了 AutoCloseable、Closeable接口。
	DataInputStream 扩展了 FilterInputStream , 而 FilterInputStream 扩展了 IntputStream

	构造函数：
		DataInputStream(InputStream inputStream)

	方法：
		final double readDouble() throws IOException
		final boolean readBoolean() throws IOException
		final int readInt()	throws IOException
		
		


# RandomAccessFile 类
	RandomAccessFile 类封装了随机访问文件的能力，该类并非派生自 InputStream 或 OutputStream 类，而是实现了 DataInput 和 DataOutput 接口
	此外还实现了 AutoCloseable、Closeable 接口。
	该类很特殊，因为支持定位需求，即可以定义文件中的文件指针。
	
	构造函数：
		RandomAccessFile(File fileObj, String access) throws FileNotFoundException
		RandomAccessFile(String filename, String access) throws FileNotFoundException

			access 为 "r" 就只能只读文件，不能写入
				   为 "rw"	文件是以读-写模式打开的。
				   为 "rws"	文件是以读-写模式打开的,并且每次对文件中数据或元数据的修改都会被立即写入物理设备
				   为 "rwd"	文件是以读-写模式打开的,并且每次对文件中数据的修改都会被立即写入物理设备

	方法：
		void seek(long newPos) throws IOException		 指定下一次读取文件的位置
		void setLength(long len) throws IOException		 加长或缩短文件



# Serializable 接口
	该接口没有定义任何方法， 实现该接口的类，以及子类 可以通过串行化功能进行保存和恢复。
	声明为 transient 的变量不能通过串行化功能进行保存，此外也不能保存 static 变量
	
	实现Serializable 接口的类可以 通过 ObjectOutputStream 流的  writeObject 方法保存在文件中， ObjectInputStream 流的  readObject 读取
	
# Externalizable 接口
	该接口定义了对串行化保存和恢复使用压缩和加密技术。
	方法：
		void readExternal (ObjectInput inStream) throws IOException, ClassNotFoundException
		void writeExternal (ObjectOutput outStream) throws IOException, ClassNotFoundException




/*
	ObjectOutput 接口
	ObjectOutput 接口扩展了 DataOutput 和 AutoCloseable 接口，并支持对象串行化。
	
	方法：
		void close()
		void flush()
		void write(int b)
		void write(byte buffer[])
		void write(byte buffer[], int offset, int numBytes)
		
		void write(Object obj) 将 obj 对象写入调用流中
*/

# ObjectOutputStream 类
	ObjectOutputStream 类扩展了 OutputStream 类并实现了 ObjectOutput 接口，负责将对象写入流中
	当遇到错误时，它的方法会抛出 IOException 异常
	
	构造函数：
		ObjectOutputStream(OutputStream outStream) throws IOException
			
			关闭 ObjectOutputStream 流会自动关闭 outStream 指定的底层流


	方法：
		void close()
		void flush()
		
		void write(int b)
		void write(byte buffer[])
		void write(byte buffer[], int offset, int numBytes)
		
		void writeBoolean(boolean b)
		void writeByte(int b)
		void writeBytes(String str)
		void writeChar(int c)
		void writeChars(String str)
		void writeDouble(double d)
		void writeFloat(float f)
		void writeInt(int i)
		void writeLong(long l)
		void writeObject(Object obj)
		void writeShort(int i)


/*
	ObjectInput 接口
	ObjectInput 接口扩展了 DataInput 和 AutoCloseable 接口，
	该接口支持对象串行化
	如果遇到错误，所有的这些方法都会抛出 IOException 异常。 ReadObject() 方法还能抛出 ClassNotFoundException 异常
	
	方法：
		int available()				返回输入缓冲区中现在可用的字节数
		void close()
		int read()
		int read(byte buffer[])
		int read(byte buffer[], int offset, int numBytes)
		
		Object readObject()			从调用流中读取对象
		long skip(long numBytes)	忽略（即跳过）字节流中numBytes 个字节， 返回实际忽略的字节数
*/

# ObjectInputStream
	ObjectInputStream 类扩展了 InputStream 类并实现了 ObjectInput 接口。
	该类负责从流中读取对象
	
	构造函数：
		ObjectInputStream(InputStream inputStream) throws IOException
			关闭 ObjectInputStream 流会自动关闭 inputStream 指定的底层流

	方法：
		int available()
		void close()
		int read()
		int read(byte buffer[])
		int read(byte buffer[], int offset, int numBytes)
		
		boolean readBoolean()
		byte readByte()
		char readChar()
		double readDouble()
		float readFloat()
		
		void readFully(byte buffer[])	读取 buffer.length 个字节到buffer中，只有当所有字节都读完之后才返回
		void readFully(byte buffer[]), int offset, int numBytes)
		
		short readShort()
		int readInt()
		long readLong()
		final Object readObject()
		
		int readUnsignedByte()			从调用流中读取并返回一个无符号 byte 值
		int readUnsignedShort()			从调用流中读取并返回一个无符号 short 值































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	