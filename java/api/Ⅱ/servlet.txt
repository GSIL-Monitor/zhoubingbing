
# javax.servlet 包中的接口 --------------------------------------------------------------
	Servlet				申明servlet 的生命周期方法
	ServletConfig		通过该接口，servlet 可以获取初始化参数
	ServletContext		通过该接口，servlet 可以记录与它们的环境相关的事件和访问信息
	ServletRequest		用于读取来自客户端请求的数据
	ServletResponse		用于向客户端响应写入数据
	
. javax.servlet 包中的核心类
	GenericServlet 			实现了 Servlet 和 ServletConfig 接口
	ServletInputStream		为读取来自客户端的请求，提供输入流
	ServletOutputStream		为向客户端写入相应，提供输入流
	ServletException		指示发生了 servlet 错误
	UnavailableException	指示 servlet 不可用
	
	
# Servlet 接口	
	所有 servlet 都必须实现 Servlet 接口， Servlet 接口申明了 init() service()  destroy() 方法，这些方法由服务器在servlet 生命周期内调用。
	
	方法：
	ServletConfig getServletConfig()	放回的 ServletConfig 对象包含所有初始化的参数
	String getServletInfo()				返回描述 servlet 的字符串
	
	void destroy()						当卸载servlet 时调用
	void init(ServletConfig sc) throws ServletException			
		当初始化 servlet 时调用。 可以从sc 获取用于 servlet 的初始化参数，如果不能初始化 抛出异常
	
	void service(ServletRequest req, ServletResponse res ) throws ServletException
		用来处理来自客户端的请求。 可以从req 读取来自客户端的请求， 对客户端的相应写入 res
	
# ServletConfig 接口	
	通过 ServletConfig 接口，当servlet 加载时可以获取配置数据
	
	方法：
	ServletContext getServletContext()		返回 servlet 的上下文
	String getInitParameter(String param)	返回名为 param 的初始化参数的值
	Enumeration<String> getInitParameterName	返回所有初始化参数名称的枚举
	String getServletName()					返回调用 servlet 的名称
	
	
# ServletContext 接口
	通过 ServletContext 接口，servlet 可以获取与它们的环境相关的信息
	Object getAttribute(String attr)		返回名为 attr 的服务器特性的值
	String getMimeType(String file)			返回 file 的 MIME 类型
	String getRealPath(String vpath)		返回与相对路径 path 对应的实际路径
	String getServerInfo()					返回有关服务器的信息
	void log(String s)						将s 写入 servlet 日志
	void log(String s, Throwable e)			将 e 的堆栈跟踪和 s 写入 servlet 日志
	void setAttribute(String attr,Object val)	将指定的属性值 指定为 val
	
	
# ServletRequest 接口
	Object getAttribute(String attr)		返回名为 attr 的特性的值
	Enumeration<Object> getAttributeNames
	
	String getCharacterEncoding()			返回请求的字符编码
	int getContentLength()					返回请求内容的大小。如果无法获得，就返回 -1
	String getContentType()					返回请求内容的类型。如果不能确定请求的类型，就返回null
	
	String getParameter(String pname)		返回名为 pname 的参数的值
	Enumeration<String> getParameterNames() 返回这个请求的参数名称枚举
	String[] getParameterValues(String name) 返回的数组包含与 name 指定的参数关联的值
	
	
	ServletInputStream getInputStream()
		throws IOException					返回可用于从请求读取二进制数据的 ServletInputStream，如果已经为这个请求调用过 getReader() 
											方法，就抛出 IllegalStateException 异常异常
	BufferReader getReader()
		throws IOException					返回可用于从请求读取文本的缓冲读取器。如果已经为这个请求调用过 getInputStream() 方法，
											就抛出 IllegalStateException 异常
	
	
	String getProtocal()					返回协议的描述
	String getRemoteAddr()					返回与客户端IP 地址等价的字符串
	String getRemoteHost()					返回与客户端主机名等价的字符串
	String getScheme()						返回请求使用的URL 的传输模式（例如“http”, "ftp"）
	String getServerName()					返回服务器的名称
	int getServerPort()						返回端口号 
	
	
# ServletResponse 接口
	通过 ServletResponse 接口， servlet 可以为客户端定制响应。
	
	String getCharacterEncoding()			返回响应的字符编码
	ServletOutputStream getOutputStream()
		throws IOException					返回能够用于将二进制数据写入响应的 ServletOutputStream 对象。如果已经调用过
											这个请求的 getWriter() 方法， 将抛出 IllegalStateException 异常
	PrintWriter getWriter()	
		throws IOException					返回能够用于将字符数据写入响应的 PrintWriter 对象。如果已经调用过
											这个请求的 getOutputStream() 方法， 将抛出 IllegalStateException 异常
	
	void setContentLength(int size)			将响应的内容长度设置为 size
	void setContentType(String type)		将响应的内容类型设置为 type
	
# GenericServlet 抽象类
	该类提供了 Servlet 基本生命周期方法的实现
	实现了 Servlet 和 ServletConfig 接口
	此外 GenericServlet 还提供了一个向服务器日志文件追加字符串的方法。
		void log(String s)
		void log(String s, Throwable e)
	
	
# ServletInputStream 类
	该类扩展了  InputStream, 由 servlet 容器实现，
	该类还提供了一个从输入流读取字节的方法。
		int readLine(byte[] buffer, int offset, init size) throws IOException
			// 将流放置 buffer 数组中

			
# ServletOutputStream 类
	该类扩展了 OutputStream
	
	
# servlet 类异常
	ServletException 指示 servlet 存在问题
	UnavailableException  该异常扩展了 ServletException，指示 servlet 不可用
	
	
	
# javax.servlet.http 包----------------------------------------------------------------
	前面 介绍的 servlet 的基本功能， 但是当操作 HTTP 时，通常使用 javax.servlet.http 包中的接口和类

. 接口
	HttpServletRequest		使 servlet 能够从 HTTP 请求读取数据
	HttpServletResponse		使 servlet 能够向 HTTP 相应写入数据
	HttpSession				允许读取和写入会数据

	
. 类
	Cookie					允许在客户机上保存状态信息
	HttpServlet				提供处理 HTTP 请求和响应的方法
	
	
# HttpServletRequest 接口
	String getAuthType()				返回验证模式
	Cookie[] getCookies()				返回这一请求中的cookie 数组
	
	HttpSession getSession()			返回这一请求的会话。如果不存在会话，就创建会话并返回
	HttpSession getSession(boolean new)	如果new 为true, 如果会话不存在，就创建并返回这个请求的会话； 否则，返回这一请求已经存在的会话
	
	long getDateHeader(String field)	返回名为field 的日期标题字段的值
	String getHeader(String field)		返回名为 field 的标题字段的值
	
	Enumeration<String> getHeaderNames() 返回标题名称的枚举
	int getIntHeader(String field)		返回与名为field 的标题字段等价的 int 值
	String getMethod()					返回这一请求的 HTTP 方法
	String getPathInfo()				返回位于 servlet 路径之后，并且位于 URL 查询字符串之前的所有路径的值
	String getPathTranslated()			返回位于 servlet 路径之后、位于 URL 查询字符串之前，并且已经转换为真实路径的所有路径信息
	String getQueryString()				返回 URL 中的查询字符串
	String getRemoteUser()				返回提出请求的用户名
	
	String getRequestedSessionId()		返回会话的 ID
	
	String getContextPath()				返回项目的根路径 ，例如项目名称为 test, 将返回  "/test"
	Servlet getServletPath()			返回 URL 中标识 servlet 的那一部分,   如果在 Spring 中， @RequestMapping(path = { "/index"}) 返回 "/index"
	String getRequestURI()				返回 URL	getContextPath+getServletPath
	StringBuffer getRequestURI()		返回 URL
	
	boolean isRequestedSessionIdFromCookie()		如果 cookie 包含会话ID，就返回true；否则返回 false
	boolean isRequestedSessionIdFromURL() 			如果 URL 包含会话ID，就返回true；否则返回 false
	boolean	isRequestedSessionIdvAalid()			在当前的会话上下文中，如果请求的会话ID 有效，就返回 false
	

# HttpServletResponse 接口
	void addCookie(Cookie cookie)			将 cookie 添加到 HTTP 响应中
	boolean containsHeader(String field)	如果 HTTP 响应标题包含名为field 的字段，就返回 true
	String encodeURL(String url)			判定会话ID 是否必须编码到url 标识的 URL 中。如果是，就返回修改后的 url 版本；否则返回 url 版本；
											否则返回返回 url。 由servlet 产生的所有 URL, 都应当由这个方法进行处理
											
	String encodeRedirectURL(String url)	判定会话ID 是否必须编码到url 标识的 URL 中。如果是，就返回修改后的 url 版本；否则返回 url 版本；
											否则返回返回 url。传递给 sendRedirect() 方法的所有URL， 都应当这个方法进行处理
	
	void sendError(int c)
		throws IOException					将错误代码 c 发送到客户端
		
	void sendError(int c, String s)			将错误代码 c 和 s 发送到客户端
		throws IOException
	
	void sendRedirect(String url)
		throws IOException					将客户端重定向到 url
	
	void setDateHeader(String field, long msec)
		将 field 添加到标题中，并且字段的值等于msec
	
	setHeader(String field, String value)	将 field 添加到标题中，并且字段的值等于 value
	setIntHeader(String field, String value)
	
	void setStatus(int code)				将这个响应状态码设置为 code
	
	
# HttpSession 接口
	HttpSession 接口使 servlet 能够读取并且写入与 HTTP 会话关联的状态信息。
	如果会话已经无效， 那么所有这些方法都会抛出 IllegalStateException 异常
	
	void invalidate()						使会话无效，并将之从上下文中移除
	
	void setAttribute(String attr, Object val)
	Object getAttribute(String attr) 		返回与attr 传递的名称相关联的值，如果没有找到 attr,就返回null
	void removeAttribute(String attr)		从会话中移除 attr 指定的特性
	
	Enumeration<String> getAttributeNames()	返回与会话关联的特性名称的枚举
	long getCreation Time()					返回这个会话创建的时间，毫秒数
	String getId()							返回会话ID
	long getLastAccessedTime()				返回客户端最后一次请求的时间
	boolean isNew()							如果服务器创建了会话，并且客户端还没有访问，就返回true
	
	void setMaxInactiveInterval(time)		设置 session 的有效时间， 以秒为单位
	
	
. 设置 session 的默认有效时间
	// web.xml
	<session-config>
        <session-timeout>30</session-timeout>
    </session-config>
	
	
# Cookie 类
	Cookie 类封装了 cookie,  cookie 保存在客户端，并且包含状态信息。可以保存用户信息
	通过 HttpServletResponse 接口的 addCookie(), servlet可以向用户机器写入cookie。随后 用于 cookie 的数据将被包含到
	HTTP 响应的头中，HTTP 响应被发送到浏览器。
	
	每个cookie 都会包括：
		cookie 的名称
		cookie 的值
		cookie 的截止日期
		cookie 的域和路径
		
		/*
			如果没有为cookie指定截止日期那么cookie 在当前浏览器会话结束时删除
			cookie 的域和路径决定了何时将cookie 包含于 HTTP 请求的头中
			如果用户输入了域和路径与这些值相匹配的URL， 那么cookie 会被提供给浏览器
		*/
		
	构造函数：
		Cookie(String name, String value)
	
	
	方法：
		Object clone()				返回这个对象的副本
		String getComment()			返回注释
		void setComment(String c)	将注释设置成c
		
		String getDomain()			返回域
		void setDomain(String d)	将域设置成d
		
		String getName()			返回名称
		
		boolean getSecure()			如果 cookie 是安全的，就返回 true
		void setSecure(boolean secure)
		
		String getValue()			返回值
		void setValue(String v)
		
		int getVersion()			返回版本
		void setVersion(int v)
		
		boolean isHttpOnly()		如果cookie具有HttpOnly 特性，就返回true
		void setHttpOnly(boolean httpOnly)
			如果 httpOnly 是true， 就将 HttpOnly 特性添加到 cookie；
			如果httpOnly 是false, 就删除 HttpOnly 特性
		
		int getMaxAge()				返回最大年龄（s）
		void setMaxAge(int secs)	将cookie 的最大年龄设置为 secs, 只是指多少秒后删除 cookie
		
		void setPath(String path)
		String getPath()			返回路径
	
	
	
# HttpServlet 抽象类
	HttpServlet 类扩展了 GenericServlet 抽象类。当开发接受并处理 HTTP 请求的servlet 时，通常使用该类。
	
	方法：
	void doDelete(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException		处理 HTTP DELETE 请求
	
	void doGet(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException		处理 HTTP GET 请求
	
	
	void doHead(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException		处理 HTTP HEAD 请求
	
	void doOptions(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException		处理 HTTP OPTIONS 请求
	
	
	void doPost(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException
	
	
	void doPut(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException
	
	
	void doTrace(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException
	
	long getLastModified(HttpServletRequest req) 返回请求资源的最后一次修改时间
	
	void service(HttpServletRequest req, HttpServletRequest res)
		throws IOException, ServletException	当这个servlet 的 HTTP 请求到达时，服务器调用这个方法，参数分别提供对 HTTP 请求和响应的访问
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	