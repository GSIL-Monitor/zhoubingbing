MySQL57

username:root
password:123456

mysql57 安装。

# 添加环境变量
	MYSQL_HOME: C:\Program Files\MySQL\MySQL Server 5.7

# 编辑path系统变量
	%MYSQL_HOME%\bin

# 启动和终止服务
	net start mysql57
	net stop mysql57

# 使用终端
	mysql -uroot -p123456

# 使用 mysql command line client
	输入密码即可
	
# 命名规则
	不允许有空格
	首字母不能使数字和&符号
	长度小于128位
	
# command line client 命令
	; \g \G 结束命名行
	
	.创建删除数据库
		create database base_name
		drop database base_name
		
	.查看数据库
		show databases	
		
	.选择数据库
		use base_name	
		
	.查看储存引擎
		show engines
		
	查看支持的数据引擎
		show variables		
			show variables like 'hava%'  显示所有以have开通的数据引擎

	.查看储存字段
		help int


# 数据类型
	.整数类型
		TINYINT
		SMALLINT
		MEDIUMINT
		INT INTEGER
		BIGINT

	.浮点数类型
		FLOAT
		DOUBLE
		
	.日期和时间类型
		DATE
		DATETIME
		DATESTAMP
		TIME
		YEAR

	.字符串类型
		CHAR(M)			M 为0-255之间的整数
		VARCHAR(M)		M 为0-65535之间的整数
		
		// 可以储存二进制数据
		BINARY(M)		长度为 0-M 
		VARBINARY(M)	长度为 0-M 
		
		
		TINYTEXT
		TEXT
		MEDIUMTEXT
		LONGTEXT
		
		// 可以储存二进制数据
		TINYBLOB
		BLOB
		MEDIUMBLOB
		LONGBLOB
		
# 表的操作---------------------------------------------
.创建表
	选择数据库
	create table table_name(
		属性名 数据类型,
		属性名 数据类型
	);
	
.删除表
	drop table table_name
	
.更改表名
	alter table old_name rename new_name;

.查看表
	describe table_name
	desc	 table_name
	
	
	+-----------------+--------------+------+-----+---------+----------------+
	| Field           | Type         | Null | Key | Default | Extra          |
	+-----------------+--------------+------+-----+---------+----------------+
	| id              | int(11)      | NO   | PRI | NULL    | auto_increment |
	| user_name       | varchar(255) | YES  |     | NULL    |                |
	| password        | varchar(255) | YES  |     | NULL    |                |
	| score           | int(11)      | YES  |     | NULL    |                |
	| last_logon_time | bigint(20)   | YES  |     | NULL    |                |
	+-----------------+--------------+------+-----+---------+----------------+

.查看表详细定义
	show create table table_name

	CREATE TABLE `table_name` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `user_name` varchar(255) DEFAULT NULL,
	  `password` varchar(255) DEFAULT NULL,
	  `score` int(11) DEFAULT NULL,
	  `last_logon_time` bigint(20) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB AUTO_INCREMENT=1351 DEFAULT CHARSET=utf8


.添加 删除  表字段
	// 表的最后处添加字段
	alter table table_name add 属性名 数据类型
	// 表的第一个位置添加字段
	alter table table_name add 属性名 数据类型 first
	// 表的指定位置添加字段
	alter table table_name add 属性名 数据类型 after sit_属性名
	// 删除表的字段
	alter table table_name drop 属性名

.修改字段数据类型
	alter table table_name modify 属性名 数据类型

.修改字段名和属性
	alter table table_name change old_属性名 new_属性名 数据类型

.修改字段排序
	alter table  table_name modify 属性名 数据类型 first | after 2 
		2表示将字段调整到属性名2个字段位置之后


# 操作表的约束---------------------------
	create table table_name(
	
		.不为空
		属性名 数据类型 not null, 
		
		.指定默认值
		属性名 数据类型 default null | '' | any,
		
		.设置唯一约束（unique, uk）
		属性名 数据类型 unique,
		/*
			uk_loc 为属性loc自定义的别名
			
			loc int,
			constraint [uk_loc] unique(loc)
		*/
		
		.设置主键(primary key, pk)
		属性名 数据类型 primary key,
		/*
			pk_id 为属性 id 自定义的别名
			
			id int,
			constraint [pk_id] primary key(id)
		*/
		
		.多字段主键
		constraint [pk_id_loc] primary key(id,loc)
		
		.设置字段值自动增加 - auto_increment
		id int primary key auto_increment
		
		.设置键外约束（foreign key, fk）
		constraint fk_deptno foreign key(deptno) references 父表名（字段名）
		
	);

# 索引的操作----------------------------------------------------
.适合创建索引的情形
	经常被查询的字段，即在 where 子句中出现的字段
	在分组的字段， 即在 group by 子句中出现的字段
	存在依赖关系的子表和父表之间的联合查询，即主键或外键字段
	设置唯一完整性约束的字段

.创建索引
	index|key [索引名](字段名 [(长度)] [asc|desc])
	索引名即别名 命名格式 index_属性名
	asc 为升序排序
	desc 为降序排序
	
	create table test(
		deptno int,
		dname varchar(20),
		loc varchar(40),
		index index_deptno(deptno)
    );
	// 多列索引 
	index|key [索引名](字段名 [(长度)] [asc|desc]),(字段名 [(长度)] [asc|desc])
	
	// 唯一索引
	//当设置表中的某个字段为主键或唯一值约束时，系统就会自动创建关联该字段的唯一索引
	create table test(
		deptno int,
		dname varchar(20),
		loc varchar(40),
		nuique index|key [索引名] (字段名 [(长度)] [asc|desc])
    );
	
	
	
.查看表索引 执行SQL 语句 EXPLAIN
	EXPLAIN select * from 表名 where 属性名=值\G
	
	
.在已经存在的表上创建普通索引
	create index 索引名 on 表名 (属性名 [(长度)] [asc|desc])
	
	// 唯一索引
	create nuique index 索引名 on 表名 (属性名 [(长度)] [asc|desc])
	
.通过 SQL 语句 alter table 创建普通索引
	alter table 表名 add index|key [索引名] (字段名 [(长度)] [asc|desc])
	
	// 唯一索引
	alter table 表名 add nuique index|key [索引名] (字段名 [(长度)] [asc|desc])


.创建全文索引， 只能在存储引擎为 MyISAM 的数据库表上创建全文索引
	create table test(
		...
		fulltext index|key [索引名] (字段名 [(长度)] [asc|desc])
    );
	
	create fulltext index 索引名 on 表名 (属性名 [(长度)] [asc|desc])
	alter table 表名 add fulltext index|key [索引名] (字段名 [(长度)] [asc|desc])

.删除索引
	drop index 索引名 on 表名


# 创建视图--------------------------------------------------------
	create view 视图 as select 属性名,属性名 from 表名

.查看视图 
	select * from 视图

.封装实现常量查询的视图
	create view view_test4
		as 3.1415926;
	
.封装了使用聚合函数创建视图
	sum求和、 min 、max 、count总条数、order_by排序
	
	create view 视图 as sum(属性名) from 表名
	create view 视图 as 属性名	from 表名 order_by 属性名 asc|desc

	
	
/*
	t_student
		+----------+-------------+------+-----+---------+-------+
		| Field    | Type        | Null | Key | Default | Extra |
		+----------+-------------+------+-----+---------+-------+
		| id       | int(11)     | YES  |     | NULL    |       |
		| name     | varchar(12) | YES  |     | NULL    |       |
		| sex      | char(12)    | YES  |     | NULL    |       |
		| group_id | int(11)     | YES  |     | NULL    |       |
		+----------+-------------+------+-----+---------+-------+
	t_group
		+-------+-------------+------+-----+---------+-------+
		| Field | Type        | Null | Key | Default | Extra |
		+-------+-------------+------+-----+---------+-------+
		| id    | int(11)     | YES  |     | NULL    |       |
		| name  | varchar(12) | YES  |     | NULL    |       |
*/
.封装了多表连接查询
	create view view_test4
	as 
	select s.name from t_student as s,t_group as g 
	where s.group_id = g.id and g.id=2;

.封装了表外连接查询语句视图（left join 和 right join）
	create view view_test4
	as
	select s.name from t_student as s left jion t_group 
	as g on s.group_id=g.id
	where g.id=2;

.封装了实现子查询相关查询语句的视图
	create view view_test4
	as
	select s.name
	from t_student as s
	where s.group_id in (select id from t_group);

.封装了记录联合（union 和 union all）
	create view view_test4
	as
	select s.name from t_student
	union all
	select id,name from t_group;













