
//RegExp􏲕􏲖---------------------------------------


	var expression = / pattern / flags ;
	
	flags:
		.g 全局模式， 既模式将被用于所有字符串， 而非在发现第一个匹配项时立即停止
		.i 忽略字符串的大小写
		.m 多行匹配
	
	元字符： ( [ { \ ^ $ | ) ? * + .]} 
	
	
	var pattern1 = /[bc]at/i;  //字面量
	var pattern2 = new RegExp("[bc]at", "i"); //构造函数
	
	pattern1 和 pattern2 是俩个完全相等的 正则表达式， 需要注意的是，传递给RegExp 构造函数的俩个参数都是字符串，所以在某些情况下对字符进行双重转义。 所有元字符都必须双重转义， 对已经转义过的字符也是如此 如 \n (在字符串中通常被转义成\\， 而在正则表达式字符串中就会变成\\\\)
	
	
	字面量				构造函数
	/\[bc\]at/			"\\[bc\\]at"
	/\.at/ 				"\\.at" 
	/\d.\d{1,2}/		"\\d.\\d{1,2}"
	/\w\\hello\\123/	"\\w\\\\hello\\\\123" 
	
在 ECMAScript 3 中：
	var re = null, i

 	for (i=0; i < 10; i++){
		re = /cat/g;
		re.test("catastrophe");
	}
	
	第一次会匹配成功， 其它都会失败， 是因为在循环中它们共享了一个RegExp实例， ECMAScript 5 中修复了此问题； IE9+

#RegExp 实例属性--------------------------------------------
	global 表示是否设置了 g 标志
	ignoreCase 表示是否设置了 i 标志
	multiline 表示是否设置了 i 标志
	lastIndex 开始搜索下一个匹配字符位置， 从0开始
	source	按照字面量形式 的字符串返回


＃RegExp 实例方法--------------------------------------------
RegExp 对象的主要方法是 exec(), 该方法是专门为捕获数组而设计的。 exec()接受一个 应用模式的字符串 作为参数，
返回一个匹配项的数组， 在没有匹配项 为null 。 在数组中第一项与整个模式匹配到的的字符串（ 能够成功匹配的 ），
其它是捕获组匹配的字符串（如果没有捕获组， 则改数组只包含一项）

返回的虽然是 Array 实例， 但包含俩个额外的属性， 
	input返回 作为参数的字符串  
	index返回开始匹配的位置

var text = "amom and dad and baby"; 
	var pattern = /mom( and dad( and baby)?)?/gi; 
	
	var matches = pattern.exec(text); 
	alert(matches.index); // 1 
	alert(matches.input); // "smom and dad and baby" 
	alert(matches[0]); // "mom and dad and baby" 
	alert(matches[1]); // " and dad and baby"
	alert(matches[2]); // " and baby" 
	
text() 接受一个 应用模式的字符串 作为参数， 返回Boolean ,
	pattern.test(text)










































