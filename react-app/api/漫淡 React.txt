
// 合成事件------------------------------------------
	onClick={this.handelClick.bind(this, agr0)}
	
	
	constructor(props) {
		super(props);
		this.handelClick = this.handelClick.bind(this)
	}
	// or 构造器内声明
	handelClick(agr0, proxy, event) {
		
	}
	
	// or 箭头函数绑定
	handelClick = ( agr0, proxy, event ) => { }
	
	/*	
		
		onClick={this.handelClick.bind(null,'agr0')}
		
		此处的 bind 的this可以是null
		
	*/


// 在react 中使用原生事件
	componentDidMount(){
		this.refs.button.addEventListener('click',e=>{
		
		})
	}
	
	// 卸载
	componentWillUnmount(){
		this.refs.button.removeEventListener('click')
	}


// 合成事件 和原生事件的混合

合成事件 的 event.stopPropagation(); 不能阻止原生事件的冒泡
/*
	componentDidMount(){
		document.body.addEventListener('click',function(event){
		
		}
		
	}
	
	handelClick = ( agr0, proxy, event ) => {
		event.stopPropagation();
		// 是不能阻止 document.body 点击事件的
	}
	
	
*/

反而原生事件 的 event.stopPropagation(); 可以阻止合成事件
/*
	<button onClick={this.handelClick.bind(this, agr0)} />


	componentDidMount(){
		this.refs.button.addEventListener('click',e=>{
			event.stopPropagation();
		})
	}
	// 合成事件 被阻止
	handelClick = ( agr0, proxy, event ) => {
	
	}
	
*/


// 通过 e.target 判断来避免
	componentDidMount(){
		document.body.addEventListener('click',function(event){
			if(e.target && e.target.matches('button.code') ){
				return;
			}
		}
	}




// 表单---------------------------------------------------------------

/*
	表单中几个重要的属性 
	value 
	checked
	selected
	
	onChange 和 DOM 3 中定义的所有表单事件
*/

	handleInputChange = e =>{
		this.setState({
			name: e.target.value
		})
	}	

	render() {
	
		const { name } = this.state;
		return (
			<div>
				<input value={name} type="text" onChange={this.handleInputChange} />
			</div>
		)
	}


// 单选框
	constructor(props) {
		super(props);
		
		this.state = {
			name: '',
			
		}
	}
	handleInputChange = e =>{
		this.setState({
			name: e.target.value
		})
	}
	
	render() {
	
		const { name } = this.state;
		return (
			<div>
			<input type="radio" value='bingbing' checked={name==='bingbing'} onChange={this.handleInputChange} />
			</div>
		)
		
		
	}

// 复选框
	constructor() {
		this.state = {
		 coffee: [],
			
		}
	}
	handleInputChange = e =>{
		const { checked, value } = e.target;
		let { coffee } = this.state;
		

		if(checked && coffee.indexOf(value) === -1 ){
			coffee.push(value);
			//console.log(coffee)
		}else{
			coffee =  coffee.filter(i => i !== value)
		}

		this.setState({
			coffee
		})
	}
	render() {
	
		const { name } = this.state;
		return (
			<div>
			r
				<input type="checkbox" value='zhangsan' checked={coffee.indexOf('zhangsan') !== -1} onChange={this.handleInputChange} />
			</div>
		)
		
	}


// 下拉框
	
	constructor() {
		this.state = {
			select: ''
		}
	}
	handleInputChange = e => {
		this.setState({
			select: e.target.value
		})
	}
	render() {
	
		const { name } = this.state;
		return (
			<div>
				<select value={select} onChange={this.handleInputChange}>
					<option value="">请选择</option>
					<option value="beijing">北京</option>
					<option value="shanghai">上海</option>
				</select>
			</div>
		)
		
	}


// 下拉框 多选

	constructor() {
		this.state = {
			select: []
		}
	}
	handleInputChange = e => {
		const { options } = e.target;
		
		
		const select = Object.keys(options)
						.filter(i => options[i].selected === true)
						.map(i => options[i].value) 
		/*
			options 数组， Object.keys(options) 返回的是一个 序列号组成的数组： ['0', '1', '2', '3']
		*/

		
		this.setState({
			select 	
		})
	}
	render() {
	
		const { select } = this.state;
		return (
			<div>
				<select multiple={true} value={select} onChange={this.handleInputChange}>
					<option value="">请选择</option>
					<option value="beijing">北京</option>
					<option value="shanghai">上海</option>
					/*
						<option value="beijing" selected={ select.indexOf('beijing') @== -1 }>北京</option>
					*/
				</select>
			</div>
		)
		
	}

// 以上为受控组件
	
	受控组件表单的验证
	
	handleInputChange(e){
		this.setStage({
			value: e.target.value.subString(0, 100).toUppercase();
		})
	}

// 为受控组件 添加统一的绑定事件
	<input type="text" value={this.state.name}  onChange={this.handleInputChange.bind(this, name)} />
	
	handleInputChange(agr0, event){
	const { value } = event.target;
		this.setState({
			[agr0] : value
		})
		// 如果是复杂的表单 需要 switch case
	}


// 非受控组件
	
	constructor(props) {
		super(props);
		this.state = {
			name: 'zhoubb'
		}
	}
	componentDidMount() {
		// 在非受控组件中 表单的值不会随状态的改变发生变化
		this.setState({
			name:'zhou'
		})
	}

	handleSubmit(){
		e.preventDefault();
		const { value } = this.refs.name;
		// ...
	}
	
	
	// 这里显示的是 zhoubb
	<input type="text"  defaultValue={this.state.name} />


// 样式处理------------------------------------------------------------------

const style = {
	color: white,
	//  没有 - 符号 驼峰命名
	backgroundImage:`url(${src})`,
	// 前缀大些
	WebkitTransition: 'all',
	// ms 是唯一要小些的浏览器前缀
	msTransition: 'all',
	// 单位 px 会自动补全
	height: 100
	
}

const componnet = <Component style={style} />

// 使用 classNames 库 ---------------------------------------------------------

import classNames from 'classNames';
render(){
	const btnClass = {
		btn: true,
		btn-pressed: boolean,
		btn-over: boolean
	}

	<div>
	<button class={btnClass} >button</button>
	</div>
}


// 启用 CSS Modules---------------------------------------------------------

/* webpack.config.js */
loader: "style-loader!css-loader?modules&localIdentName=[path][name]-[local]-[hash:base64:5]"

/* button.css */

// 默认为局部样式
	.normal{}
	.disabled{}

// 局部样式
	:local{
		.name{}
	}
	:local(.name){
		color:red
	}

// 全局样式
	:global{
		.name{}
	}
	:global(.name){
		color:red
	}

// 通过 composes 来组合样式
	.base{}

	// 编译后变成俩个 class : button-base-hash  button-normal-hash
	.normal{
		composes: base;
		composes: $primary-color from 'primary.css';
		color: red;
	}

// 通过 composes 来引入样式
	.normal{
		/*
			primary.css
			{
				primary-color{
					color: red;
				}

			}
		*/
		composes: $primary-color from 'primary.css';
		color: red;
	}

// 实现 css 与 js 变量共享
	／*  config.scss *／
	$primary-color: #333

	:export{
		primaryColor: $primary-color;
	}

	／*  *.scss *／
	import style from config.scss
	style.primaryColor === '#333'




// css modules 只转变类选择器， 可以通过向 DOM 添加 data-role 属性 覆盖局部样式 
	[data-role="role-name"]: {
		
	}


/* *.js */
import styles from 'button.css'

console.log(styles) =>
/* 
	{
		normal: button-normal-abcwe
		disabled: button-normal-vadde
	}

	// 名称 生成规则
	button: button.css
	normal: .normal
	abcwe: [hash:base64:5]

 */



// 在react 中使用

import classNames from 'classNames';

const cx = classNames({
	normal: boolean,
	disabled: boolean
})
render(){
	return(
		<div>
			<p className={styles.normal}></p>
			<p className={styles[cx]}></p>
		</div>
	)
}
/*
	如果不想写 styles.* 的话 
	import CSSModules from 'react-css-modules';

	class ClassName extend{
		remder(){
			return(
				<p styleName={normal}></p>
			)
		}
	}
	export default CSSModules(ClassName, styles)
*/


// 组件间的通信------------------------------------------------------------------------------------------
/* App.js */

handleItemChange = () => {}
render(){
	return (
		<List list={[text:1, text:2]} handleItemChange={this.handleItemChange} />
	)
}

/* List.js */

// 设置默认值
static defaultProps={
	...
	handleItemChange: ()=>{}
}

onItemChange(entry){
	...

	// 发射 父级事件
	this.props.handleItemChange(entry)
}

render(){
	return(
		<div>
			{array.map((entry, index) => {
				<ListItem onChange="this.onItemChange.bind(this.entry)"/>	
			})}
		</div>
	)
}

/* ListItem.js */

render(){
	return(
		<div>
			// 发射 父级事件
			<input type="text" onChange={this.props.onChange} />
		</div>
	)
}

// 跨级组件通信--------------------
	.不建议用于 组件事件通信中
	.主要用于全局信息不会改变， 如界面主题 用户信息	

	在组件中定义
	static childContextTypes = {
			color: React.PropTypes.string
		}
	getChildContext(){
		return {
			color: 'red'
		}
	}

	// 子组件中 
	static contextTypes = {
		color: React.PropTypes.string
	}
	
	console.log(this.context.color)
	



// 没有嵌套关系的组建通信 可以通过 events 订阅来实现--------------------

var emitter = new events.EventEmitter();
/* App.js */
import emitter from "./events"


componentDidMount(){
	emitter.on('some_event',function(){});
}

// 取掉订阅
componentWillUnmount(){
	emitter.removeListener('some_event');
}

// 在 其他组件中使用
emitter.emit('some_event'， agr0, agr1);


// 高阶组件 ----------------------------------------------------------
1.
/* wrappedComponent.js */
import React, { Component } from 'react';

const MyContainer = (WrappedComponent) => {
	return class extends Component{
		render(){
			console.log(1)
			const np = {
				name:{
					id:'1212',
					name: 'is name'
				}
			}
			// 这里的 this.props 是 调用时 给值 <Chlid title:"" />
			// 这里的 {...np} 会传递给 调用（ Chlid ）组件
			
			// 这里相当于 普通调用组件
			return <WrappedComponent {...this.props} {...np} />
		}
	}
}

export default MyContainer;



/* Chlid.js */
class Chlid extends Component {
	constructor(props) {
		super(props);
		this.state = {
			props: props
		}
	}
	
	static defaultProps = {
		title: 'this is title',
		'data-text': 'this is text'
	}
	
	// 这里是最终显示 dom
	render() {
		console.log(2)
		return (
			<div  {...this.props.name}>
				Child
			</div>
		)
	}
}

export export default MyContainer(Chlid);


/* App.js */

<Chlid title:"" />



// 在高阶组件中可以 抽象state 

/* wrappedComponent.js */
import React, { Component } from 'react';

const MyContainer = (WrappedComponent) => {
	
	constructor(props){
		super(props);
		this.state = {
			name:''
		}
		this.handleInputChange = this.handleInputChange.bind(this)
	}
	
	handleInputChange(e){
		this.setState({
			name: e.target.value
		})
	}

	return class extends Component{
		const np = {
			name: {
				value: this.state.name,
				onChange: this.handleInputChange
			}
		}
		render(){
		return <WrappedComponent  {...np}/>
		}
	}
}

export default MyContainer;

/* Chlid.js */
class Chlid extends Component {
	render() {
		return (
			<imput {...np.name}/>
		)
	}
}

export export default MyContainer(Chlid);


2. 方向继承

/* wrappedComponent.js */
const MyContainer = (WrappedComponent) => {
	return class extends WrappedComponent{
		componentDidMount(){
			console.log(this.props)
		}
		render(){
			return super.render();
			/*
				在这里可以劫持渲染
				<div>
					<p/>
					{return super.render()}
				</div>
			*/
		}
	}
} 

export default MyContainer;

























































