
//react 安装
npm install -g create-react-app
create-react-app react
cd react/
npm start



//react 组件的构建---------------------------------------------

#React.createClass
	const App = React.createClass({
		getDefaultProps(){
			return {
				title: 'this is title',
				text: 'this is text'
			}
		},
		
		static defaultProps = {}
		
		render(){
			const {title, text} = this.props;
			return (
				<button type="button" title={title}>
					<span>{text}</span>
				</button>
			)
		}
	})


# ES6 classes
	class App extends Component{
		//默认属性
		static defaultProps = {
			title: 'this is title',
			text: 'this is text'
		}
		
		//属性类型
		static propTypes = {
			title:  React.PropTypes.string,
			text:  React.PropTypes.text
		}
		
		constructor(props){
			super(props);
			
			this.state ={
				name: 'bingbing',
				age: 29
			}
		}
		
		//在render() 方法之前执行
		componentWillMount(){ }
		
		//在render() 方法之后执行
		componentDidMount(){ }
		
		render(){
			const {title, text} = this.props;
			return (
				<button type="button" title={title}>
					<span>{text}</span>
				</button>
			)
		}
		
	}


# 无状态函数
	无状态函数值传入 props 和 context 两个参数； 不存在state和生命周期方法
	不过propTypes he defaultProps 还是可以通过向方法设置静态属性来实现的
	//它创建时始终保持了一个实例，避免了不必要的检查和内存分配，做到了内部优化
	
	function App(data, context){
		return (
			<button type="button" title={data.title}>
				<span>{data.text}</span>
			</button>
		)
	}
	
	/*
		//向方法设置静态属性 
		App.defaultProps = {
			title: 'this is title',
			text: 'this is button'
		}
		
		App.propTypes = {
			title: React.PropTypes.string | React.PropTypes.number | React.PropTypes.func | React.PropTypes.node 
			
		} 
		
	*/
	
	export default App;
调用：
	ReactDOM.render(<App title="sd" text="button"/>, document.getElementById('root'));



//react 数据流


#state
	constructor(props){
		this.state ={
			name: 'bingbing',
			age: 29
		}
		//内部改变状态
		this.handelClick = this.handelClick.bind(this)
	}

	handelClick(e){
		this.setState({
			name: 'zhoubb'
		})
		
	}

#子组件 prop
在React 中有一个重要且内置的prop --chlidren 属性， 它代表子组件的集合。

	<Tabs classPrefix={'tabs'} defaultActiveIndex={0}>
		<TabPane key={0} tab={'tab1'}> 1 <TabPane/>
		<TabPane key={1} tab={'tab2'}> 2 <TabPane/>
		<TabPane key={2} tab={'tab3'}> 3 <TabPane/>
	</Tabs>

	chlidren 可以根据传入的数量来决定是否是数组类型， 上述调用TabPane 组件过程中， 翻译过来既是：
	
	<Tabs classPrefix={'tabs'} defaultActiveIndex={0} children={[
		<TabPane key={0} tab={'tab1'}> 1 <TabPane/>,
		<TabPane key={1} tab={'tab2'}> 2 <TabPane/>,
		<TabPane key={2} tab={'tab3'}> 3 <TabPane/>
	]} />

通过 React.Children.map 方法遍历子节点 reduce filter 等， forEach不能这么使用











#propTypes
在开发环境下会校验props 的类型， 如果不匹配则会 warning
	static propTypes ={
		propName: React.PropTypes.string | React.PropTypes.number | React.PropTypes.func | React.PropTypes.node
				  React.PropTypes.oneOfType([ React.PropTypes.string , React.PropTypes.number ])
	
	}




//react 的生命周期---------------------------------------------

1.组件的挂载
	//render 之前
	componentWillMount(){}
	
	//render 之后
	componentWillMount(){}

2.组件的卸载
	componentWillUnmount(){}	

3.数据更新过程
	//父组件的prop 发生改变时触发已更新 子组件state
	
	/*
	
		//父组件
		class Parent extends Component{
			constructor(props){
				super(props);
				this.handelClick = this.handelClick.bind(this)
				
				this.state ={
					props: props
				}
			}
			handelClick(e){
				e.preventDefault();
				this.setState({
					props: {
						title: 'title change'
					}
				})
			}
			
			render(){
				const {title, text} = this.props;
				return (
					<div>
						<button type="button" title={this.state.props.title} onClick={this.handelClick}></button>
						<Chlid title={this.state.props.title} />
					</div>
					
				)
			}
			
		}
		
		
		//子组件
		需要props 绑定到 组件状态中去
		constructor(props){
			super(props);
			this.state ={
				props: props
			}
		}
		componentWillReceiveProps(nextProps){
			//do something...
		}
		
		render(){
			return (
				<div title={this.state.props.title}>
					Child
				</div>
				
			)
		}
	
	*/
	componentWillReceiveProps(nextProps){
		
		if('title' in nextProps){
			this.setState({
				props: {
					title: nextProps.title
				}
			})
		}
	}
	
	//默认返回 true，false则不渲染视图
	shouldComponentUpdate(nextProps, nextState){
		// do something...	
		return true;
	};
	
	//更新视图之前
	componentWillUpdate(nextProps, nextState){}

	//更新视图之后
	componentDidUpdate(nextProps, nextState){}










































