//observable————————————————————————————————————————————————————————————————————————
	它是一个描述 未来订阅值或事件的调用的集合
	var observable = Rx.Observable.create(function (observer) { 
		observer.next(1); 
		observer.next(2);
		observer.next(3); 
		setTimeout(() => { observer.next(4); observer.complete(); }, 1000); 
	});
	
	observable.subscribe({
		next: x => console.log('got value ' + x),
		error: err => console.error('something wrong occurred: ' + err),
		complete: () => console.log('done')
	})
	
	取消订阅
	observable.unsubscribe();

	
#静态方法

bindCallback
	转变一个具有 callback 函数为一个函数(该函数参数 去除callback, 该函数返回一个Observable)
	bindCallback(func: function, selector?: function, scheduler?: Scheduler):		function(...params: *): Observable
	
	bindCallback 方法返回一个函数 参数与func去除callback 参数保持一致
	func		函数的最后一个参数为 回掉函数， subscribe 的第一个参数会被当作 callback 执行
	selector 	该函数参数为callback(agr1,agr2) 传入的参数， 它return 的值 可以改变 subscribe( x=>{ console.log(x) }), x 的值；
	scheduler	// 为调试程序，用于测试
	
	var json = function (url, agr2, callback) {
		callback('value')
	}
	
	const boundSomeFunction = Rx.Observable.bindCallback(json,function(value){
		return 'result2'
	});
	// ('api/*', 'agr2') 参数要保持一致
	boundSomeFunction('api/*', 'agr2').subscribe(
		values => console.log(values) , // 的第一个参数会被当作 func函数的 callback参数 执行
		error => console.log(error),
		complete => console.log(complete)
	)
	
bindNodeCallback
	// Converts a Node.js-style callback API to a function that returns an Observable.
	bindNodeCallback(func: function, selector: function, scheduler: Scheduler):		function(...params: *): Observable

combineLatest
	把iterator generate 接口的参数，每一个最后一个值（不包括 最后一个iterator）， 和最后一个iterator参数分别合并
	combineLatest(observable1: ObservableInput, observable2: ObservableInput, project: function, scheduler: Scheduler): Observable
	
	var ob = Rx.Observable.combineLatest([11, 22, 33], [1, 2, 3], [7, 8], function (a, b, c) {
		console.log(a, b, c)
		return [a, b, c]
	})
	ob.subscribe(
		x => console.log(x)
		//  [33, 3, 7] 
		//  [33, 3, 8]
	)
	
concat
	返回 Observable ， 把iterator generate接口的值，逐个输出
	concat(input1: ObservableInput, input2: ObservableInput, scheduler: Scheduler): Observable
	
	var ob = Rx.Observable.concat([11, 22, 33], [1, 2, 3], [7, 8])
	ob.subscribe(
		x => console.log(x)
		// 11
		// 22
		// 33
		// ...
	)
	
create
	create(onSubscription: function(observer: Observer): TeardownLogic): Observable
	
	
defer
	defer(observableFactory: function(): SubscribableOrPromise): Observable
	
empty
	empty(scheduler: Scheduler): Observable
	
forkJoin
	forkJoin(sources: *): any
	

	
fromEvent
	给dom元素 指定事件，订阅后即绑定事件
	fromEvent(target: EventTargetLike, eventName: string, options?: EventListenerOptions, selector?: SelectorMethodSignature<T>): Observable<T>
		EventListenerOptions: boobean| { capture?:boobean; passive?:boobean; once?:boobean;  }
		
		SelectorMethodSignature
			function fnName<T>(agr: T): T {
				// do something ...
				return arg;
			}
	
	
	var el = Rx.Observable.fromEvent(document.querySelector('button'), 'click');
	el.subscribe(event => console.log(event));


from
	from(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>
		ObservableInput 可以是 数组 | iterator | generate | promise
	
	var result = Rx.Observable.from(array);
	result.subscribe(
		x => console.log([10, 20, 30])
	);
	// 10 20 30
	
fromEventPattern
	fromEventPattern(addHandler: function(handler: Function): any, removeHandler: function(handler: Function, signal?: any): void, selector: function(...args: any): T): Observable<T>
	
	var ob = Rx.Observable.fromEventPattern(function (e) {
		// e => ƒ (e) { subscriber.next(e); }
		e('www')
	})
	ob.subscribe(
		x => console.log(x)
	)

fromPromise
	转变 Promise 为 Observable
	fromPromise(promise: Promise<T>, scheduler: Scheduler): Observable<T>
	
	var p = new Promise(function (resolve, reject) {
		reject('ok c');
	})

	var ob = Rx.Observable.fromPromise(p)
	ob.subscribe(
		x => console.log('resolve'),
		x => console.log('reject')
	)

interval
	interval(period: number, scheduler: Scheduler): Observable
		period 为时间间隔
		
	// 返回一个能够发射(返回)0， 1， 2， 3...， n数字的Observable 
	var ob = Rx.Observable.interval(1000)
	ob.subscribe(
		x => console.log(x)
	)
	
	// ob.unsubscribe()

merge
	// 把多个 observable 或有 iterator 接口的 对象合并一个 observable；
	merge(observables: ...ObservableInput, concurrent: number, scheduler: Scheduler): Observable
		concurrent: 允许最大合并 observable 个数， 剩余的则无效， 默认无限大
		
never：
	// Creates an Observable that emits no items to the Observer
	function info() {
		console.log('Will not be called');
	}
	var result = Rx.Observable.never().startWith(7);
	result.subscribe(x => console.log(x), info, info);








	Rx.observable.of('foo','bar');  //一个或多个值->可观察对象
	Rx.Observable.from([1,2,3]);  //数组->可观察对象	//事件->可观察对象
	Rx.Observable.fromPromise(fetch('/users'))  //promise->可观察对象
	
	
	
	
	
	
	
	
	
	
	