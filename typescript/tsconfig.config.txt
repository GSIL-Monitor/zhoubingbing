

在命令行上指定的编译选项会覆盖在tsconfig.json文件里的相应选项。
	
tsconfig.json 配置如下：
{

	extends: "configs/base.json"
		tsconfig.json 文件可以利用extends属性从另一个配置文件里继承配置。
		extends 是 tsconfig.json文件里的顶级属性（与compilerOptions，files，include，和exclude一样）。
		extends 值是一个字符串，包含指向另一个要继承文件的路径。

	files: [],
		指定一个包含相对或绝对文件路径的列表。 不能使用通配符 * ? **
		files 优先级高于exclude
		如果"files"和"include"都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx），排除在"exclude"里指定的文件。
		
	outDir: [],
		指定的目录下的文件永远会被编译器排除，除非你明确地使用"files"将其包含进来
			 
	include: [ "src/**/*" ],
		include 优先级高于exclude, include中import的文件不能在 exclude 中
		
		"include" 和 "exclude" 属性指定一个文件glob匹配模式列表。
			* 匹配0或多个字符（不包括目录分隔符）
			? 匹配一个任意字符（不包括目录分隔符）
			**/ 递归匹配任意子目录
			如果一个glob模式里的某部分只包含*或.*，那么仅有支持的文件扩展名类型被包含在内（比如默认.ts，.tsx，和.d.ts， 如果allowJs设置能true还包含.js和.jsx）
		
	exclude: ["node_modules", "**/*.spec.ts" ],
		排除文件
		"exclude" 默认情况下会排除node_modules，bower_components，jspm_packages和<outDir>目录。
		
	"compileOnSave": true,
		在最顶层设置compileOnSave标记，可以让IDE在保存文件的时候根据tsconfig.json重新生成文件。
		要想支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件。
		
		
	compilerOptions:{
		
		/*
			2.7+新增
			strictPropertyInitialization: false			取消对静态属性初始化类型检查
		*/
		
		
		编译选项
		[1] 这些选项是试验性的。
		[2] 这些选项只能在tsconfig.json里使用，不能在命令行使用。
		
		
		
		/*
			如没有指定typeRoots,types 属性默认所有可见的"@types"包会在编译过程中被包含进来，
			node_modules/@types文件夹下以及它们子文件夹下的所有包都是可见的；
			./node_modules/@types/，../node_modules/@types/ 和 ../../node_modules/@types/等等。
		*/
		typeRoots: ["node_modules/@types"] 
			需要 npm install @types/node --save-dev
			如果指定了typeRoots，typeRoots下面所有的包才会被包含进来，不会向父级目录查找
		
		types : ["node", "lodash", "express"]
			如果指定了types，则只包含在typeRoots列表的特定包( "node", "lodash", "express" )， 其它包不会被引入进来
			./node_modules/@types/node，./node_modules/@types/lodash 和 ./node_modules/@types/express。
		
			"types": []来禁用自动引入@types包。
		
		allowJs: boolean
			default: false, 允许编译javascript文件。
			--allowJs
			
		checkJs: boolean
			default: false, 在.js文件中报告错误。与--allowJs配合使用。
			--checkJs
		
		allowSyntheticDefaultImports: boolean
			default:	module === "system",  允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。
			--allowSyntheticDefaultImports

			
		allowUnreachableCode: boolean
			default: false, 不报告执行不到的代码错误。
			--allowUnreachableCode	
			
		allowUnusedLabels: boolean
			default: false, 不报告未使用的标签错误。
			--allowUnusedLabels		
			
		alwaysStrict: boolean
			default: false,	以严格模式解析并为每个源文件生成"use strict"语句
			--alwaysStrict
		
		baseUrl: string
			no default, 解析非相对模块名的基准目录。
			--baseUrl
				/*
					"paths": {
						"@service/*": [
							"src/app/service/*"
						],
						"@myCommon/*": [
							"src/app/components/common/*"
						],
						"@myDirective/*": [
							"src/app/directive/*"
						]
					}
					在ts 文件中 可以 import {} from '@service/file.ts'; 
					相当于 baseUrl + @service + '/file.ts';
				*/
				
		paths: Object
			[2]	模块名到基于baseUrl的路径映射的列表。
		
		charset: string
			default: "utf8", 输入文件的字符集。
			--charset	

		declaration: boolean
			--declaration
			-d
			default: false	生成相应的.d.ts文件。	
			
		declarationDir: string
			no default, 生成声明文件的输出路径。
			--declarationDir
			
		diagnostics: boolean
			default: false,	显示诊断信息。
			--diagnostics
			
		disableSizeLimit: boolean
			default: false,	禁用JavaScript工程体积大小的限制
			--disableSizeLimit
			
		--emitBOM	boolean	false	在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。	
		
		--emitDecoratorMetadata[1]	boolean	false	给源码里的装饰器声明加上设计类型元数据。
		
		--experimentalDecorators[1]	boolean	false	启用实验性的ES装饰器。
		
		--forceConsistentCasingInFileNames	boolean	false	禁止对同一个文件的不一致的引用。
		
		--help
			-h 打印帮助信息。	

		--importHelpers	string		从tslib导入辅助工具函数（比如__extends，__rest等）
		
		--inlineSourceMap	boolean	false	生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。
		
		--inlineSources	boolean	false	将代码与sourcemaps生成到一个文件中，要求同时设置了--inlineSourceMap或--sourceMap属性。
		
		--init			初始化TypeScript项目并创建一个tsconfig.json文件。

		--isolatedModules	boolean	false	将每个文件作为单独的模块
		
		--jsx	string	"Preserve"	在.tsx文件里支持JSX："React"或"Preserve"。
		
		--jsxFactory	string	"React.createElement"	指定生成目标为react JSX时，使用的JSX工厂函数，比如React.createElement
		
		
		target: string
			default: "ES3",  指定ECMAScript目标版本"ES3"（默认），"ES5"，"ES6"/"ES2015"，"ES2016"，"ES2017"或"ESNext"。
			--target
			-t	
		
		
		module: string
			default: target === "ES6" ? "ES6" : "commonjs"
			--module
			-m		
			指定生成哪个模块系统代码："None"，"CommonJS"，"AMD"，"System"，"UMD"，"ES6"或"ES2015"。
			► 只有 "AMD"和"System"能和--outFile一起使用。
			►"ES6"和"ES2015"可使用在目标输出为"ES5"或更低的情况下。
		
		moduleResolution: string
			default: module === "AMD" | "System" | "ES6" ? "Classic" : "Node"
			决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。

		lib: string[]
			no default
			--lib	
				// 编译过程中需要引入的库文件的列表。 可能的值为：
				// 所有都是小写
				► es5
				► es6
				► es2015
				► es7
				► es2016
				► es2017
				► es2018
				► dom
				► dom.iterable
				► webworker
				► scripthost
				► es2015.core
				► es2015.collection
				► es2015.generator
				► es2015.iterable
				► es2015.promise
				► es2015.proxy
				► es2015.reflect
				► es2015.symbol
				► es2015.symbol.wellknown
				► es2016.array.include
				► es2017.object
				► es2017.sharedmemory
				► es2017.string
				► es2017.typedarrays
				► es2018.promise
				► es2018.regexp
				► esnext.array
				► esnext.asynciterable

				注意：如果--lib没有指定一个默认注入的库。默认注入的库为：
				► 针对于--target es5：dom，es5，scripthost
				► 针对于--target es6：dom，es6，dom.iterable，scripthost


		--listEmittedFiles	boolean	false	打印出编译后生成文件的名字。
		--listFiles	boolean	false	编译过程中打印文件名。
		
		--locale	string	(platform specific)	显示错误信息时使用的语言，比如：en-us。
		-mapRoot	string					为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当.map文件是在运行时指定的，并不同于js文件的地址时使用这个标记。指定的路径会嵌入到sourceMap里告诉调试器到哪里去找它们。

		--maxNodeModuleJsDepth	number	0	node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于--allowJs。

		--newLine	string	(platform specific)	当生成文件时指定行结束符："crlf"（windows）或"lf"（unix）。

		--noEmit	boolean	false	不生成输出文件。
		--noEmitHelpers	boolean	false	不在输出文件中生成用户自定义的帮助函数代码，如__extends。
		-noEmitOnError	boolean	false	报错时不生成输出文件。
		--noFallthroughCasesInSwitch	boolean	false	报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）

		--noImplicitAny	boolean	false	在表达式和声明上有隐含的any类型时报错。
		--noImplicitReturns	boolean	false	不是函数的所有返回路径都有返回值时报错。
		
		suppressImplicitAnyIndexErrors: boolean
			default: false, 阻止--noImplicitAny对缺少索引签名的索引对象报错
			--suppressImplicitAnyIndexErrors

		--noImplicitThis	boolean	false	当this表达式的值为any类型的时候，生成一个错误。
		--noImplicitUseStrict	boolean	false	模块输出中不包含"use strict"指令。

		--noLib	boolean	false	不包含默认的库文件（lib.d.ts）。

		--noResolve	boolean	false	不把/// <reference``>或模块导入的文件加到编译文件列表。

		--noUnusedLocals	boolean	false	若有未使用的局部变量则抛错。
		--noUnusedParameters	boolean	false	若有未使用的参数则抛错。

		--outDir	string		重定向输出目录。
		
		outFile: string
			no default
			将输出文件合并为一个文件。
			合并的顺序是根据传入编译器的文件顺序和///<reference``>和import的文件顺序决定的。查看输出文件顺序文件了解详情。


		--preserveConstEnums	boolean	false	保留const和enum声明。

		--pretty[1]	boolean	false	给错误和消息设置样式，使用颜色和上下文。

		--project
			-p	string		编译指定目录下的项目。这个目录应该包含一个tsconfig.json文件来管理编译。

		--reactNamespace	string	"React"	当目标为生成"react" JSX时，指定createElement和__spread的调用对象

		-removeComments	boolean	false	删除所有注释，除了以/!*开头的版权信息。

		--rootDir	string	(common root directory is computed from the list of input files)	仅用来控制输出的目录结构--outDir
			rootDirs[2]	string[]		根（root）文件夹列表，表示运行时组合工程结构的内容。查看模块解析文档了解详情。


		--skipDefaultLibCheck	boolean	false	忽略库的默认声明文件的类型检查。
		--skipLibCheck	boolean	false	忽略所有的声明文件（*.d.ts）的类型检查。
		
		
		--sourceMap	boolean	false	生成相应的.map文件。
		--sourceRoot	string				指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到sourceMap里。

		--strict	boolean	false 	启用所有严格类型检查选项。
			启用--strict相当于启用--noImplicitAny, --noImplicitThis, --alwaysStrict和--strictNullChecks。

		--strictNullChecks	boolean	false 在严格的null检查模式下，null和undefined值不包含在任何类型里，只允许用它们自己和any来赋值（有个例外，undefined可以赋值到void）。

		--stripInternal[1] boolean	false	不对具有/** @internal */ JSDoc注解的代码生成代码。

		--suppressExcessPropertyErrors[1]	boolean	false	阻止对对象字面量的额外属性检查。

		--traceResolution	boolean	false	生成模块解析日志信息

		version
			--version -v
			打印编译器版本号。
		
		watch
			--watch -w
			在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。

	}
}



