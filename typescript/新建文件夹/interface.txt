
#静态部分,不在检查的范围内
	constructor 存在于类的静态部分，所以不在检查的范围内
	
	interface ClockConstructor {
		new (hour: number, minute: number);
	}

	class Clock implements ClockConstructor {
		currentTime: Date;
		constructor(h: number, m: number) { }
	}
	// 以上报错
	
	// 可以通过以下方式 检查 constructor 静态方法
	interface ClockConstructor {
		new (hour: number, minute: number);
	}
	function createClock(ctor: ClockConstructor, hour: number, minute: number) {
		return new ctor(hour, minute);
	}
	class DigitalClock  {
		constructor(h: number, m: number) { }
	}
	// 在createClock(AnalogClock, 7, 32)里，会检查AnalogClock是否符合构造函数签名。
	let digital = createClock(DigitalClock, 12, 17);
	
	

#混合类型
	interface Counter {
		(start: number): string;
		interval: number;
		reset(): void;
	}
	
#继承接口	

	interface Shape {
		color: string;
	}

	interface Square extends Shape {
		sideLength: number;
	}
	
	let square = <Square>{};
	square.color = "blue";
	square.sideLength = 10;
	
	
	一个接口可以继承多个接口，创建出多个接口的合成接口。
	
	interface Square extends Shape, PenStroke {}
	
# 接口继承类
	当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现
	因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。
	
	class Control {
		private state: any;
	}
	interface SelectableControl extends Control {
		select(): void;
	}

	class Button extends Control implements SelectableControl {
		select() { }
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	