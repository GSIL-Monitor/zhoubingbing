
# 泛型函数
	function loggingIdentity<T>(arg: T): T {
		return arg;
	}
	
	loggingIdentity('str');			// 函数后面的 < > 可以省略 
	loggingIdentity<string>('str');

	T类型的数组
	function loggingIdentity<T>(arg: T[]): T[] {
		return arg;
	}
	
	function loggingIdentity<T>(arg: Array<T>): Array<T> {
		return arg;
	}
	
	
	
	
# 泛型类型
	
	泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面
	function identity<T>(arg: T): T {
		return arg;
	}
	// <T>(arg: T) 类型, 相当于泛型接口
	let myIdentity: <T>(arg: T) => T = identity;
	/*	
		// 不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。
		let myIdentity: <U>(arg: U) => U = identity;
		
		// 带有调用签名的对象字面量来定义泛型函数
		let myIdentity: {<T>(arg: T): T} = identity;
	*/

# 泛型接口
	interface GenericIdentityFn {
		<T>(arg: T): T;
	}
	function identity<T>(arg: T): T {
		return arg;
	}
	let myIdentity: GenericIdentityFn = identity;

# 泛型类
	class GenericNumber<T> {
		zeroValue: T;
		add: (x: T, y: T) => T;
	}
	let myGenericNumber = new GenericNumber<number>();

# 泛型约束
	// 我们想访问arg的length属性，但是编译器并不能证明每种类型都有length属性
	function loggingIdentity<T>(arg: T): T {
		console.log(arg.length);  // Error: T doesn't have .length
		return arg;
	}
	/*
		interface Lengthwise {
			length: number;
		}
		function loggingIdentity<T extends Lengthwise>(arg: T): T {
			return arg;
		}
		// 需要传入符合约束类型的值，必须包含必须的属性
		loggingIdentity({length: 10, value: 3});
	*/

# 在泛型里使用类类型
	在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如，
	function create<T>(c: {new(): T; }): T {
		return new c();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	









