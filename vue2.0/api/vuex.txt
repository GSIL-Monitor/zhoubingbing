
npm install vue-vuex

如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能：
	import Vue from 'vue'
	import vuex from 'vuex'

	Vue.use(vuex)
	

安装 Vuex 之后，让我们来创建一个 store。 创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutations：
const store = new Vuex.Store({
	//判断是否为生产环境
	//在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。
	//严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。
	strict: process.env.NODE_ENV !== 'production',
	
	state: {
		count: 0
	},
	mutations: {
		increment (state) {
			state.count++
		}
	}
})
 
	* store.commit('key') 将会分发到 mutations 对象中的key
	
	
// 在组件中使用----------------------------------------------------------------------------------------------------
	new Vue({
		store: store,
		el: '#app'
	})

 
现在，你可以通过 store.state 来获取状态对象，以及通过 store.commit 方法触发状态变更：
	store.commit('increment')
	console.log(store.state.count)
	
	
	/*
		//传递参数
		store.commit('increment', agr1, agr2)
		或者一 payload 方式传递参数
		store.commit({
			type: increment,
			agr1: 'agr1',
			agr2: 'agr2'
		
		})
		
	
	*/
	

#State-------------------------------------------------------

//通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。
const Counter = {
	template: `<div>{{ count }}</div>`,
	computed: {
		count () {
			return this.$store.state.count
		}
	}
}

//mapState 辅助函数
	
	*当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。
	为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性

	
	<p>computed 中的 m-count 方法， 会监听 state.count 属性  {{count}}</p>
	
import { mapState } from 'vuex';
export default {
	// ...
	computed: mapState({
		// 箭头函数可使代码更简练
		m-count: state => state.count,
		
		// 传字符串参数 'count' 等同于 'state => state.count'
		countAlias: 'count',
		/*
		*/
		// 为了能够使用 'this' 获取局部状态，必须使用常规函数
		countPlusLocalState (state) {
			return state.count + this.localCount
		}
	})
	
	/*
	
	//对象展开运算符 (mapState)
	computed: {
		localComputed () { /* ... */ },
		
		//mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢
		...mapState({ 
			//...
		})
	}
	
	*/
}

当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。
computed: mapState([
	// 映射 this.count 为 store.state.count
	'count'
])

	
//Getters-------------------------------------------------------

	*Vuex 允许我们在 store 中定义『getters』（可以认为是 store 的计算属性）。
	 Getters 接受 state 作为其第一个参数：
	 
	 
//有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：	
const store = new Vuex.Store({
	state: {
		todos: [
			{ id: 1, text: '...', done: true },
	    	{ id: 2, text: '...', done: false }
		]
	},
	getters: {
		doneTodos: state => {
			return state.todos.filter(todo => todo.done)
		}
	}
})



//Getters 也可以接受其他 getters 作为第二个参数：

getters: {
	// ...
	doneTodosCount: (state, getters) => {
		return getters.doneTodos.length
	}
}

	我们可以很容易地在任何组件中使用它：
	computed: {
		doneTodosCount () {
			return this.$store.getters.doneTodosCount
		}
	}


	// mapGetters 辅助函数
	*用法同mapState



//Mutations------------------------------------------------------
	
	* 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。
	  并且它会接受 state 作为第一个参数
	  mutation 必须是同步函数

// 在组件中提交 Mutations

你可以在组件中使用 this.$store.commit('xxx') 提交 mutation，
或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。

import { mapMutations } from 'vuex'
export default {
	// ...
	methods: {
		...mapMutations([
			'increment' // 映射 this.increment() 为 this.$store.commit('increment')
		]),
		//or
		...mapMutations({
			add: 'increment' // 映射 this.add() 为 this.$store.commit('increment')
		})
	}
}


// Actions------------------------------------------------------

Action 类似于 mutation，不同在于：
	.Action 提交的是 mutation，而不是直接变更状态。
	.Action 可以包含任意异步操作。

	*Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，
	或者通过 context.state 和 context.getters 来获取 state 和 getters。
	context.dispatch
	
	当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。
	
	
const store = new Vuex.Store({
	state: {
		count: 0
	},
	mutations: {
		increment (state) {
			state.count++
		}
	},
	actions: {
		increment (context) {
			// 可执行异步
			setTimeout(() => {
				context.commit('increment')
			}, 1000)
		}
	}
	
	/*
	
	//ES2015 的 参数解构 
	actions: {
		increment ({ commit }) {
			commit('increment')
		}
	}
	
	*/
})


Action 通过 store.dispatch 方法触发：
// 以载荷形式分发
store.dispatch('incrementAsync', {
	amount: 10
})

// 以对象形式分发
store.dispatch({
	type: 'incrementAsync',
	amount: 10
})


// 在组件中分发 Action
	你在组件中使用 this.$store.dispatch('xxx') 分发 action，
	或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）

import { mapActions } from 'vuex'

export default {
	// ...
	methods: {
		...mapActions([
		'increment' // 映射 this.increment() 为 this.$store.dispatch('increment')
	]),
	//or
	...mapActions({
		add: 'increment' // 映射 this.add() 为 this.$store.dispatch('increment')
	})
}
}


#组合 Actions
	store.dispatch 可以处理被触发的action的回调函数返回的Promise


actions: {
	actionA ({ commit }) {
		return new Promise((resolve, reject) => {
			setTimeout(() => {
				commit('someMutation')
				resolve()
			}, 1000)
		})
	}
}

现在你可以：
	store.dispatch('actionA').then(() => {
		// ...
	})

在另外一个 action 中也可以：

actions: {
	// ...
	actionB ({ dispatch, commit }) {
		return dispatch('actionA').then(() => {
			commit('someOtherMutation')
		})
	}
}


//Modules----------------------------------------------------------------

	对于模块内部的 action，局部状态通过 context.state 暴露出来， 根节点状态则为 context.rootState , context.rootGetters

	对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：
	const moduleA = {
		// ...
		getters: {
			sumWithRootCount (state, getters, rootState, rootGetters) {
				return state.count + rootState.count
			}
		}
	}


#命名空间
	默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。
	如果希望你的模块更加自包含或提高可重用性，你可以通过添加 namespaced: true 的方式使其成为命名空间模块。
	当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。



