
//单元素/组件的过渡----------------------------------------------------------

Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡

.条件渲染 （使用 v-if）
.条件展示 （使用 v-show）
.动态组件
.组件根节点

用法：
	<transition name="fade">
    	<p v-if="show">hello</p>
	</transition>
	// name="fade" 用于样式前缀 
	
样式的先后顺序为：
		
	//进场动画中 .fade-enter-active  .fade-enter-to 一直是在的
	进场 .fade-enter －> .fade-enter-active －> fade-enter-to
	
	//离场动画中 .fade-leave-active  .fade-leave-to 一直是在的
	离场 .fade-leave-active －> .fade-leave-to
	
	.fade-enter-active, .fade-leave-active {
		transition: opacity .5s
	}
	.fade-enter, .fade-leave-to /* .fade-leave-active in <2.1.8 */ {
		opacity: 0
	}

//or
	.fade-enter-active, .fade-leave-active {
		-webkit-transition: opacity 5s;
		opacity: 0
	}
	.fade-enter-to{
		opacity: 1
	}
	.fade-leave-to{
		opacity: 0
	}
	
＃过渡的-CSS-类名
会有 6 个(CSS)类名在 enter/leave 的过渡中切换

	1.v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。
	2.v-enter-active: 定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
	3.v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入一帧后生效（于此同时 v-enter 被删除），在 transition/animation 完成之后移除。
	4.v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。
	5.v-leave-active: 定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
	6.v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发一帧后生效（于此同时 v-leave 被删除），在 transition/animation 完成之后移除。
	

#自定义过渡类名
	enter-class
	enter-active-class
	leave-class
	leave-active-class

//他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。
	<transition
	    name="custom-classes-transition"
	    enter-active-class="animated tada"
	    leave-active-class="animated bounceOutRight"
	>
		<p v-if="show">hello</p>
	</transition>
	
	
#JavaScript钩子， 在 methods 中定义
<transition
  v-on:before-enter="beforeEnter"
  v-on:enter="enter"
  v-on:after-enter="afterEnter"
  v-on:enter-cancelled="enterCancelled"
  v-on:before-leave="beforeLeave"
  v-on:leave="leave"
  v-on:after-leave="afterLeave"
  v-on:leave-cancelled="leaveCancelled"
>
  <!-- ... -->
  </transition>
  
  //当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 
  methods:{
  	beforeEnter: function(el){ },
	enter: function (el, done) {
	    // ...
	    done()
	},
	
	leave: function (el, done) {
	    // ...
	    done()
	},
  }
  
  //推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css="false"
	
	
# mode 过渡模式
	*当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。

	.in-out: 新元素先进行过渡，完成之后当前元素过渡离开。
	.out-in: 当前元素先进行过渡，完成之后新元素过渡进入。
	
	<button type="button" @click="updateMessage">button</button>
	<transition name="fade" mode="out-in">
		<button v-if="show" key="saved">hello</button>
		<button v-else key="edited">hellos</button>
	</transition>
	
	
	methods: {
		updateMessage: function () {
			this.show = !this.show
		}
	}


	//css:
	.fade-enter-active, .fade-leave-active {
		transition: all .5s;
	}
	
	.fade-enter, .fade-leave-to /* .fade-leave-active in <2.1.8 */ {
		opacity: 0;
		transform:translateX(20px);
	}

#多个组件的过渡	
	<transition name="component-fade" mode="out-in">
		<component v-bind:is="view"></component>
	</transition>
	new Vue({
	  el: '#transition-components-demo',
	  data: {
		view: 'v-a'
	  },
	  components: {
		'v-a': {
		  template: '<div>Component A</div>'
		},
		'v-b': {
		  template: '<div>Component B</div>'
		}
	  }
	})
	
	
#列表过渡
	.不同于 <transition>， 它会以一个真实元素呈现：默认为一个 <span>。你也可以通过 tag 特性更换为其他元素。
	.内部元素 总是需要 提供唯一的 key 属性值
	
	<transition-group name="list" tag="p">
		<span v-for="item in items" v-bind:key="item" class="list-item">
			{{ item }}
		</span>
	</transition-group>


	
#列表的位移过渡
	<transition-group name="flip-list" tag="ul">
		<li v-for="item in items" v-bind:key="item">
		  {{ item }}
		</li>
	</transition-group>
	
	new Vue({
	  el: '#flip-list-demo',
	  data: {
		items: [1,2,3,4,5,6,7,8,9]
	  },
	  methods: {
		shuffle: function () {
		  this.items = _.shuffle(this.items)
		}
	  }
	})
	
	
	style:
	.flip-list-move {
	  transition: transform 1s;
	}


#可复用的过渡
	Vue.component('my-special-transition', {
	  template: '\
	    <transition\
	      name="very-special-transition"\
	      mode="out-in"\
	      v-on:before-enter="beforeEnter"\
	      v-on:after-enter="afterEnter"\
	    >\
	      <slot></slot>\
	    </transition>\
	  ',
	  methods: {
	    beforeEnter: function (el) {
	      // ...
	    },
	    afterEnter: function (el) {
	      // ...
	    }
	  }
	})




























































