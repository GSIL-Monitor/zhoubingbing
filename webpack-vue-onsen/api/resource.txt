


npm install vue-resource

如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能：
	import Vue from 'vue'
	import VueResource from 'vue-resource'

	Vue.use(VueResource)
	

	
安装好vue-resource 之后， 在Vue 组件中， 我们就可以通过 this.$http 或者使用全局变量 Vue.http 发起异步请求
	Vue.http
	this.$http 
	
$http的api方法和选项参数
	this.$http({
		url: '/app/list',
		method: ' GET | POST | PUT | DELETE ｜ 等',
		body: { Object, String, FormData }, //request中的 body 数据，
		params: {},
		headers: {}, //设置request的header属性
		timeout: 1500,
		before: function(request){}, //发出请求之前 对request进行修改
		progress: function(event){}, //上传文件 图片视频... 时的进度， enent对象包含 文件总大小，以上传的大小
		
		credentials:
		emulateHTTP:
		emulateJSON:
		
	})
	
$http还可以直接调用 api方法，
	get(url, option)
	head(url, option)
	delete(url, option)
	jsonp(url, option)
	
	post(url, body, option)
	put(url, body, option)
	patch(url, body, option)
	

this.$http.get(...).then(function(response){
	/*
		request:{
			url: '',  // response 的原始url
			body: , // response 的 body 数据
			headers:  // response 的 headers
			ok: boolean, //HTTP状态码 在200-299 之间为true
			status: 状态码
			statusText: response 的 HTTP状态描述
			
		}
		另外还有三个方法
		text() //把response.body 转换成字符串
		json() //把response.body 解析成对象
		blob()	//把response.body 解析成blob对象, 用于 图片 音频 二进制文件
		
		
	*/
},
function(error){

})



//拦截器----------------------------------------------
this.$http.interceptors.push( (request, next) => {

	//next();
	
	//修改返回的 response
	/*next(function(response){
		console.log(response)
		//response.body = {name:'zhangsan'}
	})*/
	
	
	//不发送后台 直接返回
	/*next(request.respondWith({name:'zhoubb'},{
		status:403,
		statusText:''
	}
	));*/
	
	})


//this.$resource 的用法----------------------------------


var products = this.$resource('/url/:id')

products.get({id:123}).then()

products.save({id:123}, data).then()


this.$resource 提供了6个 默认的动作行为
get query { method:'GET'}

save { method:'POST'}
update { method:'PUT'}

remove delete { method:'DELETE'}



























	
	