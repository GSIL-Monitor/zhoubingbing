
#创建Zone 
	var zone = Zone.current.fork({
		name:{},
		properties:{
			custom:''
		},
		...
	})
	
	zone.get('custom')

	

#上下文传播
	.子Zone 继承父Zone 的properties属性
	
	let rootZone = Zone.current;
	let zoneA = rootZone.fork({name: 'zoneA', properties: {a: 1, b:1}});
	
	zoneA.get('b');
	
# 拦截

	class TimingZone extends Zone {
        constructor(parent) {
            super(parent, {
                name: 'timingZone'
            });
        }
        run() {
            super.run(...arguments);
        }
    }

    class LogZone extends Zone {
        constructor(parent) {
            super(parent, {
                name: 'logZone'
            });
        }

        run() {
            // this.parent.run.apply(this, arguments);
            this.parent.run(...arguments);
        }
    }

    let rootZone = Zone.current;
    let timingZone = new TimingZone(rootZone);
    let logZone = new LogZone(timingZone);

    logZone.run(() => {
        console.log(Zone.current.name, 'Hello World!');
    });
	
	
.通过 Zone.prototype.fork() API 拦截

	let timingZone = Zone.current.fork({
		name: 'timingZone',
		onInvoke: function (parentZoneDelegate, currentZone, targetZone, callback, applyThis, applyArgs, source) {
			// 执行 appZone 的回调函数，最后执行
			parentZoneDelegate.invoke(targetZone, callback, applyThis, applyArgs, source);

		}
	});

	let logZone = timingZone.fork({
		name: 'logZone',
		onInvoke: function (parentZoneDelegate, currentZone, targetZone, callback, applyThis, applyArgs, source) {
			// targetZone 	为 	appZone
			// currentZone 	为当前执行的 Zone -> logZone
			
			setTimeout(function () {
				// parentZoneDelegate 是执行当前Zone 的父级Zone 的Invoke 函数
				parentZoneDelegate.invoke(targetZone, callback, applyThis, applyArgs, source);
			}, 2000)
		}
	});
	
	
	let appZone = logZone.fork({
		name: 'appZone'
	});
	
	
	appZone.run(function () {
        console.log('Zone:', Zone.current.name, 'Hello World!');
    });
	// 可以有多个参数 appZone.run(fn,agrs)
	
	/*
		执行顺序
		logZone的onInvoke
		timingZone的onInvoke
		appZone 的回调函数
		
		此时 appZone.fork 参数中不能有 onInvoke 参数，否则run中的回调函数会失效，直接执行 onInvoke 函数
		
	*/

	
	
# 任务顺序安排 Task Scheduling
	window.setTimeout setInterval 方法被Zonejs 重写
	
	// Save the original reference to setTimeout
    let originalSetTimeout = window.setTimeout;
    // Overwrite the API with a function which wraps callback in zone.
    window.setTimeout = function (callback, delay) {
        // Use scheduleTask API on the current zone.
        Zone.current.scheduleMacroTask(
            // Debug information
            'setTimeout',
            // callback which needs to execute in the current zone.
            callback,
            // optional data such as if task is recurring.
            null,
            // Default schedule behavior
            (task) => {
                return originalSetTimeout(
                    // Use the task invoke method, so that the task can
                    // call callback in the correct zone.
                    task.invoke,
                    // original delay information
                    delay
                );
            });
    }
	
当run 函数体中有 setTimeout setInterval promise 等 异步执行时 才会触发  onScheduleTask函数，
	parentZoneDelegate.scheduleTask 触发 onInvokeTask函数
	
	let logZone = Zone.current.fork({
        name: 'a',
        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
            // 执行顺序2
            // Print when async tasks are scheduled
            console.log('Schedulea', task.source);
            return parentZoneDelegate.scheduleTask(targetZone, task);
        },

        onInvokeTask: function (parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
            // 执行顺序4
            // Print when async tasks are invoked
            console.log('Invokea', task.source);
            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
        }

    })

    let chlidZone = logZone.fork({
        name: 'chlidZone',
        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {

            // 执行顺序1
            // Print when async tasks are scheduled
            console.log('Scheduleb', task.source);
            return parentZoneDelegate.scheduleTask(targetZone, task);
        },

        onInvokeTask: function (parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
            // 执行顺序3
            // Print when async tasks are invoked
            console.log('Invokeb', task.source);
            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
        }

    })

    console.log('start');
    chlidZone.run(() => {
        setTimeout(() => {
            console.log(111)
        }, 2000);
    });
    console.log('end');






























